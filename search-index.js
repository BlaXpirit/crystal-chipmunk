crystal_doc_search_index_callback({"repository_name":"github.com/oprypin/crystal-chipmunk","body":"# crystal-chipmunk\n\n#### [Crystal][] bindings to [Chipmunk][] (2D rigid body physics library).\n\nRequires Chipmunk 7.\n\n[License](LICENSE): MIT.\n\nThis library uses and is based on [Chipmunk][].\n\nTests and documentation are based on [pymunk][].\n\n\n[crystal]: http://crystal-lang.org/\n[chipmunk]: http://chipmunk-physics.net/ \"Chipmunk2D Physics\"\n[pymunk]: http://pymunk.org/\n","program":{"html_id":"github.com/oprypin/crystal-chipmunk/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/oprypin/crystal-chipmunk","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP","path":"CP.html","kind":"module","full_name":"CP","name":"CP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"chipmunk/body.cr","line_number":24,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr"},{"filename":"chipmunk/collision.cr","line_number":25,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr"},{"filename":"chipmunk/constraint.cr","line_number":24,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"},{"filename":"chipmunk/debug_draw.cr","line_number":23,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr"},{"filename":"chipmunk/vector.cr","line_number":23,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr"},{"filename":"chipmunk/query.cr","line_number":25,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr"},{"filename":"chipmunk/shape.cr","line_number":22,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr"},{"filename":"chipmunk/space.cr","line_number":23,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr"},{"filename":"chipmunk/unsafe.cr","line_number":36,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"lerp(f1:Number,f2:Number,t:Number):Number-instance-method","html_id":"lerp(f1:Number,f2:Number,t:Number):Number-instance-method","name":"lerp","doc":"Linearly interpolate (or extrapolate) between *f1* and *f2* by *t* percent.","summary":"<p>Linearly interpolate (or extrapolate) between <em>f1</em> and <em>f2</em> by <em>t</em> percent.</p>","abstract":false,"args":[{"name":"f1","doc":null,"default_value":"","external_name":"f1","restriction":"Number"},{"name":"f2","doc":null,"default_value":"","external_name":"f2","restriction":"Number"},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Number"}],"args_string":"(f1 : Number, f2 : Number, t : Number) : Number","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L27","def":{"name":"lerp","args":[{"name":"f1","doc":null,"default_value":"","external_name":"f1","restriction":"Number"},{"name":"f2","doc":null,"default_value":"","external_name":"f2","restriction":"Number"},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Number","visibility":"Public","body":"(f1 * (1.0 - t)) + (f2 * t)"}},{"id":"lerpconst(f1:Number,f2:Number,d:Number):Number-instance-method","html_id":"lerpconst(f1:Number,f2:Number,d:Number):Number-instance-method","name":"lerpconst","doc":"Linearly interpolate from *f1* to *f2* by no more than *d*.","summary":"<p>Linearly interpolate from <em>f1</em> to <em>f2</em> by no more than <em>d</em>.</p>","abstract":false,"args":[{"name":"f1","doc":null,"default_value":"","external_name":"f1","restriction":"Number"},{"name":"f2","doc":null,"default_value":"","external_name":"f2","restriction":"Number"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Number"}],"args_string":"(f1 : Number, f2 : Number, d : Number) : Number","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L32","def":{"name":"lerpconst","args":[{"name":"f1","doc":null,"default_value":"","external_name":"f1","restriction":"Number"},{"name":"f2","doc":null,"default_value":"","external_name":"f2","restriction":"Number"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Number","visibility":"Public","body":"f1 + ((f2 - f1).clamp(-d, d))"}},{"id":"v(x,y):Vect-instance-method","html_id":"v(x,y):Vect-instance-method","name":"v","doc":"Convenience function to create a `Vect`.","summary":"<p>Convenience function to create a <code><a href=\"CP/Vect.html\">Vect</a></code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L201","def":{"name":"v","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(x, y)"}},{"id":"vzero:Vect-instance-method","html_id":"vzero:Vect-instance-method","name":"vzero","doc":"Zero `Vect`.","summary":"<p>Zero <code><a href=\"CP/Vect.html\">Vect</a></code>.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L206","def":{"name":"vzero","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(0.0, 0.0)"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Arbiter","path":"CP/Arbiter.html","kind":"struct","full_name":"CP::Arbiter","name":"Arbiter","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/collision.cr","line_number":77,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"The Arbiter object encapsulates a pair of colliding shapes and all of\nthe data about their collision.\n\nThey are created when a collision starts, and persist until those\nshapes are no longer colliding.\n\n**Warning:** Because arbiters are handled by the space you should\nnever hold on to an arbiter as you don't know when it will be\ndestroyed! Use them within the callback where they are given to you\nand then forget about them or copy out the information you need from\nthem.","summary":"<p>The Arbiter object encapsulates a pair of colliding shapes and all of the data about their collision.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"bodies:::Tuple(Body,Body)-instance-method","html_id":"bodies:::Tuple(Body,Body)-instance-method","name":"bodies","doc":"Return the colliding bodies involved for this arbiter.\n\nThe order of the `collision_type` the bodies are associated with values will match\nthe order set when the collision handler was registered.","summary":"<p>Return the colliding bodies involved for this arbiter.</p>","abstract":false,"args":[],"args_string":" : ::Tuple(Body, Body)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L165","def":{"name":"bodies","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Body, Body)","visibility":"Public","body":"LibCP.arbiter_get_bodies(self, out a, out b)\n{Body[a], Body[b]}\n"}},{"id":"call_wildcard_begin_a(space:Space):Bool-instance-method","html_id":"call_wildcard_begin_a(space:Space):Bool-instance-method","name":"call_wildcard_begin_a","doc":"If you want a custom callback to invoke the wildcard callback for the first collision type, you must call this function explicitly.\n\nYou must decide how to handle the wildcard's return value since it may disagree with the other wildcard handler's return value or your own.","summary":"<p>If you want a custom callback to invoke the wildcard callback for the first collision type, you must call this function explicitly.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L224","def":{"name":"call_wildcard_begin_a","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.arbiter_call_wildcard_begin_a(self, space)"}},{"id":"call_wildcard_begin_b(space:Space):Bool-instance-method","html_id":"call_wildcard_begin_b(space:Space):Bool-instance-method","name":"call_wildcard_begin_b","doc":"If you want a custom callback to invoke the wildcard callback for the second collision type, you must call this function explicitly.\n\nYou must decide how to handle the wildcard's return value since it may disagree with the other wildcard handler's return value or your own.","summary":"<p>If you want a custom callback to invoke the wildcard callback for the second collision type, you must call this function explicitly.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L230","def":{"name":"call_wildcard_begin_b","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.arbiter_call_wildcard_begin_b(self, space)"}},{"id":"call_wildcard_post_solve_a(space:Space)-instance-method","html_id":"call_wildcard_post_solve_a(space:Space)-instance-method","name":"call_wildcard_post_solve_a","doc":"If you want a custom callback to invoke the wildcard callback for the first collision type, you must call this function explicitly.","summary":"<p>If you want a custom callback to invoke the wildcard callback for the first collision type, you must call this function explicitly.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L248","def":{"name":"call_wildcard_post_solve_a","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_call_wildcard_post_solve_a(self, space)"}},{"id":"call_wildcard_post_solve_b(space:Space)-instance-method","html_id":"call_wildcard_post_solve_b(space:Space)-instance-method","name":"call_wildcard_post_solve_b","doc":"If you want a custom callback to invoke the wildcard callback for the second collision type, you must call this function explicitly.","summary":"<p>If you want a custom callback to invoke the wildcard callback for the second collision type, you must call this function explicitly.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L252","def":{"name":"call_wildcard_post_solve_b","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_call_wildcard_post_solve_b(self, space)"}},{"id":"call_wildcard_pre_solve_a(space:Space):Bool-instance-method","html_id":"call_wildcard_pre_solve_a(space:Space):Bool-instance-method","name":"call_wildcard_pre_solve_a","doc":"If you want a custom callback to invoke the wildcard callback for the first collision type, you must call this function explicitly.\n\nYou must decide how to handle the wildcard's return value since it may disagree with the other wildcard handler's return value or your own.","summary":"<p>If you want a custom callback to invoke the wildcard callback for the first collision type, you must call this function explicitly.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L237","def":{"name":"call_wildcard_pre_solve_a","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.arbiter_call_wildcard_pre_solve_a(self, space)"}},{"id":"call_wildcard_pre_solve_b(space:Space):Bool-instance-method","html_id":"call_wildcard_pre_solve_b(space:Space):Bool-instance-method","name":"call_wildcard_pre_solve_b","doc":"If you want a custom callback to invoke the wildcard callback for the second collision type, you must call this function explicitly.\n\nYou must decide how to handle the wildcard's return value since it may disagree with the other wildcard handler's return value or your own.","summary":"<p>If you want a custom callback to invoke the wildcard callback for the second collision type, you must call this function explicitly.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L243","def":{"name":"call_wildcard_pre_solve_b","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.arbiter_call_wildcard_pre_solve_b(self, space)"}},{"id":"call_wildcard_separate_a(space:Space)-instance-method","html_id":"call_wildcard_separate_a(space:Space)-instance-method","name":"call_wildcard_separate_a","doc":"If you want a custom callback to invoke the wildcard callback for the first collision type, you must call this function explicitly.","summary":"<p>If you want a custom callback to invoke the wildcard callback for the first collision type, you must call this function explicitly.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L257","def":{"name":"call_wildcard_separate_a","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_call_wildcard_separate_a(self, space)"}},{"id":"call_wildcard_separate_b(space:Space)-instance-method","html_id":"call_wildcard_separate_b(space:Space)-instance-method","name":"call_wildcard_separate_b","doc":"If you want a custom callback to invoke the wildcard callback for the second collision type, you must call this function explicitly.","summary":"<p>If you want a custom callback to invoke the wildcard callback for the second collision type, you must call this function explicitly.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L261","def":{"name":"call_wildcard_separate_b","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_call_wildcard_separate_b(self, space)"}},{"id":"contact_point_set:ContactPointSet-instance-method","html_id":"contact_point_set:ContactPointSet-instance-method","name":"contact_point_set","doc":"Return a contact set from an arbiter.","summary":"<p>Return a contact set from an arbiter.</p>","abstract":false,"args":[],"args_string":" : ContactPointSet","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L171","def":{"name":"contact_point_set","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ContactPointSet","visibility":"Public","body":"LibCP.arbiter_get_contact_point_set(self)"}},{"id":"contact_point_set=(contact_point_set:ContactPointSet)-instance-method","html_id":"contact_point_set=(contact_point_set:ContactPointSet)-instance-method","name":"contact_point_set=","doc":"Replace the contact point set for an arbiter.\n\nThis can be a very powerful feature, but use it with caution!","summary":"<p>Replace the contact point set for an arbiter.</p>","abstract":false,"args":[{"name":"contact_point_set","doc":null,"default_value":"","external_name":"contact_point_set","restriction":"ContactPointSet"}],"args_string":"(contact_point_set : ContactPointSet)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L177","def":{"name":"contact_point_set=","args":[{"name":"contact_point_set","doc":null,"default_value":"","external_name":"contact_point_set","restriction":"ContactPointSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_set_contact_point_set(self, pointerof(contact_point_set))"}},{"id":"count:Int32-instance-method","html_id":"count:Int32-instance-method","name":"count","doc":"Get the number of contact points for this arbiter.","summary":"<p>Get the number of contact points for this arbiter.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L198","def":{"name":"count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"LibCP.arbiter_get_count(self)"}},{"id":"data:::Pointer(Void)-instance-method","html_id":"data:::Pointer(Void)-instance-method","name":"data","doc":"The user data pointer associated with this pair of colliding objects.","summary":"<p>The user data pointer associated with this pair of colliding objects.</p>","abstract":false,"args":[],"args_string":" : ::Pointer(Void)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L266","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Pointer(Void)","visibility":"Public","body":"LibCP.arbiter_get_user_data(self)"}},{"id":"data=(data)-instance-method","html_id":"data=(data)-instance-method","name":"data=","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L269","def":{"name":"data=","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_set_user_data(self, data.as(::Pointer(Void)))"}},{"id":"depth(i:Int):Float64-instance-method","html_id":"depth(i:Int):Float64-instance-method","name":"depth","doc":"Get the depth of the *i*-th contact point.","summary":"<p>Get the depth of the <em>i</em>-th contact point.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L217","def":{"name":"depth","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.arbiter_get_depth(self, i)"}},{"id":"first_contact?:Bool-instance-method","html_id":"first_contact?:Bool-instance-method","name":"first_contact?","doc":"Returns true if this is the first step a pair of objects started colliding.\n\nThis can be useful for sound effects for instance. If it's the first\nframe for a certain collision, check the energy of the collision in a\n`post_step()` callback and use that to determine the volume of a sound\neffect to play.","summary":"<p>Returns true if this is the first step a pair of objects started colliding.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L187","def":{"name":"first_contact?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.arbiter_is_first_contact(self)"}},{"id":"friction:Float64-instance-method","html_id":"friction:Float64-instance-method","name":"friction","doc":"The friction coefficient that will be applied to the pair of colliding objects.\n\nSetting the value in a `pre_solve()` callback will override the value\ncalculated by the space. The default calculation multiplies the\nfriction of the two shapes together.","summary":"<p>The friction coefficient that will be applied to the pair of colliding objects.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L107","def":{"name":"friction","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.arbiter_get_friction(self)"}},{"id":"friction=(friction:Number)-instance-method","html_id":"friction=(friction:Number)-instance-method","name":"friction=","doc":null,"summary":null,"abstract":false,"args":[{"name":"friction","doc":null,"default_value":"","external_name":"friction","restriction":"Number"}],"args_string":"(friction : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L110","def":{"name":"friction=","args":[{"name":"friction","doc":null,"default_value":"","external_name":"friction","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_set_friction(self, friction)"}},{"id":"ignore:Bool-instance-method","html_id":"ignore:Bool-instance-method","name":"ignore","doc":"Mark a collision pair to be ignored until the two objects separate.\n\nPre-solve and post-solve callbacks will not be called, but the separate callback will be called.","summary":"<p>Mark a collision pair to be ignored until the two objects separate.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L148","def":{"name":"ignore","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.arbiter_ignore(self)"}},{"id":"normal:Vect-instance-method","html_id":"normal:Vect-instance-method","name":"normal","doc":"Get the normal of the collision.","summary":"<p>Get the normal of the collision.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L203","def":{"name":"normal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.arbiter_get_normal(self)"}},{"id":"point_a(i:Int):Vect-instance-method","html_id":"point_a(i:Int):Vect-instance-method","name":"point_a","doc":"Get the position of the *i*-th contact point on the surface of the first shape.","summary":"<p>Get the position of the <em>i</em>-th contact point on the surface of the first shape.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L208","def":{"name":"point_a","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.arbiter_get_point_a(self, i)"}},{"id":"point_b(i:Int):Vect-instance-method","html_id":"point_b(i:Int):Vect-instance-method","name":"point_b","doc":"Get the position of the *i*-th contact point on the surface of the second shape.","summary":"<p>Get the position of the <em>i</em>-th contact point on the surface of the second shape.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L212","def":{"name":"point_b","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.arbiter_get_point_b(self, i)"}},{"id":"removal?:Bool-instance-method","html_id":"removal?:Bool-instance-method","name":"removal?","doc":"Returns true during a `separate()` callback if the callback was\ninvoked due to an object removal.","summary":"<p>Returns true during a <code>separate()</code> callback if the callback was invoked due to an object removal.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L193","def":{"name":"removal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.arbiter_is_removal(self)"}},{"id":"restitution:Float64-instance-method","html_id":"restitution:Float64-instance-method","name":"restitution","doc":"The restitution (elasticity) that will be applied to the pair of colliding objects.\n\nSetting the value in a `pre_solve()` callback will override the value\ncalculated by the space. The default calculation multiplies the\nelasticity of the two shapes together.","summary":"<p>The restitution (elasticity) that will be applied to the pair of colliding objects.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L95","def":{"name":"restitution","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.arbiter_get_restitution(self)"}},{"id":"restitution=(restitution:Number)-instance-method","html_id":"restitution=(restitution:Number)-instance-method","name":"restitution=","doc":null,"summary":null,"abstract":false,"args":[{"name":"restitution","doc":null,"default_value":"","external_name":"restitution","restriction":"Number"}],"args_string":"(restitution : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L98","def":{"name":"restitution=","args":[{"name":"restitution","doc":null,"default_value":"","external_name":"restitution","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_set_restitution(self, restitution)"}},{"id":"shapes:::Tuple(Shape,Shape)-instance-method","html_id":"shapes:::Tuple(Shape,Shape)-instance-method","name":"shapes","doc":"Return the colliding shapes involved for this arbiter.\n\nThe order of their `collision_type` values will match\nthe order set when the collision handler was registered.","summary":"<p>Return the colliding shapes involved for this arbiter.</p>","abstract":false,"args":[],"args_string":" : ::Tuple(Shape, Shape)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L156","def":{"name":"shapes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Shape, Shape)","visibility":"Public","body":"LibCP.arbiter_get_shapes(self, out a, out b)\n{Shape[a], Shape[b]}\n"}},{"id":"surface_velocity:Vect-instance-method","html_id":"surface_velocity:Vect-instance-method","name":"surface_velocity","doc":"The relative surface velocity of the two shapes in contact.\n\nSetting the value in a `pre_solve()` callback will override the value\ncalculated by the space. the default calculation subtracts the\nsurface velocity of the second shape from the first and then projects\nthat onto the tangent of the collision. This is so that only\nfriction is affected by default calculation. Using a custom\ncalculation, you can make something that responds like a pinball\nbumper, or where the surface velocity is dependent on the location\nof the contact point.","summary":"<p>The relative surface velocity of the two shapes in contact.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L124","def":{"name":"surface_velocity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.arbiter_get_surface_velocity(self)"}},{"id":"surface_velocity=(vr:Vect)-instance-method","html_id":"surface_velocity=(vr:Vect)-instance-method","name":"surface_velocity=","doc":null,"summary":null,"abstract":false,"args":[{"name":"vr","doc":null,"default_value":"","external_name":"vr","restriction":"Vect"}],"args_string":"(vr : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L127","def":{"name":"surface_velocity=","args":[{"name":"vr","doc":null,"default_value":"","external_name":"vr","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.arbiter_set_surface_velocity(self, vr)"}},{"id":"total_impulse:Vect-instance-method","html_id":"total_impulse:Vect-instance-method","name":"total_impulse","doc":"Calculate the total impulse including the friction that was applied by this arbiter.\n\nThis function should only be called from a post-solve, post-step or `each_arbiter` callback.","summary":"<p>Calculate the total impulse including the friction that was applied by this arbiter.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L134","def":{"name":"total_impulse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.arbiter_total_impulse(self)"}},{"id":"total_ke:Float64-instance-method","html_id":"total_ke:Float64-instance-method","name":"total_ke","doc":"Calculate the amount of energy lost in a collision including static, but not dynamic friction.\n\nThis function should only be called from a post-solve, post-step or `each_arbiter` callback.","summary":"<p>Calculate the amount of energy lost in a collision including static, but not dynamic friction.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L141","def":{"name":"total_ke","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.arbiter_total_ke(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/BB","path":"CP/BB.html","kind":"struct","full_name":"CP::BB","name":"BB","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/vector.cr","line_number":360,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Chipmunk's axis-aligned 2D bounding box type. (left, bottom, right, top)","summary":"<p>Chipmunk's axis-aligned 2D bounding box type.</p>","class_methods":[],"constructors":[{"id":"new(left:Number=0,bottom:Number=0,right:Number=0,top:Number=0)-class-method","html_id":"new(left:Number=0,bottom:Number=0,right:Number=0,top:Number=0)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"left","doc":null,"default_value":"0","external_name":"left","restriction":"Number"},{"name":"bottom","doc":null,"default_value":"0","external_name":"bottom","restriction":"Number"},{"name":"right","doc":null,"default_value":"0","external_name":"right","restriction":"Number"},{"name":"top","doc":null,"default_value":"0","external_name":"top","restriction":"Number"}],"args_string":"(left : Number = <span class=\"n\">0</span>, bottom : Number = <span class=\"n\">0</span>, right : Number = <span class=\"n\">0</span>, top : Number = <span class=\"n\">0</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L363","def":{"name":"new","args":[{"name":"left","doc":null,"default_value":"0","external_name":"left","restriction":"Number"},{"name":"bottom","doc":null,"default_value":"0","external_name":"bottom","restriction":"Number"},{"name":"right","doc":null,"default_value":"0","external_name":"right","restriction":"Number"},{"name":"top","doc":null,"default_value":"0","external_name":"top","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(left, bottom, right, top)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new_for_circle(p:Vect,r:Number):self-class-method","html_id":"new_for_circle(p:Vect,r:Number):self-class-method","name":"new_for_circle","doc":"Constructs a `BB` fitting a circle with the position *p* and radius *r*.","summary":"<p>Constructs a <code><a href=\"../CP/BB.html\">BB</a></code> fitting a circle with the position <em>p</em> and radius <em>r</em>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Vect"},{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"Number"}],"args_string":"(p : Vect, r : Number) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L376","def":{"name":"new_for_circle","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Vect"},{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"BB.new_for_extents(p, r, r)"}},{"id":"new_for_extents(c:Vect,hw:Number,hh:Number):self-class-method","html_id":"new_for_extents(c:Vect,hw:Number,hh:Number):self-class-method","name":"new_for_extents","doc":"Constructs a `BB` centered on a point with the given extents (half sizes).","summary":"<p>Constructs a <code><a href=\"../CP/BB.html\">BB</a></code> centered on a point with the given extents (half sizes).</p>","abstract":false,"args":[{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vect"},{"name":"hw","doc":null,"default_value":"","external_name":"hw","restriction":"Number"},{"name":"hh","doc":null,"default_value":"","external_name":"hh","restriction":"Number"}],"args_string":"(c : Vect, hw : Number, hh : Number) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L371","def":{"name":"new_for_extents","args":[{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vect"},{"name":"hw","doc":null,"default_value":"","external_name":"hw","restriction":"Number"},{"name":"hh","doc":null,"default_value":"","external_name":"hh","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"BB.new(c.x - hw, c.y - hh, c.x + hw, c.y + hh)"}}],"instance_methods":[{"id":"area:Float64-instance-method","html_id":"area:Float64-instance-method","name":"area","doc":"Returns the area of the bounding box.","summary":"<p>Returns the area of the bounding box.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L411","def":{"name":"area","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(@right - @left) * (@top - @bottom)"}},{"id":"bottom:Float64-instance-method","html_id":"bottom:Float64-instance-method","name":"bottom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L361","def":{"name":"bottom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@bottom"}},{"id":"bottom=(bottom:Float64)-instance-method","html_id":"bottom=(bottom:Float64)-instance-method","name":"bottom=","doc":null,"summary":null,"abstract":false,"args":[{"name":"bottom","doc":null,"default_value":"","external_name":"bottom","restriction":"Float64"}],"args_string":"(bottom : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L361","def":{"name":"bottom=","args":[{"name":"bottom","doc":null,"default_value":"","external_name":"bottom","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bottom = bottom"}},{"id":"center:Vect-instance-method","html_id":"center:Vect-instance-method","name":"center","doc":"Returns the center of a bounding box.","summary":"<p>Returns the center of a bounding box.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L406","def":{"name":"center","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.lerp(Vect.new(@left, @bottom), Vect.new(@right, @top), 0.5)"}},{"id":"clamp_vect(v:Vect):Vect-instance-method","html_id":"clamp_vect(v:Vect):Vect-instance-method","name":"clamp_vect","doc":"Clamp a vector to a bounding box","summary":"<p>Clamp a vector to a bounding box</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"args_string":"(v : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L445","def":{"name":"clamp_vect","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(v.x.clamp(@left, @right), v.y.clamp(@bottom, @top))"}},{"id":"contains?(point:Vect):Bool-instance-method","html_id":"contains?(point:Vect):Bool-instance-method","name":"contains?","doc":"Returns true if this `BB` contains the *point*.","summary":"<p>Returns true if this <code><a href=\"../CP/BB.html\">BB</a></code> contains the <em>point</em>.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(point : Vect) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L391","def":{"name":"contains?","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((@left <= point.x && @right >= point.x) && @bottom <= point.y) && @top >= point.y"}},{"id":"contains?(other:BB):Bool-instance-method","html_id":"contains?(other:BB):Bool-instance-method","name":"contains?","doc":"Returns true if the *other* `BB` lies completely within this one.","summary":"<p>Returns true if the <em>other</em> <code><a href=\"../CP/BB.html\">BB</a></code> lies completely within this one.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BB"}],"args_string":"(other : BB) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L386","def":{"name":"contains?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BB"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((@left <= other.left && @right >= other.right) && @bottom <= other.bottom) && @top >= other.top"}},{"id":"expand(point:Vect):BB-instance-method","html_id":"expand(point:Vect):BB-instance-method","name":"expand","doc":"Returns the minimal bounding box that contains both this `BB` and the *point*.","summary":"<p>Returns the minimal bounding box that contains both this <code><a href=\"../CP/BB.html\">BB</a></code> and the <em>point</em>.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(point : Vect) : BB","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L401","def":{"name":"expand","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BB","visibility":"Public","body":"BB.new({@left, point.x}.min, {@bottom, point.y}.min, {@right, point.x}.max, {@top, point.y}.max)"}},{"id":"intersects?(other:BB):Bool-instance-method","html_id":"intersects?(other:BB):Bool-instance-method","name":"intersects?","doc":"Returns true if this `BB` intersects the *other*.","summary":"<p>Returns true if this <code><a href=\"../CP/BB.html\">BB</a></code> intersects the <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BB"}],"args_string":"(other : BB) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L381","def":{"name":"intersects?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BB"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((@left <= other.right && other.left <= @right) && @bottom <= other.top) && other.bottom <= @top"}},{"id":"intersects_segment?(a:Vect,b:Vect):Bool-instance-method","html_id":"intersects_segment?(a:Vect,b:Vect):Bool-instance-method","name":"intersects_segment?","doc":"Return true if the bounding box intersects the line segment with ends *a* and *b*.","summary":"<p>Return true if the bounding box intersects the line segment with ends <em>a</em> and <em>b</em>.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"}],"args_string":"(a : Vect, b : Vect) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L440","def":{"name":"intersects_segment?","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(segment_query(a, b)) != Float64::INFINITY"}},{"id":"left:Float64-instance-method","html_id":"left:Float64-instance-method","name":"left","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L361","def":{"name":"left","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@left"}},{"id":"left=(left:Float64)-instance-method","html_id":"left=(left:Float64)-instance-method","name":"left=","doc":null,"summary":null,"abstract":false,"args":[{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":"Float64"}],"args_string":"(left : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L361","def":{"name":"left=","args":[{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@left = left"}},{"id":"merge(other:BB):BB-instance-method","html_id":"merge(other:BB):BB-instance-method","name":"merge","doc":"Returns a bounding box that holds both bounding boxes.","summary":"<p>Returns a bounding box that holds both bounding boxes.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BB"}],"args_string":"(other : BB) : BB","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L396","def":{"name":"merge","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BB"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BB","visibility":"Public","body":"BB.new({@left, other.left}.min, {@bottom, other.bottom}.min, {@right, other.right}.max, {@top, other.top}.max)"}},{"id":"offset(v:Vect):BB-instance-method","html_id":"offset(v:Vect):BB-instance-method","name":"offset","doc":"Returns a bounding box offseted by *v*.","summary":"<p>Returns a bounding box offseted by <em>v</em>.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"args_string":"(v : Vect) : BB","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L461","def":{"name":"offset","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BB","visibility":"Public","body":"BB.new(@left + v.x, @bottom + v.y, @right + v.x, @top + v.y)"}},{"id":"right:Float64-instance-method","html_id":"right:Float64-instance-method","name":"right","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L361","def":{"name":"right","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@right"}},{"id":"right=(right:Float64)-instance-method","html_id":"right=(right:Float64)-instance-method","name":"right=","doc":null,"summary":null,"abstract":false,"args":[{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":"Float64"}],"args_string":"(right : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L361","def":{"name":"right=","args":[{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@right = right"}},{"id":"segment_query(a:Vect,b:Vect):Float64-instance-method","html_id":"segment_query(a:Vect,b:Vect):Float64-instance-method","name":"segment_query","doc":"Returns the fraction along the segment query the `BB` is hit.\n\nReturns INFINITY if it doesn't hit.","summary":"<p>Returns the fraction along the segment query the <code><a href=\"../CP/BB.html\">BB</a></code> is hit.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"}],"args_string":"(a : Vect, b : Vect) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L418","def":{"name":"segment_query","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"idx = 1.0 / (b.x - a.x)\ntx1 = @left == a.x ? -Float64::INFINITY : (@left - a.x) * idx\ntx2 = @right == a.x ? Float64::INFINITY : (@right - a.x) * idx\ntxmin = {tx1, tx2}.min\ntxmax = {tx1, tx2}.max\nidy = 1.0 / (b.y - a.y)\nty1 = @bottom == a.y ? -Float64::INFINITY : (@bottom - a.y) * idy\nty2 = @top == a.y ? Float64::INFINITY : (@top - a.y) * idy\ntymin = {ty1, ty2}.min\ntymax = {ty1, ty2}.max\nif tymin <= txmax && txmin <= tymax\n  min = {txmin, tymin}.max\n  max = {txmax, tymax}.min\n  if 0.0 <= max && min <= 1.0\n    return {min, 0.0}.max\n  end\nend\nFloat64::INFINITY\n"}},{"id":"top:Float64-instance-method","html_id":"top:Float64-instance-method","name":"top","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L361","def":{"name":"top","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@top"}},{"id":"top=(top:Float64)-instance-method","html_id":"top=(top:Float64)-instance-method","name":"top=","doc":null,"summary":null,"abstract":false,"args":[{"name":"top","doc":null,"default_value":"","external_name":"top","restriction":"Float64"}],"args_string":"(top : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L361","def":{"name":"top=","args":[{"name":"top","doc":null,"default_value":"","external_name":"top","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@top = top"}},{"id":"wrap_vect(v:Vect):Vect-instance-method","html_id":"wrap_vect(v:Vect):Vect-instance-method","name":"wrap_vect","doc":"Wrap a vector to a bounding box.","summary":"<p>Wrap a vector to a bounding box.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"args_string":"(v : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L450","def":{"name":"wrap_vect","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"dx = (@right - @left).abs\nmodx = (v.x - @left).fdiv(dx)\nx = modx > 0.0 ? modx : modx + dx\ndy = (@top - @bottom).abs\nmody = (v.y - @bottom).fdiv(dy)\ny = mody > 0.0 ? mody : mody + dy\nVect.new(x + @left, y + @bottom)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Body","path":"CP/Body.html","kind":"class","full_name":"CP::Body","name":"Body","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/body.cr","line_number":41,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Chipmunk's rigid body type.\n\nRigid bodies hold the physical properties of an object like its mass, and position and\nvelocity of its center of gravity. They don't have an shape on their own.\nThey are given a shape by creating collision shapes (`Shape`) that point to the body.\n\nUse forces to modify the rigid bodies if possible. This is likely to be\nthe most stable.\n\nModifying a body's velocity shouldn't necessarily be avoided, but\napplying large changes can cause strange results in the simulation.\nExperiment freely, but be warned.\n\nDon't modify a body's position every step unless you really know what\nyou are doing. Otherwise you're likely to get the position/velocity badly\nout of sync.","summary":"<p>Chipmunk's rigid body type.</p>","class_methods":[],"constructors":[{"id":"new(mass:Number=0,moment:Number=0)-class-method","html_id":"new(mass:Number=0,moment:Number=0)-class-method","name":"new","doc":"Create a new dynamic `Body`.\n\nGuessing the mass for a body is usually fine, but guessing a moment\nof inertia can lead to a very poor simulation so it's recommended to\nuse Chipmunk's moment calculations to estimate the moment for you.\n\nThere are two ways to set up a dynamic body. The easiest option is to\ncreate a body with a mass and moment of 0, and set the mass or\ndensity of each collision shape added to the body. Chipmunk will\nautomatically calculate the mass, moment of inertia, and center of\ngravity for you. This is probably preferred in most cases.\n\nThe other option is to set the mass of the body when it's created,\nand leave the mass of the shapes added to it as 0.0. This approach is\nmore flexible, but is not as easy to use. Don't set the mass of both\nthe body and the shapes. If you do so, it will recalculate and\noverwite your custom mass value when the shapes are added to the body.","summary":"<p>Create a new dynamic <code><a href=\"../CP/Body.html\">Body</a></code>.</p>","abstract":false,"args":[{"name":"mass","doc":null,"default_value":"0","external_name":"mass","restriction":"Number"},{"name":"moment","doc":null,"default_value":"0","external_name":"moment","restriction":"Number"}],"args_string":"(mass : Number = <span class=\"n\">0</span>, moment : Number = <span class=\"n\">0</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L91","def":{"name":"new","args":[{"name":"mass","doc":null,"default_value":"0","external_name":"mass","restriction":"Number"},{"name":"moment","doc":null,"default_value":"0","external_name":"moment","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(mass, moment)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new_kinematic:self-class-method","html_id":"new_kinematic:self-class-method","name":"new_kinematic","doc":"Create a `Body`, and set it as a kinematic body.","summary":"<p>Create a <code><a href=\"../CP/Body.html\">Body</a></code>, and set it as a kinematic body.</p>","abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L100","def":{"name":"new_kinematic","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"body = self.new\nbody.type = Type::KINEMATIC\nbody\n"}},{"id":"new_static:self-class-method","html_id":"new_static:self-class-method","name":"new_static","doc":"Create a `Body`, and set it as a static body.","summary":"<p>Create a <code><a href=\"../CP/Body.html\">Body</a></code>, and set it as a static body.</p>","abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L106","def":{"name":"new_static","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"body = self.new\nbody.type = Type::STATIC\nbody\n"}}],"instance_methods":[{"id":"activate-instance-method","html_id":"activate-instance-method","name":"activate","doc":"Wake up a sleeping or idle body.","summary":"<p>Wake up a sleeping or idle body.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L131","def":{"name":"activate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_activate(self)"}},{"id":"activate_static(filter:Shape?)-instance-method","html_id":"activate_static(filter:Shape?)-instance-method","name":"activate_static","doc":"Wake up any sleeping or idle bodies touching a static body.","summary":"<p>Wake up any sleeping or idle bodies touching a static body.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"Shape | ::Nil"}],"args_string":"(filter : Shape?)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L135","def":{"name":"activate_static","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"Shape | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_activate_static(self, filter)"}},{"id":"angle:Float64-instance-method","html_id":"angle:Float64-instance-method","name":"angle","doc":"Rotation of the body in radians.\n\nWhen changing the rotation you may also want to call `Space.reindex_shapes_for(body)`\nto update the collision detection information for the attached shapes if you plan to\nmake any queries against the space.\nA body rotates around its center of gravity, not its position.","summary":"<p>Rotation of the body in radians.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L245","def":{"name":"angle","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.body_get_angle(self)"}},{"id":"angle=(angle:Number)-instance-method","html_id":"angle=(angle:Number)-instance-method","name":"angle=","doc":null,"summary":null,"abstract":false,"args":[{"name":"angle","doc":null,"default_value":"","external_name":"angle","restriction":"Number"}],"args_string":"(angle : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L248","def":{"name":"angle=","args":[{"name":"angle","doc":null,"default_value":"","external_name":"angle","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_angle(self, angle)"}},{"id":"angular_velocity:Float64-instance-method","html_id":"angular_velocity:Float64-instance-method","name":"angular_velocity","doc":"The angular velocity of the body in radians per second.","summary":"<p>The angular velocity of the body in radians per second.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L253","def":{"name":"angular_velocity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.body_get_angular_velocity(self)"}},{"id":"angular_velocity=(angular_velocity:Number)-instance-method","html_id":"angular_velocity=(angular_velocity:Number)-instance-method","name":"angular_velocity=","doc":null,"summary":null,"abstract":false,"args":[{"name":"angular_velocity","doc":null,"default_value":"","external_name":"angular_velocity","restriction":"Number"}],"args_string":"(angular_velocity : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L256","def":{"name":"angular_velocity=","args":[{"name":"angular_velocity","doc":null,"default_value":"","external_name":"angular_velocity","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_angular_velocity(self, angular_velocity)"}},{"id":"apply_force_at_local_point(force:Vect,point:Vect)-instance-method","html_id":"apply_force_at_local_point(force:Vect,point:Vect)-instance-method","name":"apply_force_at_local_point","doc":"Apply a force to a body. Both the force and point are expressed in body local coordinates.","summary":"<p>Apply a force to a body.</p>","abstract":false,"args":[{"name":"force","doc":null,"default_value":"","external_name":"force","restriction":"Vect"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(force : Vect, point : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L289","def":{"name":"apply_force_at_local_point","args":[{"name":"force","doc":null,"default_value":"","external_name":"force","restriction":"Vect"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_apply_force_at_local_point(self, force, point)"}},{"id":"apply_force_at_world_point(force:Vect,point:Vect)-instance-method","html_id":"apply_force_at_world_point(force:Vect,point:Vect)-instance-method","name":"apply_force_at_world_point","doc":"Apply a force to a body. Both the force and point are expressed in world coordinates.","summary":"<p>Apply a force to a body.</p>","abstract":false,"args":[{"name":"force","doc":null,"default_value":"","external_name":"force","restriction":"Vect"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(force : Vect, point : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L285","def":{"name":"apply_force_at_world_point","args":[{"name":"force","doc":null,"default_value":"","external_name":"force","restriction":"Vect"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_apply_force_at_world_point(self, force, point)"}},{"id":"apply_impulse_at_local_point(impulse:Vect,point:Vect)-instance-method","html_id":"apply_impulse_at_local_point(impulse:Vect,point:Vect)-instance-method","name":"apply_impulse_at_local_point","doc":"Apply an impulse to a body. Both the impulse and point are expressed in body local coordinates.","summary":"<p>Apply an impulse to a body.</p>","abstract":false,"args":[{"name":"impulse","doc":null,"default_value":"","external_name":"impulse","restriction":"Vect"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(impulse : Vect, point : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L305","def":{"name":"apply_impulse_at_local_point","args":[{"name":"impulse","doc":null,"default_value":"","external_name":"impulse","restriction":"Vect"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_apply_impulse_at_local_point(self, impulse, point)"}},{"id":"apply_impulse_at_world_point(impulse:Vect,point:Vect)-instance-method","html_id":"apply_impulse_at_world_point(impulse:Vect,point:Vect)-instance-method","name":"apply_impulse_at_world_point","doc":"Apply an impulse to a body. Both the impulse and point are expressed in world coordinates.\n\nAn impulse is a very large force applied over a very\nshort period of time. Some examples are a ball hitting a wall or\ncannon firing. Chipmunk treats impulses as if they occur\ninstantaneously by adding directly to the velocity of an object.\nBoth impulses and forces are affected the mass of an object. Doubling\nthe mass of the object will halve the effect.","summary":"<p>Apply an impulse to a body.</p>","abstract":false,"args":[{"name":"impulse","doc":null,"default_value":"","external_name":"impulse","restriction":"Vect"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(impulse : Vect, point : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L301","def":{"name":"apply_impulse_at_world_point","args":[{"name":"impulse","doc":null,"default_value":"","external_name":"impulse","restriction":"Vect"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_apply_impulse_at_world_point(self, impulse, point)"}},{"id":"arbiters:Array(Arbiter)-instance-method","html_id":"arbiters:Array(Arbiter)-instance-method","name":"arbiters","doc":"Get each arbiter associated with this body.","summary":"<p>Get each arbiter associated with this body.</p>","abstract":false,"args":[],"args_string":" : Array(Arbiter)","source_link":null,"def":{"name":"arbiters","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Arbiter)","visibility":"Public","body":"result = [] of Arbiter\neach_arbiter() do |item|\n  result << item\nend\nresult\n"}},{"id":"center_of_gravity:Vect-instance-method","html_id":"center_of_gravity:Vect-instance-method","name":"center_of_gravity","doc":"The offset of the center of gravity in body local coordinates.\n\nThe default value is (0, 0), meaning the center of gravity is the\nsame as the position of the body.","summary":"<p>The offset of the center of gravity in body local coordinates.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L214","def":{"name":"center_of_gravity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_get_center_of_gravity(self)"}},{"id":"center_of_gravity=(center_of_gravity:Vect)-instance-method","html_id":"center_of_gravity=(center_of_gravity:Vect)-instance-method","name":"center_of_gravity=","doc":null,"summary":null,"abstract":false,"args":[{"name":"center_of_gravity","doc":null,"default_value":"","external_name":"center_of_gravity","restriction":"Vect"}],"args_string":"(center_of_gravity : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L217","def":{"name":"center_of_gravity=","args":[{"name":"center_of_gravity","doc":null,"default_value":"","external_name":"center_of_gravity","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_center_of_gravity(self, center_of_gravity)"}},{"id":"constraints:Array(Constraint)-instance-method","html_id":"constraints:Array(Constraint)-instance-method","name":"constraints","doc":"Get each constraint associated with this body.","summary":"<p>Get each constraint associated with this body.</p>","abstract":false,"args":[],"args_string":" : Array(Constraint)","source_link":null,"def":{"name":"constraints","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Constraint)","visibility":"Public","body":"result = [] of Constraint\neach_constraint() do |item|\n  result << item\nend\nresult\n"}},{"id":"each_arbiter(&block:Arbiter->)-instance-method","html_id":"each_arbiter(&amp;block:Arbiter-&gt;)-instance-method","name":"each_arbiter","doc":"Get each arbiter associated with this body.","summary":"<p>Get each arbiter associated with this body.</p>","abstract":false,"args":[],"args_string":"(&block : Arbiter -> )","source_link":null,"def":{"name":"each_arbiter","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Arbiter -> )"},"return_type":"","visibility":"Public","body":"LibCP.body_each_arbiter(self, ->(body, item, data) do\n  (data.as(::Pointer(typeof(block)))).value.call(Arbiter[item])\nend, pointerof(block))"}},{"id":"each_constraint(&block:Constraint->)-instance-method","html_id":"each_constraint(&amp;block:Constraint-&gt;)-instance-method","name":"each_constraint","doc":"Get each constraint associated with this body.","summary":"<p>Get each constraint associated with this body.</p>","abstract":false,"args":[],"args_string":"(&block : Constraint -> )","source_link":null,"def":{"name":"each_constraint","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Constraint -> )"},"return_type":"","visibility":"Public","body":"LibCP.body_each_constraint(self, ->(body, item, data) do\n  (data.as(::Pointer(typeof(block)))).value.call(Constraint[item])\nend, pointerof(block))"}},{"id":"each_shape(&block:Shape->)-instance-method","html_id":"each_shape(&amp;block:Shape-&gt;)-instance-method","name":"each_shape","doc":"Get each shape associated with this body.","summary":"<p>Get each shape associated with this body.</p>","abstract":false,"args":[],"args_string":"(&block : Shape -> )","source_link":null,"def":{"name":"each_shape","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Shape -> )"},"return_type":"","visibility":"Public","body":"LibCP.body_each_shape(self, ->(body, item, data) do\n  (data.as(::Pointer(typeof(block)))).value.call(Shape[item])\nend, pointerof(block))"}},{"id":"force:Vect-instance-method","html_id":"force:Vect-instance-method","name":"force","doc":"Force applied to the center of gravity of the body.\n\nThis value is reset for every time step.","summary":"<p>Force applied to the center of gravity of the body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L232","def":{"name":"force","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_get_force(self)"}},{"id":"force=(force:Vect)-instance-method","html_id":"force=(force:Vect)-instance-method","name":"force=","doc":null,"summary":null,"abstract":false,"args":[{"name":"force","doc":null,"default_value":"","external_name":"force","restriction":"Vect"}],"args_string":"(force : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L235","def":{"name":"force=","args":[{"name":"force","doc":null,"default_value":"","external_name":"force","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_force(self, force)"}},{"id":"kinetic_energy:Float64-instance-method","html_id":"kinetic_energy:Float64-instance-method","name":"kinetic_energy","doc":"Get the amount of kinetic energy contained by the body.","summary":"<p>Get the amount of kinetic energy contained by the body.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L323","def":{"name":"kinetic_energy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.body_kinetic_energy(self)"}},{"id":"local_to_world(point:Vect):Vect-instance-method","html_id":"local_to_world(point:Vect):Vect-instance-method","name":"local_to_world","doc":"Convert body relative/local coordinates to absolute/world coordinates.","summary":"<p>Convert body relative/local coordinates to absolute/world coordinates.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(point : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L276","def":{"name":"local_to_world","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_local_to_world(self, point)"}},{"id":"mass:Float64-instance-method","html_id":"mass:Float64-instance-method","name":"mass","doc":"The mass of the body.","summary":"<p>The mass of the body.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L181","def":{"name":"mass","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.body_get_mass(self)"}},{"id":"mass=(mass:Number)-instance-method","html_id":"mass=(mass:Number)-instance-method","name":"mass=","doc":null,"summary":null,"abstract":false,"args":[{"name":"mass","doc":null,"default_value":"","external_name":"mass","restriction":"Number"}],"args_string":"(mass : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L184","def":{"name":"mass=","args":[{"name":"mass","doc":null,"default_value":"","external_name":"mass","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_mass(self, mass)"}},{"id":"moment:Float64-instance-method","html_id":"moment:Float64-instance-method","name":"moment","doc":"The moment of inertia of the body.\n\nThe moment is like the rotational mass of a body.","summary":"<p>The moment of inertia of the body.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L191","def":{"name":"moment","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.body_get_moment(self)"}},{"id":"moment=(moment:Number)-instance-method","html_id":"moment=(moment:Number)-instance-method","name":"moment=","doc":null,"summary":null,"abstract":false,"args":[{"name":"moment","doc":null,"default_value":"","external_name":"moment","restriction":"Number"}],"args_string":"(moment : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L194","def":{"name":"moment=","args":[{"name":"moment","doc":null,"default_value":"","external_name":"moment","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_moment(self, moment)"}},{"id":"position:Vect-instance-method","html_id":"position:Vect-instance-method","name":"position","doc":"The position of the body.\n\nWhen changing the position you may also want to call `Space#reindex_shapes_for(body)`\nto update the collision  detection information for the attached shapes if you plan\nto make any queries against the space.","summary":"<p>The position of the body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L203","def":{"name":"position","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_get_position(self)"}},{"id":"position=(position:Vect)-instance-method","html_id":"position=(position:Vect)-instance-method","name":"position=","doc":null,"summary":null,"abstract":false,"args":[{"name":"position","doc":null,"default_value":"","external_name":"position","restriction":"Vect"}],"args_string":"(position : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L206","def":{"name":"position=","args":[{"name":"position","doc":null,"default_value":"","external_name":"position","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_position(self, position)"}},{"id":"rotation:Vect-instance-method","html_id":"rotation:Vect-instance-method","name":"rotation","doc":"Get the rotation vector of the body. (The x basis vector of its transform.)","summary":"<p>Get the rotation vector of the body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L271","def":{"name":"rotation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_get_rotation(self)"}},{"id":"shapes:Array(Shape)-instance-method","html_id":"shapes:Array(Shape)-instance-method","name":"shapes","doc":"Get each shape associated with this body.","summary":"<p>Get each shape associated with this body.</p>","abstract":false,"args":[],"args_string":" : Array(Shape)","source_link":null,"def":{"name":"shapes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Shape)","visibility":"Public","body":"result = [] of Shape\neach_shape() do |item|\n  result << item\nend\nresult\n"}},{"id":"sleep-instance-method","html_id":"sleep-instance-method","name":"sleep","doc":"Force a body to fall asleep immediately.","summary":"<p>Force a body to fall asleep immediately.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L140","def":{"name":"sleep","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if !(LibCP.body_get_space(self))\n  raise(\"Body not added to space\")\nend\nLibCP.body_sleep(self)\n"}},{"id":"sleep_with_group(group:Body)-instance-method","html_id":"sleep_with_group(group:Body)-instance-method","name":"sleep_with_group","doc":"Force a body to fall asleep immediately along with other bodies in a group.\n\nWhen objects in Chipmunk sleep, they sleep as a group of all objects\nthat are touching or jointed together. When an object is woken up,\nall of the objects in its group are woken up.\n`sleep_with_group` allows you group sleeping objects together. If you pass a\nsleeping body for group, body will be awoken when group is awoken. You can use\nthis to initialize levels and start stacks of objects in a pre-sleeping state.","summary":"<p>Force a body to fall asleep immediately along with other bodies in a group.</p>","abstract":false,"args":[{"name":"group","doc":null,"default_value":"","external_name":"group","restriction":"Body"}],"args_string":"(group : Body)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L152","def":{"name":"sleep_with_group","args":[{"name":"group","doc":null,"default_value":"","external_name":"group","restriction":"Body"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if !(LibCP.body_get_space(self))\n  raise(\"Body not added to space\")\nend\nLibCP.body_sleep_with_group(self, group)\n"}},{"id":"sleeping?:Bool-instance-method","html_id":"sleeping?:Bool-instance-method","name":"sleeping?","doc":"Returns true if the body is sleeping.","summary":"<p>Returns true if the body is sleeping.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L158","def":{"name":"sleeping?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.body_is_sleeping(self)"}},{"id":"space:Space?-instance-method","html_id":"space:Space?-instance-method","name":"space","doc":"Get the space this body is added to.","summary":"<p>Get the space this body is added to.</p>","abstract":false,"args":[],"args_string":" : Space?","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L176","def":{"name":"space","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Space | ::Nil","visibility":"Public","body":"Space[LibCP.body_get_space(self)]?"}},{"id":"torque:Float64-instance-method","html_id":"torque:Float64-instance-method","name":"torque","doc":"The torque applied to the body.\n\nThis value is reset for every time step.","summary":"<p>The torque applied to the body.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L263","def":{"name":"torque","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.body_get_torque(self)"}},{"id":"torque=(torque:Number)-instance-method","html_id":"torque=(torque:Number)-instance-method","name":"torque=","doc":null,"summary":null,"abstract":false,"args":[{"name":"torque","doc":null,"default_value":"","external_name":"torque","restriction":"Number"}],"args_string":"(torque : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L266","def":{"name":"torque=","args":[{"name":"torque","doc":null,"default_value":"","external_name":"torque","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_torque(self, torque)"}},{"id":"type:Type-instance-method","html_id":"type:Type-instance-method","name":"type","doc":"The type of the body.\n\nWhen changing a body to a dynamic body, the mass and moment of\ninertia are recalculated from the shapes added to the body. Custom\ncalculated moments of inertia are not preseved when changing types.\nThis function cannot be called directly in a collision callback.","summary":"<p>The type of the body.</p>","abstract":false,"args":[],"args_string":" : Type","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L168","def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"LibCP.body_get_type(self)"}},{"id":"type=(type:Type)-instance-method","html_id":"type=(type:Type)-instance-method","name":"type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"args_string":"(type : Type)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L171","def":{"name":"type=","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_type(self, type)"}},{"id":"update_position(dt:Number)-instance-method","html_id":"update_position(dt:Number)-instance-method","name":"update_position","doc":"Called each time step to update a body's position (can be overridden in a subclass).\n\nUpdates the position of the body using Euler integration.\n\nIt's not generally recommended to override this unless you call `super`.","summary":"<p>Called each time step to update a body's position (can be overridden in a subclass).</p>","abstract":false,"args":[{"name":"dt","doc":null,"default_value":"","external_name":"dt","restriction":"Number"}],"args_string":"(dt : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L351","def":{"name":"update_position","args":[{"name":"dt","doc":null,"default_value":"","external_name":"dt","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_update_position(self, dt)"}},{"id":"update_velocity(gravity:Vect,damping:Number,dt:Number)-instance-method","html_id":"update_velocity(gravity:Vect,damping:Number,dt:Number)-instance-method","name":"update_velocity","doc":"Called each time step to update a body's velocity (can be overridden in a subclass).\n\nUpdates the velocity of the body using Euler integration.","summary":"<p>Called each time step to update a body's velocity (can be overridden in a subclass).</p>","abstract":false,"args":[{"name":"gravity","doc":null,"default_value":"","external_name":"gravity","restriction":"Vect"},{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"},{"name":"dt","doc":null,"default_value":"","external_name":"dt","restriction":"Number"}],"args_string":"(gravity : Vect, damping : Number, dt : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L343","def":{"name":"update_velocity","args":[{"name":"gravity","doc":null,"default_value":"","external_name":"gravity","restriction":"Vect"},{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"},{"name":"dt","doc":null,"default_value":"","external_name":"dt","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_update_velocity(self, gravity, damping, dt)"}},{"id":"velocity:Vect-instance-method","html_id":"velocity:Vect-instance-method","name":"velocity","doc":"Linear velocity of the center of gravity of the body.","summary":"<p>Linear velocity of the center of gravity of the body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L222","def":{"name":"velocity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_get_velocity(self)"}},{"id":"velocity=(velocity:Vect)-instance-method","html_id":"velocity=(velocity:Vect)-instance-method","name":"velocity=","doc":null,"summary":null,"abstract":false,"args":[{"name":"velocity","doc":null,"default_value":"","external_name":"velocity","restriction":"Vect"}],"args_string":"(velocity : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L225","def":{"name":"velocity=","args":[{"name":"velocity","doc":null,"default_value":"","external_name":"velocity","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.body_set_velocity(self, velocity)"}},{"id":"velocity_at_local_point(point:Vect):Vect-instance-method","html_id":"velocity_at_local_point(point:Vect):Vect-instance-method","name":"velocity_at_local_point","doc":"Get the velocity on a body (in world units) at a point on the body in local coordinates.","summary":"<p>Get the velocity on a body (in world units) at a point on the body in local coordinates.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(point : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L318","def":{"name":"velocity_at_local_point","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_get_velocity_at_local_point(self, point)"}},{"id":"velocity_at_world_point(point:Vect):Vect-instance-method","html_id":"velocity_at_world_point(point:Vect):Vect-instance-method","name":"velocity_at_world_point","doc":"Get the velocity on a body (in world units) at a point on the body in world coordinates.\n\nIt's often useful to know the absolute velocity of a point on the\nsurface of a body since the angular velocity affects everything\nexcept the center of gravity.","summary":"<p>Get the velocity on a body (in world units) at a point on the body in world coordinates.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(point : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L314","def":{"name":"velocity_at_world_point","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_get_velocity_at_world_point(self, point)"}},{"id":"world_to_local(point:Vect):Vect-instance-method","html_id":"world_to_local(point:Vect):Vect-instance-method","name":"world_to_local","doc":"Convert body absolute/world coordinates to  relative/local coordinates.","summary":"<p>Convert body absolute/world coordinates to  relative/local coordinates.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(point : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L280","def":{"name":"world_to_local","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.body_world_to_local(self, point)"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Body/Type","path":"CP/Body/Type.html","kind":"enum","full_name":"CP::Body::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/oprypin/crystal-chipmunk/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/body.cr","line_number":42,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"DYNAMIC","name":"DYNAMIC","value":"0","doc":"A dynamic body is one that is affected by gravity, forces, and collisions.\nThis is the default body type.","summary":"<p>A dynamic body is one that is affected by gravity, forces, and collisions.</p>"},{"id":"KINEMATIC","name":"KINEMATIC","value":"1","doc":"A kinematic body is an infinite mass, user controlled body that is not affected\nby gravity, forces or collisions. Instead the body only moves based on its velocity.\nDynamic bodies collide normally with kinematic bodies, though the kinematic body\nwill be unaffected. Collisions between two kinematic bodies, or a kinematic body\nand a static body produce collision callbacks, but no collision response.","summary":"<p>A kinematic body is an infinite mass, user controlled body that is not affected by gravity, forces or collisions.</p>"},{"id":"STATIC","name":"STATIC","value":"2","doc":"A static body is a body that never (or rarely) moves. If you move a static body,\nyou must call one of the `Space` reindex functions.\nChipmunk uses this information to optimize the collision detection.\nStatic bodies do not produce collision callbacks when colliding with other static bodies.","summary":"<p>A static body is a body that never (or rarely) moves.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Body","kind":"class","full_name":"CP::Body","name":"Body"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"dynamic?-instance-method","html_id":"dynamic?-instance-method","name":"dynamic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L45","def":{"name":"dynamic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == DYNAMIC"}},{"id":"kinematic?-instance-method","html_id":"kinematic?-instance-method","name":"kinematic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L51","def":{"name":"kinematic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == KINEMATIC"}},{"id":"static?-instance-method","html_id":"static?-instance-method","name":"static?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/body.cr#L56","def":{"name":"static?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == STATIC"}}],"macros":[],"types":[]}]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/CollisionHandler","path":"CP/CollisionHandler.html","kind":"class","full_name":"CP::CollisionHandler","name":"CollisionHandler","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/collision.cr","line_number":287,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Defines callbacks to configure custom collision handling.\n\nCollision handlers have a pair of types; when a collision occurs between two shapes that have these types, the collision handler functions are triggered.\n\nShapes tagged as sensors (`Shape#sensor? == true`) never generate\ncollisions that get processed, so collisions between sensors shapes and\nother shapes will never call the `post_solve` callback. They still\ngenerate `begin`, and `separate` callbacks, and the `pre_solve` callback\nis also called every frame even though there is no collision response.\n\n`pre_solve` callbacks are called before the sleeping algorithm\nruns. If an object falls asleep, its `post_solve` callback won't be\ncalled until it's reawoken.","summary":"<p>Defines callbacks to configure custom collision handling.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"begin(arbiter:Arbiter,space:Space):Bool-instance-method","html_id":"begin(arbiter:Arbiter,space:Space):Bool-instance-method","name":"begin","doc":"This function is called when two shapes with types that match this collision handler begin colliding.\n\nReturning false from a begin callback causes the collision to be ignored until\nthe the separate callback is called when the objects stop colliding.","summary":"<p>This function is called when two shapes with types that match this collision handler begin colliding.</p>","abstract":false,"args":[{"name":"arbiter","doc":null,"default_value":"","external_name":"arbiter","restriction":"Arbiter"},{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(arbiter : Arbiter, space : Space) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L334","def":{"name":"begin","args":[{"name":"arbiter","doc":null,"default_value":"","external_name":"arbiter","restriction":"Arbiter"},{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"true"}},{"id":"post_solve(arbiter:Arbiter,space:Space)-instance-method","html_id":"post_solve(arbiter:Arbiter,space:Space)-instance-method","name":"post_solve","doc":"This function is called each step when two shapes with types that match this collision handler are colliding.\n\nIt's called after the collision solver runs, so you can retrieve the collision impulse\nor kinetic energy if you want to use it to calculate sound volumes or damage amounts.","summary":"<p>This function is called each step when two shapes with types that match this collision handler are colliding.</p>","abstract":false,"args":[{"name":"arbiter","doc":null,"default_value":"","external_name":"arbiter","restriction":"Arbiter"},{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(arbiter : Arbiter, space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L350","def":{"name":"post_solve","args":[{"name":"arbiter","doc":null,"default_value":"","external_name":"arbiter","restriction":"Arbiter"},{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"pre_solve(arbiter:Arbiter,space:Space):Bool-instance-method","html_id":"pre_solve(arbiter:Arbiter,space:Space):Bool-instance-method","name":"pre_solve","doc":"This function is called each step when two shapes with types that match this collision handler are colliding.\n\nIt's called before the collision solver runs so that you can affect a collision's outcome\n(by editing `Arbiter#friction`, `Arbiter#restitution`, `Arbiter#surface_velocity`).\n\nReturning false from a pre-step callback causes the collision to be ignored until the next step.","summary":"<p>This function is called each step when two shapes with types that match this collision handler are colliding.</p>","abstract":false,"args":[{"name":"arbiter","doc":null,"default_value":"","external_name":"arbiter","restriction":"Arbiter"},{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(arbiter : Arbiter, space : Space) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L343","def":{"name":"pre_solve","args":[{"name":"arbiter","doc":null,"default_value":"","external_name":"arbiter","restriction":"Arbiter"},{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"true"}},{"id":"separate(arbiter:Arbiter,space:Space)-instance-method","html_id":"separate(arbiter:Arbiter,space:Space)-instance-method","name":"separate","doc":"This function is called when two shapes with types that match this collision handler stop colliding.\n\nTo ensure that `begin`/`separate` are always called in balanced\npairs, it will also be called when removing a shape while it's in\ncontact with something or when deallocating the space.","summary":"<p>This function is called when two shapes with types that match this collision handler stop colliding.</p>","abstract":false,"args":[{"name":"arbiter","doc":null,"default_value":"","external_name":"arbiter","restriction":"Arbiter"},{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(arbiter : Arbiter, space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L357","def":{"name":"separate","args":[{"name":"arbiter","doc":null,"default_value":"","external_name":"arbiter","restriction":"Arbiter"},{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"type_a:UInt64-instance-method","html_id":"type_a:UInt64-instance-method","name":"type_a","doc":"Collision type identifier of the first shape that this handler recognizes.\n\nIn the collision handler callback, the shape with this type will be the first argument.","summary":"<p>Collision type identifier of the first shape that this handler recognizes.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L293","def":{"name":"type_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type_a"}},{"id":"type_b:UInt64-instance-method","html_id":"type_b:UInt64-instance-method","name":"type_b","doc":"Collision type identifier of the second shape that this handler recognizes.\n\nIn the collision handler callback, the shape with this type will be the second argument.","summary":"<p>Collision type identifier of the second shape that this handler recognizes.</p>","abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L297","def":{"name":"type_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type_b"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/CollisionHandler/CollisionType","path":"CP/CollisionHandler/CollisionType.html","kind":"alias","full_name":"CP::CollisionHandler::CollisionType","name":"CollisionType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"chipmunk/collision.cr","line_number":288,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":true,"aliased":"UInt64","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/CollisionHandler","kind":"class","full_name":"CP::CollisionHandler","name":"CollisionHandler"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","path":"CP/Constraint.html","kind":"class","full_name":"CP::Constraint","name":"Constraint","abstract":true,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":29,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/DampedRotarySpring","kind":"class","full_name":"CP::Constraint::DampedRotarySpring","name":"DampedRotarySpring"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/DampedSpring","kind":"class","full_name":"CP::Constraint::DampedSpring","name":"DampedSpring"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/GearJoint","kind":"class","full_name":"CP::Constraint::GearJoint","name":"GearJoint"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/GrooveJoint","kind":"class","full_name":"CP::Constraint::GrooveJoint","name":"GrooveJoint"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/PinJoint","kind":"class","full_name":"CP::Constraint::PinJoint","name":"PinJoint"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/PivotJoint","kind":"class","full_name":"CP::Constraint::PivotJoint","name":"PivotJoint"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/RatchetJoint","kind":"class","full_name":"CP::Constraint::RatchetJoint","name":"RatchetJoint"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/RotaryLimitJoint","kind":"class","full_name":"CP::Constraint::RotaryLimitJoint","name":"RotaryLimitJoint"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/SimpleMotor","kind":"class","full_name":"CP::Constraint::SimpleMotor","name":"SimpleMotor"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/SlideJoint","kind":"class","full_name":"CP::Constraint::SlideJoint","name":"SlideJoint"}],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"A constraint is something that describes how two bodies interact with\neach other (how they constrain each other). Constraints can be simple\njoints that allow bodies to pivot around each other like the bones in your\nbody, or they can be more abstract like the gear joint or motors.","summary":"<p>A constraint is something that describes how two bodies interact with each other (how they constrain each other).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"bodies:::Tuple(Body,Body)-instance-method","html_id":"bodies:::Tuple(Body,Body)-instance-method","name":"bodies","doc":"Get the bodies the constraint is attached to.","summary":"<p>Get the bodies the constraint is attached to.</p>","abstract":false,"args":[],"args_string":" : ::Tuple(Body, Body)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L73","def":{"name":"bodies","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Body, Body)","visibility":"Public","body":"{body_a, body_b}"}},{"id":"body_a:Body-instance-method","html_id":"body_a:Body-instance-method","name":"body_a","doc":"Get the first body the constraint is attached to.","summary":"<p>Get the first body the constraint is attached to.</p>","abstract":false,"args":[],"args_string":" : Body","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L64","def":{"name":"body_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Body","visibility":"Public","body":"Body[LibCP.constraint_get_body_a(self)]"}},{"id":"body_b:Body-instance-method","html_id":"body_b:Body-instance-method","name":"body_b","doc":"Get the second body the constraint is attached to.","summary":"<p>Get the second body the constraint is attached to.</p>","abstract":false,"args":[],"args_string":" : Body","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L68","def":{"name":"body_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Body","visibility":"Public","body":"Body[LibCP.constraint_get_body_b(self)]"}},{"id":"collide_bodies=(collide_bodies:Bool)-instance-method","html_id":"collide_bodies=(collide_bodies:Bool)-instance-method","name":"collide_bodies=","doc":null,"summary":null,"abstract":false,"args":[{"name":"collide_bodies","doc":null,"default_value":"","external_name":"collide_bodies","restriction":"Bool"}],"args_string":"(collide_bodies : Bool)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L114","def":{"name":"collide_bodies=","args":[{"name":"collide_bodies","doc":null,"default_value":"","external_name":"collide_bodies","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.constraint_set_collide_bodies(self, collide_bodies)"}},{"id":"collide_bodies?:Bool-instance-method","html_id":"collide_bodies?:Bool-instance-method","name":"collide_bodies?","doc":"Are the two bodies connected by the constraint allowed to collide or not?\n\n(defaults to false)","summary":"<p>Are the two bodies connected by the constraint allowed to collide or not?</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L111","def":{"name":"collide_bodies?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.constraint_get_collide_bodies(self)"}},{"id":"error_bias:Float64-instance-method","html_id":"error_bias:Float64-instance-method","name":"error_bias","doc":"Rate at which joint error is corrected.\n\nDefaults to (1.0 - 0.1) ** 60.0 meaning that it will\ncorrect 10% of the error every 1/60th of a second.","summary":"<p>Rate at which joint error is corrected.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L91","def":{"name":"error_bias","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.constraint_get_error_bias(self)"}},{"id":"error_bias=(error_bias:Number)-instance-method","html_id":"error_bias=(error_bias:Number)-instance-method","name":"error_bias=","doc":null,"summary":null,"abstract":false,"args":[{"name":"error_bias","doc":null,"default_value":"","external_name":"error_bias","restriction":"Number"}],"args_string":"(error_bias : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L94","def":{"name":"error_bias=","args":[{"name":"error_bias","doc":null,"default_value":"","external_name":"error_bias","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.constraint_set_error_bias(self, error_bias)"}},{"id":"impulse:Float64-instance-method","html_id":"impulse:Float64-instance-method","name":"impulse","doc":"Get the most recent impulse applied by this constraint.\n\nTo convert this to a force, divide by the timestep passed to\n`Space#step`. You can use this to implement breakable joints to check\nif the force they attempted to apply exceeded a certain threshold.","summary":"<p>Get the most recent impulse applied by this constraint.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L123","def":{"name":"impulse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.constraint_get_impulse(self)"}},{"id":"max_bias:Float64-instance-method","html_id":"max_bias:Float64-instance-method","name":"max_bias","doc":"The maximum rate at which joint error is corrected.\n\n(defaults to INFINITY)","summary":"<p>The maximum rate at which joint error is corrected.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L101","def":{"name":"max_bias","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.constraint_get_max_bias(self)"}},{"id":"max_bias=(max_bias:Number)-instance-method","html_id":"max_bias=(max_bias:Number)-instance-method","name":"max_bias=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"Number"}],"args_string":"(max_bias : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L104","def":{"name":"max_bias=","args":[{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.constraint_set_max_bias(self, max_bias)"}},{"id":"max_force:Float64-instance-method","html_id":"max_force:Float64-instance-method","name":"max_force","doc":"The maximum force that this constraint is allowed to use.\n\n(defaults to INFINITY)","summary":"<p>The maximum force that this constraint is allowed to use.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L80","def":{"name":"max_force","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.constraint_get_max_force(self)"}},{"id":"max_force=(max_force:Number)-instance-method","html_id":"max_force=(max_force:Number)-instance-method","name":"max_force=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max_force","doc":null,"default_value":"","external_name":"max_force","restriction":"Number"}],"args_string":"(max_force : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L83","def":{"name":"max_force=","args":[{"name":"max_force","doc":null,"default_value":"","external_name":"max_force","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.constraint_set_max_force(self, max_force)"}},{"id":"post_solve(space:Space)-instance-method","html_id":"post_solve(space:Space)-instance-method","name":"post_solve","doc":"The post-solve method that is called before the solver runs\n(can be overridden in a subclass).","summary":"<p>The post-solve method that is called before the solver runs (can be overridden in a subclass).</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L133","def":{"name":"post_solve","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"pre_solve(space:Space)-instance-method","html_id":"pre_solve(space:Space)-instance-method","name":"pre_solve","doc":"The pre-solve method that is called before the solver runs\n(can be overridden in a subclass).","summary":"<p>The pre-solve method that is called before the solver runs (can be overridden in a subclass).</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L129","def":{"name":"pre_solve","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"space:Space?-instance-method","html_id":"space:Space?-instance-method","name":"space","doc":"Get the `Space` this constraint is added to.","summary":"<p>Get the <code><a href=\"../CP/Space.html\">Space</a></code> this constraint is added to.</p>","abstract":false,"args":[],"args_string":" : Space?","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L59","def":{"name":"space","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Space | ::Nil","visibility":"Public","body":"Space[LibCP.constraint_get_space(self)]?"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/DampedRotarySpring","path":"CP/Constraint/DampedRotarySpring.html","kind":"class","full_name":"CP::Constraint::DampedRotarySpring","name":"DampedRotarySpring","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":503,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Like a damped spring, but works in an angular fashion","summary":"<p>Like a damped spring, but works in an angular fashion</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,rest_angle:Number,stiffness:Number,damping:Number)-class-method","html_id":"new(a:Body,b:Body,rest_angle:Number,stiffness:Number,damping:Number)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"rest_angle","doc":null,"default_value":"","external_name":"rest_angle","restriction":"Number"},{"name":"stiffness","doc":null,"default_value":"","external_name":"stiffness","restriction":"Number"},{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"args_string":"(a : Body, b : Body, rest_angle : Number, stiffness : Number, damping : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L509","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"rest_angle","doc":null,"default_value":"","external_name":"rest_angle","restriction":"Number"},{"name":"stiffness","doc":null,"default_value":"","external_name":"stiffness","restriction":"Number"},{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, rest_angle, stiffness, damping)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"damping:Float64-instance-method","html_id":"damping:Float64-instance-method","name":"damping","doc":"How soft to make the damping of the spring.","summary":"<p>How soft to make the damping of the spring.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L540","def":{"name":"damping","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.damped_rotary_spring_get_damping(self)"}},{"id":"damping=(damping:Number)-instance-method","html_id":"damping=(damping:Number)-instance-method","name":"damping=","doc":null,"summary":null,"abstract":false,"args":[{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"args_string":"(damping : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L543","def":{"name":"damping=","args":[{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.damped_rotary_spring_set_damping(self, damping)"}},{"id":"rest_angle:Float64-instance-method","html_id":"rest_angle:Float64-instance-method","name":"rest_angle","doc":"The relative angle in radians that the bodies want to have","summary":"<p>The relative angle in radians that the bodies want to have</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L524","def":{"name":"rest_angle","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.damped_rotary_spring_get_rest_angle(self)"}},{"id":"rest_angle=(rest_angle:Number)-instance-method","html_id":"rest_angle=(rest_angle:Number)-instance-method","name":"rest_angle=","doc":null,"summary":null,"abstract":false,"args":[{"name":"rest_angle","doc":null,"default_value":"","external_name":"rest_angle","restriction":"Number"}],"args_string":"(rest_angle : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L527","def":{"name":"rest_angle=","args":[{"name":"rest_angle","doc":null,"default_value":"","external_name":"rest_angle","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.damped_rotary_spring_set_rest_angle(self, rest_angle)"}},{"id":"spring_torque(relative_angle:Float64):Number-instance-method","html_id":"spring_torque(relative_angle:Float64):Number-instance-method","name":"spring_torque","doc":"(can be overridden in a subclass)","summary":"<p>(can be overridden in a subclass)</p>","abstract":false,"args":[{"name":"relative_angle","doc":null,"default_value":"","external_name":"relative_angle","restriction":"Float64"}],"args_string":"(relative_angle : Float64) : Number","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L548","def":{"name":"spring_torque","args":[{"name":"relative_angle","doc":null,"default_value":"","external_name":"relative_angle","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Number","visibility":"Public","body":"0"}},{"id":"stiffness:Float64-instance-method","html_id":"stiffness:Float64-instance-method","name":"stiffness","doc":"The stiffness of the spring in force/distance.","summary":"<p>The stiffness of the spring in force/distance.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L532","def":{"name":"stiffness","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.damped_rotary_spring_get_stiffness(self)"}},{"id":"stiffness=(stiffness:Number)-instance-method","html_id":"stiffness=(stiffness:Number)-instance-method","name":"stiffness=","doc":null,"summary":null,"abstract":false,"args":[{"name":"stiffness","doc":null,"default_value":"","external_name":"stiffness","restriction":"Number"}],"args_string":"(stiffness : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L535","def":{"name":"stiffness=","args":[{"name":"stiffness","doc":null,"default_value":"","external_name":"stiffness","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.damped_rotary_spring_set_stiffness(self, stiffness)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/DampedSpring","path":"CP/Constraint/DampedSpring.html","kind":"class","full_name":"CP::Constraint::DampedSpring","name":"DampedSpring","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":429,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,anchor_a:Vect,anchor_b:Vect,rest_length:Number,stiffness:Number,damping:Number)-class-method","html_id":"new(a:Body,b:Body,anchor_a:Vect,anchor_b:Vect,rest_length:Number,stiffness:Number,damping:Number)-class-method","name":"new","doc":"Defined much like a slide joint.\n\n* *anchor_a*: Anchor point a, relative to body a\n* *anchor_b*: Anchor point b, relative to body b\n* *rest_length*: The distance the spring wants to be at\n* *stiffness*: The spring constant (Young's modulus)\n* *damping*: How soft to make the damping of the spring","summary":"<p>Defined much like a slide joint.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"},{"name":"rest_length","doc":null,"default_value":"","external_name":"rest_length","restriction":"Number"},{"name":"stiffness","doc":null,"default_value":"","external_name":"stiffness","restriction":"Number"},{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"args_string":"(a : Body, b : Body, anchor_a : Vect, anchor_b : Vect, rest_length : Number, stiffness : Number, damping : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L442","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"},{"name":"rest_length","doc":null,"default_value":"","external_name":"rest_length","restriction":"Number"},{"name":"stiffness","doc":null,"default_value":"","external_name":"stiffness","restriction":"Number"},{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, anchor_a, anchor_b, rest_length, stiffness, damping)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"anchor_a:Vect-instance-method","html_id":"anchor_a:Vect-instance-method","name":"anchor_a","doc":"The location of the first anchor relative to the first body.","summary":"<p>The location of the first anchor relative to the first body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L457","def":{"name":"anchor_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.damped_spring_get_anchor_a(self)"}},{"id":"anchor_a=(anchor_a:Vect)-instance-method","html_id":"anchor_a=(anchor_a:Vect)-instance-method","name":"anchor_a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"}],"args_string":"(anchor_a : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L460","def":{"name":"anchor_a=","args":[{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.damped_spring_set_anchor_a(self, anchor_a)"}},{"id":"anchor_b:Vect-instance-method","html_id":"anchor_b:Vect-instance-method","name":"anchor_b","doc":"The location of the second anchor relative to the second body.","summary":"<p>The location of the second anchor relative to the second body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L465","def":{"name":"anchor_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.damped_spring_get_anchor_b(self)"}},{"id":"anchor_b=(anchor_b:Vect)-instance-method","html_id":"anchor_b=(anchor_b:Vect)-instance-method","name":"anchor_b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"args_string":"(anchor_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L468","def":{"name":"anchor_b=","args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.damped_spring_set_anchor_b(self, anchor_b)"}},{"id":"damping:Float64-instance-method","html_id":"damping:Float64-instance-method","name":"damping","doc":"How soft to make the damping of the spring.","summary":"<p>How soft to make the damping of the spring.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L489","def":{"name":"damping","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.damped_spring_get_damping(self)"}},{"id":"damping=(damping:Number)-instance-method","html_id":"damping=(damping:Number)-instance-method","name":"damping=","doc":null,"summary":null,"abstract":false,"args":[{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"args_string":"(damping : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L492","def":{"name":"damping=","args":[{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.damped_spring_set_damping(self, damping)"}},{"id":"rest_length:Float64-instance-method","html_id":"rest_length:Float64-instance-method","name":"rest_length","doc":"The distance the spring wants to be at.","summary":"<p>The distance the spring wants to be at.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L473","def":{"name":"rest_length","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.damped_spring_get_rest_length(self)"}},{"id":"rest_length=(rest_length:Number)-instance-method","html_id":"rest_length=(rest_length:Number)-instance-method","name":"rest_length=","doc":null,"summary":null,"abstract":false,"args":[{"name":"rest_length","doc":null,"default_value":"","external_name":"rest_length","restriction":"Number"}],"args_string":"(rest_length : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L476","def":{"name":"rest_length=","args":[{"name":"rest_length","doc":null,"default_value":"","external_name":"rest_length","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.damped_spring_set_rest_length(self, rest_length)"}},{"id":"spring_force(dist:Float64):Number-instance-method","html_id":"spring_force(dist:Float64):Number-instance-method","name":"spring_force","doc":"(can be overridden in a subclass)","summary":"<p>(can be overridden in a subclass)</p>","abstract":false,"args":[{"name":"dist","doc":null,"default_value":"","external_name":"dist","restriction":"Float64"}],"args_string":"(dist : Float64) : Number","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L497","def":{"name":"spring_force","args":[{"name":"dist","doc":null,"default_value":"","external_name":"dist","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Number","visibility":"Public","body":"0"}},{"id":"stiffness:Float64-instance-method","html_id":"stiffness:Float64-instance-method","name":"stiffness","doc":"The stiffness of the spring in force/distance.","summary":"<p>The stiffness of the spring in force/distance.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L481","def":{"name":"stiffness","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.damped_spring_get_stiffness(self)"}},{"id":"stiffness=(stiffness:Number)-instance-method","html_id":"stiffness=(stiffness:Number)-instance-method","name":"stiffness=","doc":null,"summary":null,"abstract":false,"args":[{"name":"stiffness","doc":null,"default_value":"","external_name":"stiffness","restriction":"Number"}],"args_string":"(stiffness : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L484","def":{"name":"stiffness=","args":[{"name":"stiffness","doc":null,"default_value":"","external_name":"stiffness","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.damped_spring_set_stiffness(self, stiffness)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/GearJoint","path":"CP/Constraint/GearJoint.html","kind":"class","full_name":"CP::Constraint::GearJoint","name":"GearJoint","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":137,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Keeps the angular velocity ratio of a pair of bodies constant.","summary":"<p>Keeps the angular velocity ratio of a pair of bodies constant.</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,phase:Number,ratio:Number)-class-method","html_id":"new(a:Body,b:Body,phase:Number,ratio:Number)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Number"},{"name":"ratio","doc":null,"default_value":"","external_name":"ratio","restriction":"Number"}],"args_string":"(a : Body, b : Body, phase : Number, ratio : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L138","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Number"},{"name":"ratio","doc":null,"default_value":"","external_name":"ratio","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, phase, ratio)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"phase:Float64-instance-method","html_id":"phase:Float64-instance-method","name":"phase","doc":"The phase offset of the gears.","summary":"<p>The phase offset of the gears.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L152","def":{"name":"phase","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.gear_joint_get_phase(self)"}},{"id":"phase=(phase:Number)-instance-method","html_id":"phase=(phase:Number)-instance-method","name":"phase=","doc":null,"summary":null,"abstract":false,"args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Number"}],"args_string":"(phase : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L155","def":{"name":"phase=","args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.gear_joint_set_phase(self, phase)"}},{"id":"ratio:Float64-instance-method","html_id":"ratio:Float64-instance-method","name":"ratio","doc":"The angular distance of each ratchet.","summary":"<p>The angular distance of each ratchet.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L160","def":{"name":"ratio","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.gear_joint_get_ratio(self)"}},{"id":"ratio=(ratio:Number)-instance-method","html_id":"ratio=(ratio:Number)-instance-method","name":"ratio=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ratio","doc":null,"default_value":"","external_name":"ratio","restriction":"Number"}],"args_string":"(ratio : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L163","def":{"name":"ratio=","args":[{"name":"ratio","doc":null,"default_value":"","external_name":"ratio","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.gear_joint_set_ratio(self, ratio)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/GrooveJoint","path":"CP/Constraint/GrooveJoint.html","kind":"class","full_name":"CP::Constraint::GrooveJoint","name":"GrooveJoint","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":170,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Similar to a pivot joint, but one of the anchors is\non a linear slide instead of being fixed.","summary":"<p>Similar to a pivot joint, but one of the anchors is on a linear slide instead of being fixed.</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,groove_a:Vect,groove_b:Vect,anchor_b:Vect)-class-method","html_id":"new(a:Body,b:Body,groove_a:Vect,groove_b:Vect,anchor_b:Vect)-class-method","name":"new","doc":"The groove goes from *groove_a* to *groove_b* on body *a*, and the pivot\nis attached to *anchor_b* on body *b*.\n\nAll coordinates are body local.","summary":"<p>The groove goes from <em>groove_a</em> to <em>groove_b</em> on body <em>a</em>, and the pivot is attached to <em>anchor_b</em> on body <em>b</em>.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"groove_a","doc":null,"default_value":"","external_name":"groove_a","restriction":"Vect"},{"name":"groove_b","doc":null,"default_value":"","external_name":"groove_b","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"args_string":"(a : Body, b : Body, groove_a : Vect, groove_b : Vect, anchor_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L175","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"groove_a","doc":null,"default_value":"","external_name":"groove_a","restriction":"Vect"},{"name":"groove_b","doc":null,"default_value":"","external_name":"groove_b","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, groove_a, groove_b, anchor_b)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"anchor_b:Vect-instance-method","html_id":"anchor_b:Vect-instance-method","name":"anchor_b","doc":"The location of the second anchor relative to the second body.","summary":"<p>The location of the second anchor relative to the second body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L205","def":{"name":"anchor_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.groove_joint_get_anchor_b(self)"}},{"id":"anchor_b=(anchor_b:Vect)-instance-method","html_id":"anchor_b=(anchor_b:Vect)-instance-method","name":"anchor_b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"args_string":"(anchor_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L208","def":{"name":"anchor_b=","args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.groove_joint_set_anchor_b(self, anchor_b)"}},{"id":"groove_a:Vect-instance-method","html_id":"groove_a:Vect-instance-method","name":"groove_a","doc":"The first endpoint of the groove relative to the first body.","summary":"<p>The first endpoint of the groove relative to the first body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L189","def":{"name":"groove_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.groove_joint_get_groove_a(self)"}},{"id":"groove_a=(groove_a:Vect)-instance-method","html_id":"groove_a=(groove_a:Vect)-instance-method","name":"groove_a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"groove_a","doc":null,"default_value":"","external_name":"groove_a","restriction":"Vect"}],"args_string":"(groove_a : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L192","def":{"name":"groove_a=","args":[{"name":"groove_a","doc":null,"default_value":"","external_name":"groove_a","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.groove_joint_set_groove_a(self, groove_a)"}},{"id":"groove_b:Vect-instance-method","html_id":"groove_b:Vect-instance-method","name":"groove_b","doc":"The second endpoint of the groove relative to the second body.","summary":"<p>The second endpoint of the groove relative to the second body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L197","def":{"name":"groove_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.groove_joint_get_groove_b(self)"}},{"id":"groove_b=(groove_b:Vect)-instance-method","html_id":"groove_b=(groove_b:Vect)-instance-method","name":"groove_b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"groove_b","doc":null,"default_value":"","external_name":"groove_b","restriction":"Vect"}],"args_string":"(groove_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L200","def":{"name":"groove_b=","args":[{"name":"groove_b","doc":null,"default_value":"","external_name":"groove_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.groove_joint_set_groove_b(self, groove_b)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/PinJoint","path":"CP/Constraint/PinJoint.html","kind":"class","full_name":"CP::Constraint::PinJoint","name":"PinJoint","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":214,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Keeps the anchor points at a set distance from one another.","summary":"<p>Keeps the anchor points at a set distance from one another.</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,anchor_a:Vect,anchor_b:Vect)-class-method","html_id":"new(a:Body,b:Body,anchor_a:Vect,anchor_b:Vect)-class-method","name":"new","doc":"*a* and *b* are the two bodies to connect, and *anchor_a* and *anchor_b*\narethe anchor points on those bodies.\n\nThe distance between the two anchor points is measured when the joint\nis created. If you want to set a specific distance, use the setter\nfunction to override it.","summary":"<p><em>a</em> and <em>b</em> are the two bodies to connect, and <em>anchor_a</em> and <em>anchor_b</em> arethe anchor points on those bodies.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"args_string":"(a : Body, b : Body, anchor_a : Vect, anchor_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L221","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, anchor_a, anchor_b)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"anchor_a:Vect-instance-method","html_id":"anchor_a:Vect-instance-method","name":"anchor_a","doc":"The location of the first anchor relative to the first body.","summary":"<p>The location of the first anchor relative to the first body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L235","def":{"name":"anchor_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.pin_joint_get_anchor_a(self)"}},{"id":"anchor_a=(anchor_a:Vect)-instance-method","html_id":"anchor_a=(anchor_a:Vect)-instance-method","name":"anchor_a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"}],"args_string":"(anchor_a : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L238","def":{"name":"anchor_a=","args":[{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.pin_joint_set_anchor_a(self, anchor_a)"}},{"id":"anchor_b:Vect-instance-method","html_id":"anchor_b:Vect-instance-method","name":"anchor_b","doc":"The location of the second anchor relative to the second body.","summary":"<p>The location of the second anchor relative to the second body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L243","def":{"name":"anchor_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.pin_joint_get_anchor_b(self)"}},{"id":"anchor_b=(anchor_b:Vect)-instance-method","html_id":"anchor_b=(anchor_b:Vect)-instance-method","name":"anchor_b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"args_string":"(anchor_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L246","def":{"name":"anchor_b=","args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.pin_joint_set_anchor_b(self, anchor_b)"}},{"id":"dist:Float64-instance-method","html_id":"dist:Float64-instance-method","name":"dist","doc":"The distance the joint will maintain between the two anchors.","summary":"<p>The distance the joint will maintain between the two anchors.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L251","def":{"name":"dist","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.pin_joint_get_dist(self)"}},{"id":"dist=(dist:Number)-instance-method","html_id":"dist=(dist:Number)-instance-method","name":"dist=","doc":null,"summary":null,"abstract":false,"args":[{"name":"dist","doc":null,"default_value":"","external_name":"dist","restriction":"Number"}],"args_string":"(dist : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L254","def":{"name":"dist=","args":[{"name":"dist","doc":null,"default_value":"","external_name":"dist","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.pin_joint_set_dist(self, dist)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/PivotJoint","path":"CP/Constraint/PivotJoint.html","kind":"class","full_name":"CP::Constraint::PivotJoint","name":"PivotJoint","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":260,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Allows two objects to pivot about a single point.","summary":"<p>Allows two objects to pivot about a single point.</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,anchor_a:Vect,anchor_b:Vect)-class-method","html_id":"new(a:Body,b:Body,anchor_a:Vect,anchor_b:Vect)-class-method","name":"new","doc":"*a* and *b* are the two bodies to connect, and *anchor_a* and *anchor_b*\nare the points in local coordinates where the pivot is located.","summary":"<p><em>a</em> and <em>b</em> are the two bodies to connect, and <em>anchor_a</em> and <em>anchor_b</em> are the points in local coordinates where the pivot is located.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"args_string":"(a : Body, b : Body, anchor_a : Vect, anchor_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L263","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, anchor_a, anchor_b)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(a:Body,b:Body,pivot:Vect):self-class-method","html_id":"new(a:Body,b:Body,pivot:Vect):self-class-method","name":"new","doc":"*a* and *b* are the two bodies to connect, and *pivot* is the point in\nworld coordinates of the pivot.","summary":"<p><em>a</em> and <em>b</em> are the two bodies to connect, and <em>pivot</em> is the point in world coordinates of the pivot.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"pivot","doc":null,"default_value":"","external_name":"pivot","restriction":"Vect"}],"args_string":"(a : Body, b : Body, pivot : Vect) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L272","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"pivot","doc":null,"default_value":"","external_name":"pivot","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"anchor_a = a.world_to_local(pivot)\nanchor_b = b.world_to_local(pivot)\nself.new(a, b, anchor_a, anchor_b)\n"}}],"instance_methods":[{"id":"anchor_a:Vect-instance-method","html_id":"anchor_a:Vect-instance-method","name":"anchor_a","doc":"The location of the first anchor relative to the first body.","summary":"<p>The location of the first anchor relative to the first body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L284","def":{"name":"anchor_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.pivot_joint_get_anchor_a(self)"}},{"id":"anchor_a=(anchor_a:Vect)-instance-method","html_id":"anchor_a=(anchor_a:Vect)-instance-method","name":"anchor_a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"}],"args_string":"(anchor_a : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L287","def":{"name":"anchor_a=","args":[{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.pivot_joint_set_anchor_a(self, anchor_a)"}},{"id":"anchor_b:Vect-instance-method","html_id":"anchor_b:Vect-instance-method","name":"anchor_b","doc":"The location of the second anchor relative to the second body.","summary":"<p>The location of the second anchor relative to the second body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L292","def":{"name":"anchor_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.pivot_joint_get_anchor_b(self)"}},{"id":"anchor_b=(anchor_b:Vect)-instance-method","html_id":"anchor_b=(anchor_b:Vect)-instance-method","name":"anchor_b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"args_string":"(anchor_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L295","def":{"name":"anchor_b=","args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.pivot_joint_set_anchor_b(self, anchor_b)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/RatchetJoint","path":"CP/Constraint/RatchetJoint.html","kind":"class","full_name":"CP::Constraint::RatchetJoint","name":"RatchetJoint","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":354,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Works like a socket wrench.","summary":"<p>Works like a socket wrench.</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,phase:Number,ratchet:Number)-class-method","html_id":"new(a:Body,b:Body,phase:Number,ratchet:Number)-class-method","name":"new","doc":"*ratchet* is the distance between \"clicks\", *phase* is the initial offset\nto use when deciding where the ratchet angles are.","summary":"<p><em>ratchet</em> is the distance between \"clicks\", <em>phase</em> is the initial offset to use when deciding where the ratchet angles are.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Number"},{"name":"ratchet","doc":null,"default_value":"","external_name":"ratchet","restriction":"Number"}],"args_string":"(a : Body, b : Body, phase : Number, ratchet : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L357","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Number"},{"name":"ratchet","doc":null,"default_value":"","external_name":"ratchet","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, phase, ratchet)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"angle:Float64-instance-method","html_id":"angle:Float64-instance-method","name":"angle","doc":"The angle of the current ratchet tooth.","summary":"<p>The angle of the current ratchet tooth.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L371","def":{"name":"angle","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.ratchet_joint_get_angle(self)"}},{"id":"angle=(angle:Number)-instance-method","html_id":"angle=(angle:Number)-instance-method","name":"angle=","doc":null,"summary":null,"abstract":false,"args":[{"name":"angle","doc":null,"default_value":"","external_name":"angle","restriction":"Number"}],"args_string":"(angle : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L374","def":{"name":"angle=","args":[{"name":"angle","doc":null,"default_value":"","external_name":"angle","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.ratchet_joint_set_angle(self, angle)"}},{"id":"phase:Float64-instance-method","html_id":"phase:Float64-instance-method","name":"phase","doc":"The phase offset of the ratchet.","summary":"<p>The phase offset of the ratchet.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L379","def":{"name":"phase","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.ratchet_joint_get_phase(self)"}},{"id":"phase=(phase:Number)-instance-method","html_id":"phase=(phase:Number)-instance-method","name":"phase=","doc":null,"summary":null,"abstract":false,"args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Number"}],"args_string":"(phase : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L382","def":{"name":"phase=","args":[{"name":"phase","doc":null,"default_value":"","external_name":"phase","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.ratchet_joint_set_phase(self, phase)"}},{"id":"ratchet:Float64-instance-method","html_id":"ratchet:Float64-instance-method","name":"ratchet","doc":"The angular distance of each ratchet.","summary":"<p>The angular distance of each ratchet.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L387","def":{"name":"ratchet","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.ratchet_joint_get_ratchet(self)"}},{"id":"ratchet=(ratchet:Number)-instance-method","html_id":"ratchet=(ratchet:Number)-instance-method","name":"ratchet=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ratchet","doc":null,"default_value":"","external_name":"ratchet","restriction":"Number"}],"args_string":"(ratchet : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L390","def":{"name":"ratchet=","args":[{"name":"ratchet","doc":null,"default_value":"","external_name":"ratchet","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.ratchet_joint_set_ratchet(self, ratchet)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/RotaryLimitJoint","path":"CP/Constraint/RotaryLimitJoint.html","kind":"class","full_name":"CP::Constraint::RotaryLimitJoint","name":"RotaryLimitJoint","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":396,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Constrains the relative rotations of two bodies.","summary":"<p>Constrains the relative rotations of two bodies.</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,min:Number,max:Number)-class-method","html_id":"new(a:Body,b:Body,min:Number,max:Number)-class-method","name":"new","doc":"*min* and *max* are the angular limits in radians. It is implemented so\nthat it's possible to for the range to be greater than a full revolution.","summary":"<p><em>min</em> and <em>max</em> are the angular limits in radians.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"args_string":"(a : Body, b : Body, min : Number, max : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L399","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, min, max)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"max:Float64-instance-method","html_id":"max:Float64-instance-method","name":"max","doc":"The maximum distance the joint will maintain between the two anchors.","summary":"<p>The maximum distance the joint will maintain between the two anchors.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L421","def":{"name":"max","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.rotary_limit_joint_get_max(self)"}},{"id":"max=(max:Number)-instance-method","html_id":"max=(max:Number)-instance-method","name":"max=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"args_string":"(max : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L424","def":{"name":"max=","args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.rotary_limit_joint_set_max(self, max)"}},{"id":"min:Float64-instance-method","html_id":"min:Float64-instance-method","name":"min","doc":"The minimum distance the joint will maintain between the two anchors.","summary":"<p>The minimum distance the joint will maintain between the two anchors.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L413","def":{"name":"min","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.rotary_limit_joint_get_min(self)"}},{"id":"min=(min:Number)-instance-method","html_id":"min=(min:Number)-instance-method","name":"min=","doc":null,"summary":null,"abstract":false,"args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"}],"args_string":"(min : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L416","def":{"name":"min=","args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.rotary_limit_joint_set_min(self, min)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/SimpleMotor","path":"CP/Constraint/SimpleMotor.html","kind":"class","full_name":"CP::Constraint::SimpleMotor","name":"SimpleMotor","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":554,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Keeps the relative angular velocity of a pair of bodies constant.","summary":"<p>Keeps the relative angular velocity of a pair of bodies constant.</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,rate:Number)-class-method","html_id":"new(a:Body,b:Body,rate:Number)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"Number"}],"args_string":"(a : Body, b : Body, rate : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L555","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, rate)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"rate:Float64-instance-method","html_id":"rate:Float64-instance-method","name":"rate","doc":"The desired relative angular velocity of the motor.\n\nYou will usually want to set a force (torque) maximum for motors as otherwise\nthey will be able to apply a nearly infinite torque to keep the bodies moving.","summary":"<p>The desired relative angular velocity of the motor.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L572","def":{"name":"rate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.simple_motor_get_rate(self)"}},{"id":"rate=(rate:Number)-instance-method","html_id":"rate=(rate:Number)-instance-method","name":"rate=","doc":null,"summary":null,"abstract":false,"args":[{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"Number"}],"args_string":"(rate : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L575","def":{"name":"rate=","args":[{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.simple_motor_set_rate(self, rate)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint/SlideJoint","path":"CP/Constraint/SlideJoint.html","kind":"class","full_name":"CP::Constraint::SlideJoint","name":"SlideJoint","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/constraint.cr","line_number":303,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Constraint","kind":"class","full_name":"CP::Constraint","name":"Constraint"},"doc":"Like pin joints, but have a minimum and maximum distance.\nA chain could be modeled using this joint. It keeps the anchor points\nfrom getting too far apart, but will allow them to get closer together.","summary":"<p>Like pin joints, but have a minimum and maximum distance.</p>","class_methods":[],"constructors":[{"id":"new(a:Body,b:Body,anchor_a:Vect,anchor_b:Vect,min:Number,max:Number)-class-method","html_id":"new(a:Body,b:Body,anchor_a:Vect,anchor_b:Vect,min:Number,max:Number)-class-method","name":"new","doc":"*a* and *b* are the two bodies to connect, *anchor_a* and *anchor_b* are\nthe anchor points on those bodies, and *min* and *max* define the allowed\ndistances of the anchor points.","summary":"<p><em>a</em> and <em>b</em> are the two bodies to connect, <em>anchor_a</em> and <em>anchor_b</em> are the anchor points on those bodies, and <em>min</em> and <em>max</em> define the allowed distances of the anchor points.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"args_string":"(a : Body, b : Body, anchor_a : Vect, anchor_b : Vect, min : Number, max : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L307","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Body"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Body"},{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"},{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, anchor_a, anchor_b, min, max)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"anchor_a:Vect-instance-method","html_id":"anchor_a:Vect-instance-method","name":"anchor_a","doc":"The location of the first anchor relative to the first body.","summary":"<p>The location of the first anchor relative to the first body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L321","def":{"name":"anchor_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.slide_joint_get_anchor_a(self)"}},{"id":"anchor_a=(anchor_a:Vect)-instance-method","html_id":"anchor_a=(anchor_a:Vect)-instance-method","name":"anchor_a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"}],"args_string":"(anchor_a : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L324","def":{"name":"anchor_a=","args":[{"name":"anchor_a","doc":null,"default_value":"","external_name":"anchor_a","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.slide_joint_set_anchor_a(self, anchor_a)"}},{"id":"anchor_b:Vect-instance-method","html_id":"anchor_b:Vect-instance-method","name":"anchor_b","doc":"The location of the second anchor relative to the second body.","summary":"<p>The location of the second anchor relative to the second body.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L329","def":{"name":"anchor_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.slide_joint_get_anchor_b(self)"}},{"id":"anchor_b=(anchor_b:Vect)-instance-method","html_id":"anchor_b=(anchor_b:Vect)-instance-method","name":"anchor_b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"args_string":"(anchor_b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L332","def":{"name":"anchor_b=","args":[{"name":"anchor_b","doc":null,"default_value":"","external_name":"anchor_b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.slide_joint_set_anchor_b(self, anchor_b)"}},{"id":"max:Float64-instance-method","html_id":"max:Float64-instance-method","name":"max","doc":"The maximum distance the joint will maintain between the two anchors.","summary":"<p>The maximum distance the joint will maintain between the two anchors.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L345","def":{"name":"max","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.slide_joint_get_max(self)"}},{"id":"max=(max:Number)-instance-method","html_id":"max=(max:Number)-instance-method","name":"max=","doc":null,"summary":null,"abstract":false,"args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"args_string":"(max : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L348","def":{"name":"max=","args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.slide_joint_set_max(self, max)"}},{"id":"min:Float64-instance-method","html_id":"min:Float64-instance-method","name":"min","doc":"The minimum distance the joint will maintain between the two anchors.","summary":"<p>The minimum distance the joint will maintain between the two anchors.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L337","def":{"name":"min","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.slide_joint_get_min(self)"}},{"id":"min=(min:Number)-instance-method","html_id":"min=(min:Number)-instance-method","name":"min=","doc":null,"summary":null,"abstract":false,"args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"}],"args_string":"(min : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/constraint.cr#L340","def":{"name":"min=","args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.slide_joint_set_min(self, min)"}}],"macros":[],"types":[]}]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/ContactPointSet","path":"CP/ContactPointSet.html","kind":"struct","full_name":"CP::ContactPointSet","name":"ContactPointSet","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/collision.cr","line_number":28,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"A struct that wraps up the important collision data for an arbiter.","summary":"<p>A struct that wraps up the important collision data for an arbiter.</p>","class_methods":[],"constructors":[{"id":"new(points:Slice(ContactPoint),normal:Vect)-class-method","html_id":"new(points:Slice(ContactPoint),normal:Vect)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"points","doc":null,"default_value":"","external_name":"points","restriction":"Slice(ContactPoint)"},{"name":"normal","doc":null,"default_value":"","external_name":"normal","restriction":"Vect"}],"args_string":"(points : Slice(ContactPoint), normal : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L52","def":{"name":"new","args":[{"name":"points","doc":null,"default_value":"","external_name":"points","restriction":"Slice(ContactPoint)"},{"name":"normal","doc":null,"default_value":"","external_name":"normal","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(points, normal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"count:Int32-instance-method","html_id":"count:Int32-instance-method","name":"count","doc":"The number of contact points in the set.","summary":"<p>The number of contact points in the set.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L47","def":{"name":"count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@count"}},{"id":"normal:Vect-instance-method","html_id":"normal:Vect-instance-method","name":"normal","doc":"The normal of the collision.","summary":"<p>The normal of the collision.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L49","def":{"name":"normal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"@normal"}},{"id":"points:Slice(ContactPoint)-instance-method","html_id":"points:Slice(ContactPoint)-instance-method","name":"points","doc":"The contact points (at most 2).","summary":"<p>The contact points (at most 2).</p>","abstract":false,"args":[],"args_string":" : Slice(ContactPoint)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L59","def":{"name":"points","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Slice(ContactPoint)","visibility":"Public","body":"@points.to_unsafe.to_slice(@count)"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/ContactPointSet/ContactPoint","path":"CP/ContactPointSet/ContactPoint.html","kind":"struct","full_name":"CP::ContactPointSet::ContactPoint","name":"ContactPoint","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/collision.cr","line_number":31,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/ContactPointSet","kind":"struct","full_name":"CP::ContactPointSet","name":"ContactPointSet"},"doc":"Contains information about a contact point.","summary":"<p>Contains information about a contact point.</p>","class_methods":[],"constructors":[{"id":"new(point_a:Vect,point_b:Vect,distance:Number)-class-method","html_id":"new(point_a:Vect,point_b:Vect,distance:Number)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"point_a","doc":null,"default_value":"","external_name":"point_a","restriction":"Vect"},{"name":"point_b","doc":null,"default_value":"","external_name":"point_b","restriction":"Vect"},{"name":"distance","doc":null,"default_value":"","external_name":"distance","restriction":"Number"}],"args_string":"(point_a : Vect, point_b : Vect, distance : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L41","def":{"name":"new","args":[{"name":"point_a","doc":null,"default_value":"","external_name":"point_a","restriction":"Vect"},{"name":"point_b","doc":null,"default_value":"","external_name":"point_b","restriction":"Vect"},{"name":"distance","doc":null,"default_value":"","external_name":"distance","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(point_a, point_b, distance)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"distance:Float64-instance-method","html_id":"distance:Float64-instance-method","name":"distance","doc":"Penetration distance of the two shapes. Overlapping means it will be negative.\n\nThis value is calculated as `(point2 - point1).dot(normal)` and is ignored by `Arbiter#contact_point_set=`.","summary":"<p>Penetration distance of the two shapes.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L39","def":{"name":"distance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@distance"}},{"id":"point_a:Vect-instance-method","html_id":"point_a:Vect-instance-method","name":"point_a","doc":"The position of the contact on the surface of the first shape.","summary":"<p>The position of the contact on the surface of the first shape.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L33","def":{"name":"point_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"@point_a"}},{"id":"point_b:Vect-instance-method","html_id":"point_b:Vect-instance-method","name":"point_b","doc":"The position of the contact on the surface of the second shape.","summary":"<p>The position of the contact on the surface of the second shape.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/collision.cr#L35","def":{"name":"point_b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"@point_b"}}],"macros":[],"types":[]}]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Mat2x2","path":"CP/Mat2x2.html","kind":"struct","full_name":"CP::Mat2x2","name":"Mat2x2","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/vector.cr","line_number":343,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"2x2 matrix type used for tensors and such.\n\n(row major: `[[a b][c d]]`)","summary":"<p>2x2 matrix type used for tensors and such.</p>","class_methods":[],"constructors":[{"id":"new(a:Number,b:Number,c:Number,d:Number)-class-method","html_id":"new(a:Number,b:Number,c:Number,d:Number)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Number"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Number"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Number"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Number"}],"args_string":"(a : Number, b : Number, c : Number, d : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L346","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Number"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Number"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Number"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, c, d)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"a:Float64-instance-method","html_id":"a:Float64-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L344","def":{"name":"a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@a"}},{"id":"a=(a:Float64)-instance-method","html_id":"a=(a:Float64)-instance-method","name":"a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float64"}],"args_string":"(a : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L344","def":{"name":"a=","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@a = a"}},{"id":"b:Float64-instance-method","html_id":"b:Float64-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L344","def":{"name":"b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@b"}},{"id":"b=(b:Float64)-instance-method","html_id":"b=(b:Float64)-instance-method","name":"b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float64"}],"args_string":"(b : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L344","def":{"name":"b=","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@b = b"}},{"id":"c:Float64-instance-method","html_id":"c:Float64-instance-method","name":"c","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L344","def":{"name":"c","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@c"}},{"id":"c=(c:Float64)-instance-method","html_id":"c=(c:Float64)-instance-method","name":"c=","doc":null,"summary":null,"abstract":false,"args":[{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Float64"}],"args_string":"(c : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L344","def":{"name":"c=","args":[{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@c = c"}},{"id":"d:Float64-instance-method","html_id":"d:Float64-instance-method","name":"d","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L344","def":{"name":"d","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@d"}},{"id":"d=(d:Float64)-instance-method","html_id":"d=(d:Float64)-instance-method","name":"d=","doc":null,"summary":null,"abstract":false,"args":[{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Float64"}],"args_string":"(d : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L344","def":{"name":"d=","args":[{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@d = d"}},{"id":"transform(v:Vect):Vect-instance-method","html_id":"transform(v:Vect):Vect-instance-method","name":"transform","doc":null,"summary":null,"abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"args_string":"(v : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L353","def":{"name":"transform","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new((v.x * @a) + (v.y * @b), (v.x * @c) + (v.y * @d))"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/PointQueryInfo","path":"CP/PointQueryInfo.html","kind":"struct","full_name":"CP::PointQueryInfo","name":"PointQueryInfo","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/query.cr","line_number":28,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Holds the result of a point query made on a `Shape` or `Space`.","summary":"<p>Holds the result of a point query made on a <code><a href=\"../CP/Shape.html\">Shape</a></code> or <code><a href=\"../CP/Space.html\">Space</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(shape:Shape,point:Vect,distance:Float64,gradient:Vect)-class-method","html_id":"new(shape:Shape,point:Vect,distance:Float64,gradient:Vect)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"distance","doc":null,"default_value":"","external_name":"distance","restriction":"Float64"},{"name":"gradient","doc":null,"default_value":"","external_name":"gradient","restriction":"Vect"}],"args_string":"(shape : Shape, point : Vect, distance : Float64, gradient : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L42","def":{"name":"new","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"distance","doc":null,"default_value":"","external_name":"distance","restriction":"Float64"},{"name":"gradient","doc":null,"default_value":"","external_name":"gradient","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(shape, point, distance, gradient)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"distance:Float64-instance-method","html_id":"distance:Float64-instance-method","name":"distance","doc":"The distance to the point (negative if the point is inside the shape).","summary":"<p>The distance to the point (negative if the point is inside the shape).</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L34","def":{"name":"distance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@distance"}},{"id":"distance=(distance:Float64)-instance-method","html_id":"distance=(distance:Float64)-instance-method","name":"distance=","doc":null,"summary":null,"abstract":false,"args":[{"name":"distance","doc":null,"default_value":"","external_name":"distance","restriction":"Float64"}],"args_string":"(distance : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L35","def":{"name":"distance=","args":[{"name":"distance","doc":null,"default_value":"","external_name":"distance","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@distance = distance"}},{"id":"gradient:Vect-instance-method","html_id":"gradient:Vect-instance-method","name":"gradient","doc":"The gradient of the signed distance function.\n\nThe value should be similar to `point/distance`, but accurate even for very small values of `distance`.","summary":"<p>The gradient of the signed distance function.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L39","def":{"name":"gradient","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"@gradient"}},{"id":"gradient=(gradient:Vect)-instance-method","html_id":"gradient=(gradient:Vect)-instance-method","name":"gradient=","doc":null,"summary":null,"abstract":false,"args":[{"name":"gradient","doc":null,"default_value":"","external_name":"gradient","restriction":"Vect"}],"args_string":"(gradient : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L40","def":{"name":"gradient=","args":[{"name":"gradient","doc":null,"default_value":"","external_name":"gradient","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@gradient = gradient"}},{"id":"point:Vect-instance-method","html_id":"point:Vect-instance-method","name":"point","doc":"The closest point on the shape's surface (in world space coordinates).","summary":"<p>The closest point on the shape's surface (in world space coordinates).</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L31","def":{"name":"point","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"@point"}},{"id":"point=(point:Vect)-instance-method","html_id":"point=(point:Vect)-instance-method","name":"point=","doc":null,"summary":null,"abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(point : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L32","def":{"name":"point=","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@point = point"}},{"id":"shape:Shape-instance-method","html_id":"shape:Shape-instance-method","name":"shape","doc":"The nearest shape","summary":"<p>The nearest shape</p>","abstract":false,"args":[],"args_string":" : Shape","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L47","def":{"name":"shape","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Shape","visibility":"Public","body":"Shape[@shape]"}},{"id":"shape=(shape:Shape)-instance-method","html_id":"shape=(shape:Shape)-instance-method","name":"shape=","doc":null,"summary":null,"abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L50","def":{"name":"shape=","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@shape = shape.to_unsafe"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/SegmentQueryInfo","path":"CP/SegmentQueryInfo.html","kind":"struct","full_name":"CP::SegmentQueryInfo","name":"SegmentQueryInfo","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/query.cr","line_number":68,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Segment queries return more information than just a simple yes or no,\nthey also return where a shape was hit and its surface normal at the hit\npoint. This object holds that information.\n\nSegment queries are like ray casting, but because not all spatial indexes\nallow processing infinitely long ray queries it is limited to segments.\nIn practice this is still very fast and you don't need to worry too much\nabout the performance as long as you aren't using extremely long segments\nfor your queries.","summary":"<p>Segment queries return more information than just a simple yes or no, they also return where a shape was hit and its surface normal at the hit point.</p>","class_methods":[],"constructors":[{"id":"new(shape:Shape,point:Vect,normal:Vect,alpha:Float64)-class-method","html_id":"new(shape:Shape,point:Vect,normal:Vect,alpha:Float64)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"normal","doc":null,"default_value":"","external_name":"normal","restriction":"Vect"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"Float64"}],"args_string":"(shape : Shape, point : Vect, normal : Vect, alpha : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L80","def":{"name":"new","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"},{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"normal","doc":null,"default_value":"","external_name":"normal","restriction":"Vect"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(shape, point, normal, alpha)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"alpha:Float64-instance-method","html_id":"alpha:Float64-instance-method","name":"alpha","doc":"The normalized distance along the query segment in the range [0, 1].","summary":"<p>The normalized distance along the query segment in the range [0, 1].</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L77","def":{"name":"alpha","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@alpha"}},{"id":"alpha=(alpha:Float64)-instance-method","html_id":"alpha=(alpha:Float64)-instance-method","name":"alpha=","doc":null,"summary":null,"abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"Float64"}],"args_string":"(alpha : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L78","def":{"name":"alpha=","args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@alpha = alpha"}},{"id":"normal:Vect-instance-method","html_id":"normal:Vect-instance-method","name":"normal","doc":"The normal of the surface hit.","summary":"<p>The normal of the surface hit.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L74","def":{"name":"normal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"@normal"}},{"id":"normal=(normal:Vect)-instance-method","html_id":"normal=(normal:Vect)-instance-method","name":"normal=","doc":null,"summary":null,"abstract":false,"args":[{"name":"normal","doc":null,"default_value":"","external_name":"normal","restriction":"Vect"}],"args_string":"(normal : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L75","def":{"name":"normal=","args":[{"name":"normal","doc":null,"default_value":"","external_name":"normal","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@normal = normal"}},{"id":"point:Vect-instance-method","html_id":"point:Vect-instance-method","name":"point","doc":"The point of impact.","summary":"<p>The point of impact.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L71","def":{"name":"point","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"@point"}},{"id":"point=(point:Vect)-instance-method","html_id":"point=(point:Vect)-instance-method","name":"point=","doc":null,"summary":null,"abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"args_string":"(point : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L72","def":{"name":"point=","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@point = point"}},{"id":"shape:Shape-instance-method","html_id":"shape:Shape-instance-method","name":"shape","doc":"The shape that was hit.","summary":"<p>The shape that was hit.</p>","abstract":false,"args":[],"args_string":" : Shape","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L85","def":{"name":"shape","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Shape","visibility":"Public","body":"Shape[@shape]"}},{"id":"shape=(shape:Shape)-instance-method","html_id":"shape=(shape:Shape)-instance-method","name":"shape=","doc":null,"summary":null,"abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L88","def":{"name":"shape=","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@shape = shape.to_unsafe"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","path":"CP/Shape.html","kind":"class","full_name":"CP::Shape","name":"Shape","abstract":true,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/shape.cr","line_number":24,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Circle","kind":"class","full_name":"CP::Shape::Circle","name":"Circle"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Poly","kind":"class","full_name":"CP::Shape::Poly","name":"Poly"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Segment","kind":"class","full_name":"CP::Shape::Segment","name":"Segment"}],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Defines the shape of a rigid body.","summary":"<p>Defines the shape of a rigid body.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"area:Float64-instance-method","html_id":"area:Float64-instance-method","name":"area","doc":"Get the calculated area of this shape.","summary":"<p>Get the calculated area of this shape.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L112","def":{"name":"area","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.shape_get_area(self)"}},{"id":"bb:BB-instance-method","html_id":"bb:BB-instance-method","name":"bb","doc":"Get the bounding box that contains the shape given its current position and angle.\n\nOnly guaranteed to be valid after `cache_bb` or `Space#step` is called.\nMoving a body that a shape is connected to does not update its bounding box.\nFor shapes used for queries that aren't attached to bodies, you can also use `update`.","summary":"<p>Get the bounding box that contains the shape given its current position and angle.</p>","abstract":false,"args":[],"args_string":" : BB","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L126","def":{"name":"bb","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BB","visibility":"Public","body":"LibCP.shape_get_bb(self)"}},{"id":"body:Body?-instance-method","html_id":"body:Body?-instance-method","name":"body","doc":"The `Body` this shape is added to.","summary":"<p>The <code><a href=\"../CP/Body.html\">Body</a></code> this shape is added to.</p>","abstract":false,"args":[],"args_string":" : Body?","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L78","def":{"name":"body","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Body | ::Nil","visibility":"Public","body":"Body[LibCP.shape_get_body(self)]?"}},{"id":"body=(body:Body?)-instance-method","html_id":"body=(body:Body?)-instance-method","name":"body=","doc":"Set the `Body` this shape is added to.\n\nCan only be used if the shape is not currently added to a space.","summary":"<p>Set the <code><a href=\"../CP/Body.html\">Body</a></code> this shape is added to.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"}],"args_string":"(body : Body?)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L84","def":{"name":"body=","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_body(self, body)"}},{"id":"cache_bb:BB-instance-method","html_id":"cache_bb:BB-instance-method","name":"cache_bb","doc":"Update, cache and return the bounding box of a shape based on the body it's attached to.","summary":"<p>Update, cache and return the bounding box of a shape based on the body it's attached to.</p>","abstract":false,"args":[],"args_string":" : BB","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L43","def":{"name":"cache_bb","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BB","visibility":"Public","body":"LibCP.shape_cache_bb(self)"}},{"id":"center_of_gravity:Vect-instance-method","html_id":"center_of_gravity:Vect-instance-method","name":"center_of_gravity","doc":"Get the centroid of this shape.","summary":"<p>Get the centroid of this shape.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L117","def":{"name":"center_of_gravity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.shape_get_center_of_gravity(self)"}},{"id":"collide(b:Shape):ContactPointSet-instance-method","html_id":"collide(b:Shape):ContactPointSet-instance-method","name":"collide","doc":"Return contact information about two shapes.","summary":"<p>Return contact information about two shapes.</p>","abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Shape"}],"args_string":"(b : Shape) : ContactPointSet","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L68","def":{"name":"collide","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ContactPointSet","visibility":"Public","body":"LibCP.shapes_collide(self, b)"}},{"id":"collision_type:CollisionType-instance-method","html_id":"collision_type:CollisionType-instance-method","name":"collision_type","doc":"User defined collision type for the shape.\n\nSee `Space#add_collision_handler` for more information.","summary":"<p>User defined collision type for the shape.</p>","abstract":false,"args":[],"args_string":" : CollisionType","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L177","def":{"name":"collision_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CollisionType","visibility":"Public","body":"LibCP.shape_get_collision_type(self)"}},{"id":"collision_type=(collision_type:Int)-instance-method","html_id":"collision_type=(collision_type:Int)-instance-method","name":"collision_type=","doc":null,"summary":null,"abstract":false,"args":[{"name":"collision_type","doc":null,"default_value":"","external_name":"collision_type","restriction":"Int"}],"args_string":"(collision_type : Int)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L180","def":{"name":"collision_type=","args":[{"name":"collision_type","doc":null,"default_value":"","external_name":"collision_type","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_collision_type(self, collision_type)"}},{"id":"density:Float64-instance-method","html_id":"density:Float64-instance-method","name":"density","doc":"Get the density of the shape if you are having Chipmunk calculate mass properties for you.","summary":"<p>Get the density of the shape if you are having Chipmunk calculate mass properties for you.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L98","def":{"name":"density","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.shape_get_density(self)"}},{"id":"density=(density:Number)-instance-method","html_id":"density=(density:Number)-instance-method","name":"density=","doc":"Set the density of this shape to have Chipmunk calculate mass properties for you.","summary":"<p>Set the density of this shape to have Chipmunk calculate mass properties for you.</p>","abstract":false,"args":[{"name":"density","doc":null,"default_value":"","external_name":"density","restriction":"Number"}],"args_string":"(density : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L102","def":{"name":"density=","args":[{"name":"density","doc":null,"default_value":"","external_name":"density","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_density(self, density)"}},{"id":"elasticity:Float64-instance-method","html_id":"elasticity:Float64-instance-method","name":"elasticity","doc":"The elasticity of this shape.\n\nA value of 0.0 gives no bounce, while a value of 1.0 will give a\n'perfect' bounce. However due to inaccuracies in the simulation\nusing 1.0 or greater is not recommended.","summary":"<p>The elasticity of this shape.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L145","def":{"name":"elasticity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.shape_get_elasticity(self)"}},{"id":"elasticity=(elasticity:Number)-instance-method","html_id":"elasticity=(elasticity:Number)-instance-method","name":"elasticity=","doc":null,"summary":null,"abstract":false,"args":[{"name":"elasticity","doc":null,"default_value":"","external_name":"elasticity","restriction":"Number"}],"args_string":"(elasticity : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L148","def":{"name":"elasticity=","args":[{"name":"elasticity","doc":null,"default_value":"","external_name":"elasticity","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_elasticity(self, elasticity)"}},{"id":"filter:ShapeFilter-instance-method","html_id":"filter:ShapeFilter-instance-method","name":"filter","doc":"The collision filtering parameters of this shape.","summary":"<p>The collision filtering parameters of this shape.</p>","abstract":false,"args":[],"args_string":" : ShapeFilter","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L185","def":{"name":"filter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ShapeFilter","visibility":"Public","body":"LibCP.shape_get_filter(self)"}},{"id":"filter=(filter:ShapeFilter)-instance-method","html_id":"filter=(filter:ShapeFilter)-instance-method","name":"filter=","doc":null,"summary":null,"abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(filter : ShapeFilter)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L188","def":{"name":"filter=","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_filter(self, filter)"}},{"id":"friction:Float64-instance-method","html_id":"friction:Float64-instance-method","name":"friction","doc":"The friction of this shape.\n\nChipmunk uses the Coulomb friction model, a value of 0.0 is\nfrictionless. A value over 1.0 is also perfectly fine.","summary":"<p>The friction of this shape.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L156","def":{"name":"friction","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.shape_get_friction(self)"}},{"id":"friction=(friction:Number)-instance-method","html_id":"friction=(friction:Number)-instance-method","name":"friction=","doc":null,"summary":null,"abstract":false,"args":[{"name":"friction","doc":null,"default_value":"","external_name":"friction","restriction":"Number"}],"args_string":"(friction : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L159","def":{"name":"friction=","args":[{"name":"friction","doc":null,"default_value":"","external_name":"friction","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_friction(self, friction)"}},{"id":"mass:Float64-instance-method","html_id":"mass:Float64-instance-method","name":"mass","doc":"Get the mass of the shape if you are having Chipmunk calculate mass properties for you.","summary":"<p>Get the mass of the shape if you are having Chipmunk calculate mass properties for you.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L89","def":{"name":"mass","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.shape_get_mass(self)"}},{"id":"mass=(mass:Number)-instance-method","html_id":"mass=(mass:Number)-instance-method","name":"mass=","doc":"Set the mass of this shape to have Chipmunk calculate mass properties for you.","summary":"<p>Set the mass of this shape to have Chipmunk calculate mass properties for you.</p>","abstract":false,"args":[{"name":"mass","doc":null,"default_value":"","external_name":"mass","restriction":"Number"}],"args_string":"(mass : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L93","def":{"name":"mass=","args":[{"name":"mass","doc":null,"default_value":"","external_name":"mass","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_mass(self, mass)"}},{"id":"moment:Float64-instance-method","html_id":"moment:Float64-instance-method","name":"moment","doc":"Get the calculated moment of inertia for this shape.","summary":"<p>Get the calculated moment of inertia for this shape.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L107","def":{"name":"moment","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.shape_get_moment(self)"}},{"id":"point_query(p:Vect):PointQueryInfo-instance-method","html_id":"point_query(p:Vect):PointQueryInfo-instance-method","name":"point_query","doc":"Perform a nearest point query. It finds the closest point on the surface of shape to a specific point.","summary":"<p>Perform a nearest point query.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Vect"}],"args_string":"(p : Vect) : PointQueryInfo","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L55","def":{"name":"point_query","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"PointQueryInfo","visibility":"Public","body":"LibCP.shape_point_query(self, p, out info)\ninfo\n"}},{"id":"segment_query(a:Vect,b:Vect,radius:Number=0):SegmentQueryInfo?-instance-method","html_id":"segment_query(a:Vect,b:Vect,radius:Number=0):SegmentQueryInfo?-instance-method","name":"segment_query","doc":"Perform a segment query against a shape: check if the line segment from start to end intersects the shape.","summary":"<p>Perform a segment query against a shape: check if the line segment from start to end intersects the shape.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"args_string":"(a : Vect, b : Vect, radius : Number = <span class=\"n\">0</span>) : SegmentQueryInfo?","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L61","def":{"name":"segment_query","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"SegmentQueryInfo | ::Nil","visibility":"Public","body":"if LibCP.shape_segment_query(self, a, b, radius, out info)\n  info\nend"}},{"id":"sensor=(sensor:Bool)-instance-method","html_id":"sensor=(sensor:Bool)-instance-method","name":"sensor=","doc":null,"summary":null,"abstract":false,"args":[{"name":"sensor","doc":null,"default_value":"","external_name":"sensor","restriction":"Bool"}],"args_string":"(sensor : Bool)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L136","def":{"name":"sensor=","args":[{"name":"sensor","doc":null,"default_value":"","external_name":"sensor","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_sensor(self, sensor)"}},{"id":"sensor?:Bool-instance-method","html_id":"sensor?:Bool-instance-method","name":"sensor?","doc":"Is the shape set to be a sensor or not?\n\nSensors only call collision callbacks, and never generate real collisions.","summary":"<p>Is the shape set to be a sensor or not?</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L133","def":{"name":"sensor?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.shape_get_sensor(self)"}},{"id":"space:Space?-instance-method","html_id":"space:Space?-instance-method","name":"space","doc":"The `Space` this shape is added to.","summary":"<p>The <code><a href=\"../CP/Space.html\">Space</a></code> this shape is added to.</p>","abstract":false,"args":[],"args_string":" : Space?","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L73","def":{"name":"space","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Space | ::Nil","visibility":"Public","body":"Space[LibCP.shape_get_space(self)]?"}},{"id":"surface_velocity:Vect-instance-method","html_id":"surface_velocity:Vect-instance-method","name":"surface_velocity","doc":"The surface velocity of this shape.\n\nUseful for creating conveyor belts or players that move around. This\nvalue is only used when calculating friction, not resolving the collision.","summary":"<p>The surface velocity of this shape.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L167","def":{"name":"surface_velocity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.shape_get_surface_velocity(self)"}},{"id":"surface_velocity=(surface_velocity:Vect)-instance-method","html_id":"surface_velocity=(surface_velocity:Vect)-instance-method","name":"surface_velocity=","doc":null,"summary":null,"abstract":false,"args":[{"name":"surface_velocity","doc":null,"default_value":"","external_name":"surface_velocity","restriction":"Vect"}],"args_string":"(surface_velocity : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L170","def":{"name":"surface_velocity=","args":[{"name":"surface_velocity","doc":null,"default_value":"","external_name":"surface_velocity","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.shape_set_surface_velocity(self, surface_velocity)"}},{"id":"update(transform:Transform):BB-instance-method","html_id":"update(transform:Transform):BB-instance-method","name":"update","doc":"Update, cache and return the bounding box of a shape with an explicit transformation.\n\nUseful if you have a shape without a body and want to use it for querying.","summary":"<p>Update, cache and return the bounding box of a shape with an explicit transformation.</p>","abstract":false,"args":[{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":"Transform"}],"args_string":"(transform : Transform) : BB","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L50","def":{"name":"update","args":[{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":"Transform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BB","visibility":"Public","body":"LibCP.shape_update(self, transform)"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Box","path":"CP/Shape/Box.html","kind":"class","full_name":"CP::Shape::Box","name":"Box","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Poly","kind":"class","full_name":"CP::Shape::Poly","name":"Poly"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Poly","kind":"class","full_name":"CP::Shape::Poly","name":"Poly"},{"html_id":"github.com/oprypin/crystal-chipmunk/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/shape.cr","line_number":389,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},"doc":"A special case of a polygon - a rectangle.\n\nThe boxes will always be centered at the center of gravity of the\nbody you are attaching them to. If you want to create an off-center\nbox, you will need to use `Poly`.","summary":"<p>A special case of a polygon - a rectangle.</p>","class_methods":[{"id":"moment(m:Number,width:Number,height:Number):Float64-class-method","html_id":"moment(m:Number,width:Number,height:Number):Float64-class-method","name":"moment","doc":"Calculate the moment of inertia for a solid box.","summary":"<p>Calculate the moment of inertia for a solid box.</p>","abstract":false,"args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Number"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Number"}],"args_string":"(m : Number, width : Number, height : Number) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L391","def":{"name":"moment","args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Number"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.moment_for_box(m, width, height)"}},{"id":"moment(m:Number,box:BB):Float64-class-method","html_id":"moment(m:Number,box:BB):Float64-class-method","name":"moment","doc":"Calculate the moment of inertia for a solid box.","summary":"<p>Calculate the moment of inertia for a solid box.</p>","abstract":false,"args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"box","doc":null,"default_value":"","external_name":"box","restriction":"BB"}],"args_string":"(m : Number, box : BB) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L396","def":{"name":"moment","args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"box","doc":null,"default_value":"","external_name":"box","restriction":"BB"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.moment_for_box2(m, box)"}}],"constructors":[{"id":"new(body:Body?,width:Number,height:Number,radius:Number=0)-class-method","html_id":"new(body:Body?,width:Number,height:Number,radius:Number=0)-class-method","name":"new","doc":"Initialize a box shaped polygon shape with rounded corners.","summary":"<p>Initialize a box shaped polygon shape with rounded corners.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Number"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Number"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"args_string":"(body : Body?, width : Number, height : Number, radius : Number = <span class=\"n\">0</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L401","def":{"name":"new","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Number"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":"Number"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(body, width, height, radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(body:Body?,box:BB,radius:Number=0)-class-method","html_id":"new(body:Body?,box:BB,radius:Number=0)-class-method","name":"new","doc":"Initialize an offset box shaped polygon shape with rounded corners.","summary":"<p>Initialize an offset box shaped polygon shape with rounded corners.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"box","doc":null,"default_value":"","external_name":"box","restriction":"BB"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"args_string":"(body : Body?, box : BB, radius : Number = <span class=\"n\">0</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L407","def":{"name":"new","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"box","doc":null,"default_value":"","external_name":"box","restriction":"BB"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(body, box, radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Circle","path":"CP/Shape/Circle.html","kind":"class","full_name":"CP::Shape::Circle","name":"Circle","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/shape.cr","line_number":195,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr"},{"filename":"chipmunk/unsafe.cr","line_number":37,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},"doc":"A circle shape defined by a radius\n\nThis is the fastest and simplest collision shape","summary":"<p>A circle shape defined by a radius</p>","class_methods":[{"id":"area(r1:Number,r2:Number):Float64-class-method","html_id":"area(r1:Number,r2:Number):Float64-class-method","name":"area","doc":"Calculate area of a hollow circle.\n\n*r1* and *r2* are the inner and outer diameters. A solid circle has an inner diameter of 0.","summary":"<p>Calculate area of a hollow circle.</p>","abstract":false,"args":[{"name":"r1","doc":null,"default_value":"","external_name":"r1","restriction":"Number"},{"name":"r2","doc":null,"default_value":"","external_name":"r2","restriction":"Number"}],"args_string":"(r1 : Number, r2 : Number) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L206","def":{"name":"area","args":[{"name":"r1","doc":null,"default_value":"","external_name":"r1","restriction":"Number"},{"name":"r2","doc":null,"default_value":"","external_name":"r2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.area_for_circle(r1, r2)"}},{"id":"moment(m:Number,r1:Number,r2:Number,offset:Vect=CP::Vect.new(0,0)):Float64-class-method","html_id":"moment(m:Number,r1:Number,r2:Number,offset:Vect=CP::Vect.new(0,0)):Float64-class-method","name":"moment","doc":"Calculate the moment of inertia for a circle.\n\n*r1* and *r2* are the inner and outer diameters. A solid circle has an inner diameter of 0.","summary":"<p>Calculate the moment of inertia for a circle.</p>","abstract":false,"args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"r1","doc":null,"default_value":"","external_name":"r1","restriction":"Number"},{"name":"r2","doc":null,"default_value":"","external_name":"r2","restriction":"Number"},{"name":"offset","doc":null,"default_value":"CP::Vect.new(0, 0)","external_name":"offset","restriction":"Vect"}],"args_string":"(m : Number, r1 : Number, r2 : Number, offset : Vect = <span class=\"t\">CP</span><span class=\"t\">::</span><span class=\"t\">Vect</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>, <span class=\"n\">0</span>)) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L199","def":{"name":"moment","args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"r1","doc":null,"default_value":"","external_name":"r1","restriction":"Number"},{"name":"r2","doc":null,"default_value":"","external_name":"r2","restriction":"Number"},{"name":"offset","doc":null,"default_value":"CP::Vect.new(0, 0)","external_name":"offset","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.moment_for_circle(m, r1, r2, offset)"}}],"constructors":[{"id":"new(body:Body?,radius:Number,offset:Vect=CP::Vect.new(0,0))-class-method","html_id":"new(body:Body?,radius:Number,offset:Vect=CP::Vect.new(0,0))-class-method","name":"new","doc":"The parameters are: the *body* to attach the circle to; the *offset* from the\nbody's center of gravity in body local coordinates.","summary":"<p>The parameters are: the <em>body</em> to attach the circle to; the <em>offset</em> from the body's center of gravity in body local coordinates.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"},{"name":"offset","doc":null,"default_value":"CP::Vect.new(0, 0)","external_name":"offset","restriction":"Vect"}],"args_string":"(body : Body?, radius : Number, offset : Vect = <span class=\"t\">CP</span><span class=\"t\">::</span><span class=\"t\">Vect</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>, <span class=\"n\">0</span>))","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L212","def":{"name":"new","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"},{"name":"offset","doc":null,"default_value":"CP::Vect.new(0, 0)","external_name":"offset","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(body, radius, offset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"offset:Vect-instance-method","html_id":"offset:Vect-instance-method","name":"offset","doc":"Get the offset of a circle shape.","summary":"<p>Get the offset of a circle shape.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L224","def":{"name":"offset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.circle_shape_get_offset(self)"}},{"id":"offset=(offset:Vect)-instance-method","html_id":"offset=(offset:Vect)-instance-method","name":"offset=","doc":"**Unsafe.** Set the offset of a circle shape.\n\nThis change is only picked up as a change to the position\nof the shape's surface, but not its velocity. Changing it will\nnot result in realistic physical behavior. Only use if you know\nwhat you are doing!","summary":"<p><strong>Unsafe.</strong> Set the offset of a circle shape.</p>","abstract":false,"args":[{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Vect"}],"args_string":"(offset : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr#L54","def":{"name":"offset=","args":[{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.circle_shape_set_offset(self, offset)"}},{"id":"radius:Float64-instance-method","html_id":"radius:Float64-instance-method","name":"radius","doc":"Get the radius of a circle shape.","summary":"<p>Get the radius of a circle shape.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L229","def":{"name":"radius","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.circle_shape_get_radius(self)"}},{"id":"radius=(radius:Number)-instance-method","html_id":"radius=(radius:Number)-instance-method","name":"radius=","doc":"**Unsafe.** Set the radius of a circle shape.\n\nThis change is only picked up as a change to the position\nof the shape's surface, but not its velocity. Changing it will\nnot result in realistic physical behavior. Only use if you know\nwhat you are doing!","summary":"<p><strong>Unsafe.</strong> Set the radius of a circle shape.</p>","abstract":false,"args":[{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"args_string":"(radius : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr#L44","def":{"name":"radius=","args":[{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.circle_shape_set_radius(self, radius)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Poly","path":"CP/Shape/Poly.html","kind":"class","full_name":"CP::Shape::Poly","name":"Poly","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/shape.cr","line_number":296,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr"},{"filename":"chipmunk/unsafe.cr","line_number":81,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/oprypin/crystal-chipmunk/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Box","kind":"class","full_name":"CP::Shape::Box","name":"Box"}],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},"doc":"A convex polygon shape\n\nSlowest, but most flexible collision shape.","summary":"<p>A convex polygon shape</p>","class_methods":[{"id":"area(verts:Array(Vect)|Slice(Vect),radius:Number=0):Float64-class-method","html_id":"area(verts:Array(Vect)|Slice(Vect),radius:Number=0):Float64-class-method","name":"area","doc":"Calculate the signed area of a polygon.\n\nA clockwise winding gives positive area.\nThis is probably backwards from what you expect, but matches Chipmunk's winding for poly shapes.","summary":"<p>Calculate the signed area of a polygon.</p>","abstract":false,"args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"args_string":"(verts : Array(Vect) | Slice(Vect), radius : Number = <span class=\"n\">0</span>) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L308","def":{"name":"area","args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.area_for_poly(verts.size, verts, radius)"}},{"id":"centroid(verts:Array(Vect)|Slice(Vect)):Vect-class-method","html_id":"centroid(verts:Array(Vect)|Slice(Vect)):Vect-class-method","name":"centroid","doc":"Calculate the natural centroid of a polygon.","summary":"<p>Calculate the natural centroid of a polygon.</p>","abstract":false,"args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"}],"args_string":"(verts : Array(Vect) | Slice(Vect)) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L313","def":{"name":"centroid","args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.centroid_for_poly(verts.size, verts)"}},{"id":"convex_hull(verts:Array(Vect)|Slice(Vect),tol:Number=0):::Tuple(Slice(Vect),Int32)-class-method","html_id":"convex_hull(verts:Array(Vect)|Slice(Vect),tol:Number=0):::Tuple(Slice(Vect),Int32)-class-method","name":"convex_hull","doc":"Calculate the convex hull of a given set of points.\n\n*tol* is the allowed amount to shrink the hull when simplifying it.\nA tolerance of 0.0 creates an exact hull.\n\nReturns the convex hull and the index where the first vertex\nin the hull came from (i.e. `verts[first] == result[0]`)","summary":"<p>Calculate the convex hull of a given set of points.</p>","abstract":false,"args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"tol","doc":null,"default_value":"0","external_name":"tol","restriction":"Number"}],"args_string":"(verts : Array(Vect) | Slice(Vect), tol : Number = <span class=\"n\">0</span>) : ::Tuple(Slice(Vect), Int32)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L324","def":{"name":"convex_hull","args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"tol","doc":null,"default_value":"0","external_name":"tol","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Slice(Vect), Int32)","visibility":"Public","body":"result = Slice(Vect).new(verts.size)\nLibCP.convex_hull(verts.size, verts, result, out first, tol)\n{result, first}\n"}},{"id":"moment(m:Number,verts:Array(Vect)|Slice(Vect),offset:Vect=CP::Vect.new(0,0),radius:Number=0):Float64-class-method","html_id":"moment(m:Number,verts:Array(Vect)|Slice(Vect),offset:Vect=CP::Vect.new(0,0),radius:Number=0):Float64-class-method","name":"moment","doc":"Calculate the moment of inertia for a solid polygon shape.\n\nAssumes its center of gravity is at its centroid. The offset is added to each vertex.","summary":"<p>Calculate the moment of inertia for a solid polygon shape.</p>","abstract":false,"args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"offset","doc":null,"default_value":"CP::Vect.new(0, 0)","external_name":"offset","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"args_string":"(m : Number, verts : Array(Vect) | Slice(Vect), offset : Vect = <span class=\"t\">CP</span><span class=\"t\">::</span><span class=\"t\">Vect</span>.<span class=\"k\">new</span>(<span class=\"n\">0</span>, <span class=\"n\">0</span>), radius : Number = <span class=\"n\">0</span>) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L300","def":{"name":"moment","args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"offset","doc":null,"default_value":"CP::Vect.new(0, 0)","external_name":"offset","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.moment_for_poly(m, verts.size, verts, offset, radius)"}}],"constructors":[{"id":"new(body:Body?,verts:Array(Vect)|Slice(Vect),transform:Transform=Transform::IDENTITY,radius:Number=0)-class-method","html_id":"new(body:Body?,verts:Array(Vect)|Slice(Vect),transform:Transform=Transform::IDENTITY,radius:Number=0)-class-method","name":"new","doc":"Initialize a polygon shape with rounded corners.\nA convex hull will be created from the vertices.\n\nThe parameters are: the *body* to attach the poly to; the *verts* (vertices) of the polygon;\nthe *transform* to apply to every vertex; the radius of the corners.\n\nAdding a small radius will bevel the corners and can significantly reduce problems\nwhere the poly gets stuck on seams in your geometry.","summary":"<p>Initialize a polygon shape with rounded corners.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"transform","doc":null,"default_value":"Transform::IDENTITY","external_name":"transform","restriction":"Transform"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"args_string":"(body : Body?, verts : Array(Vect) | Slice(Vect), transform : Transform = <span class=\"t\">Transform</span><span class=\"t\">::</span><span class=\"t\">IDENTITY</span>, radius : Number = <span class=\"n\">0</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L341","def":{"name":"new","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"transform","doc":null,"default_value":"Transform::IDENTITY","external_name":"transform","restriction":"Transform"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(body, verts, transform, radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(body:Body?,verts:Array(Vect)|Slice(Vect),radius:Number)-class-method","html_id":"new(body:Body?,verts:Array(Vect)|Slice(Vect),radius:Number)-class-method","name":"new","doc":"Initialize a polygon shape with rounded corners.\nThe vertices must be convex with a counter-clockwise winding.","summary":"<p>Initialize a polygon shape with rounded corners.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"args_string":"(body : Body?, verts : Array(Vect) | Slice(Vect), radius : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L348","def":{"name":"new","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(body, verts, radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"radius:Float64-instance-method","html_id":"radius:Float64-instance-method","name":"radius","doc":"Get the radius of a polygon shape.","summary":"<p>Get the radius of a polygon shape.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L379","def":{"name":"radius","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.poly_shape_get_radius(self)"}},{"id":"radius=(radius:Number)-instance-method","html_id":"radius=(radius:Number)-instance-method","name":"radius=","doc":"**Unsafe.** Set the radius of a poly shape.\n\nThis change is only picked up as a change to the position\nof the shape's surface, but not its velocity. Changing it will\nnot result in realistic physical behavior. Only use if you know\nwhat you are doing!","summary":"<p><strong>Unsafe.</strong> Set the radius of a poly shape.</p>","abstract":false,"args":[{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"args_string":"(radius : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr#L98","def":{"name":"radius=","args":[{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.poly_shape_set_radius(self, radius)"}},{"id":"set_verts(verts:Array(Vect)|Slice(Vect),transform:Transform=Transform::IDENTITY)-instance-method","html_id":"set_verts(verts:Array(Vect)|Slice(Vect),transform:Transform=Transform::IDENTITY)-instance-method","name":"set_verts","doc":"**Unsafe.** Set the vertices of a poly shape.\n\nThis change is only picked up as a change to the position\nof the shape's surface, but not its velocity. Changing it will\nnot result in realistic physical behavior. Only use if you know\nwhat you are doing!","summary":"<p><strong>Unsafe.</strong> Set the vertices of a poly shape.</p>","abstract":false,"args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"transform","doc":null,"default_value":"Transform::IDENTITY","external_name":"transform","restriction":"Transform"}],"args_string":"(verts : Array(Vect) | Slice(Vect), transform : Transform = <span class=\"t\">Transform</span><span class=\"t\">::</span><span class=\"t\">IDENTITY</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr#L88","def":{"name":"set_verts","args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Array(Vect) | Slice(Vect)"},{"name":"transform","doc":null,"default_value":"Transform::IDENTITY","external_name":"transform","restriction":"Transform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.poly_shape_set_verts(self, verts.size, verts, transform)"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Get the number of verts in a polygon shape.","summary":"<p>Get the number of verts in a polygon shape.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L365","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"LibCP.poly_shape_get_count(self)"}},{"id":"unsafe_fetch(index:Int):Vect-instance-method","html_id":"unsafe_fetch(index:Int):Vect-instance-method","name":"unsafe_fetch","doc":"Get the *i*-th vertex of a polygon shape.","summary":"<p>Get the <em>i</em>-th vertex of a polygon shape.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L370","def":{"name":"unsafe_fetch","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.poly_shape_get_vert(self, index.to_i32)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape/Segment","path":"CP/Shape/Segment.html","kind":"class","full_name":"CP::Shape::Segment","name":"Segment","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/shape.cr","line_number":237,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr"},{"filename":"chipmunk/unsafe.cr","line_number":59,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Shape","kind":"class","full_name":"CP::Shape","name":"Shape"},"doc":"A line segment shape between two points.\n\nMeant mainly as a static shape. Can be beveled in order to give them a thickness.","summary":"<p>A line segment shape between two points.</p>","class_methods":[{"id":"area(a:Vect,b:Vect,radius:Number):Float64-class-method","html_id":"area(a:Vect,b:Vect,radius:Number):Float64-class-method","name":"area","doc":"Calculate the area of a fattened (capsule shaped) line segment.","summary":"<p>Calculate the area of a fattened (capsule shaped) line segment.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"args_string":"(a : Vect, b : Vect, radius : Number) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L246","def":{"name":"area","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.area_for_segment(a, b, radius)"}},{"id":"moment(m:Number,a:Vect,b:Vect,radius:Number=0):Float64-class-method","html_id":"moment(m:Number,a:Vect,b:Vect,radius:Number=0):Float64-class-method","name":"moment","doc":"Calculate the moment of inertia for a line segment.\n\nBeveling radius is not supported.","summary":"<p>Calculate the moment of inertia for a line segment.</p>","abstract":false,"args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"args_string":"(m : Number, a : Vect, b : Vect, radius : Number = <span class=\"n\">0</span>) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L241","def":{"name":"moment","args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Number"},{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.moment_for_segment(m, a, b, radius)"}}],"constructors":[{"id":"new(body:Body?,a:Vect,b:Vect,radius:Number=0)-class-method","html_id":"new(body:Body?,a:Vect,b:Vect,radius:Number=0)-class-method","name":"new","doc":"The parameters are: the *body* to attach the segment to; the endpoints (*a*, *b*) to attach the segment to;\nthe *radius* of the half-circles at the ends of the segment (thickness is twice the radius).","summary":"<p>The parameters are: the <em>body</em> to attach the segment to; the endpoints (<em>a</em>, <em>b</em>) to attach the segment to; the <em>radius</em> of the half-circles at the ends of the segment (thickness is twice the radius).</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"args_string":"(body : Body?, a : Vect, b : Vect, radius : Number = <span class=\"n\">0</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L252","def":{"name":"new","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body | ::Nil"},{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(body, a, b, radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"a:Vect-instance-method","html_id":"a:Vect-instance-method","name":"a","doc":"Get the first endpoint of a segment shape.","summary":"<p>Get the first endpoint of a segment shape.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L274","def":{"name":"a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.segment_shape_get_a(self)"}},{"id":"b:Vect-instance-method","html_id":"b:Vect-instance-method","name":"b","doc":"Get the second endpoint of a segment shape.","summary":"<p>Get the second endpoint of a segment shape.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L278","def":{"name":"b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.segment_shape_get_b(self)"}},{"id":"normal:Vect-instance-method","html_id":"normal:Vect-instance-method","name":"normal","doc":"Get the normal of a segment shape.","summary":"<p>Get the normal of a segment shape.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L283","def":{"name":"normal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.segment_shape_get_normal(self)"}},{"id":"radius:Float64-instance-method","html_id":"radius:Float64-instance-method","name":"radius","doc":"Get the radius of a segment shape.","summary":"<p>Get the radius of a segment shape.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L288","def":{"name":"radius","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.segment_shape_get_radius(self)"}},{"id":"radius=(radius:Number)-instance-method","html_id":"radius=(radius:Number)-instance-method","name":"radius=","doc":"**Unsafe.** Set the radius of a segment shape.\n\nThis change is only picked up as a change to the position\nof the shape's surface, but not its velocity. Changing it will\nnot result in realistic physical behavior. Only use if you know\nwhat you are doing!","summary":"<p><strong>Unsafe.</strong> Set the radius of a segment shape.</p>","abstract":false,"args":[{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"args_string":"(radius : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr#L76","def":{"name":"radius=","args":[{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.segment_shape_set_radius(self, radius)"}},{"id":"set_endpoints(a:Vect,b:Vect)-instance-method","html_id":"set_endpoints(a:Vect,b:Vect)-instance-method","name":"set_endpoints","doc":"**Unsafe.** Set the endpoints of a segment shape.\n\nThis change is only picked up as a change to the position\nof the shape's surface, but not its velocity. Changing it will\nnot result in realistic physical behavior. Only use if you know\nwhat you are doing!","summary":"<p><strong>Unsafe.</strong> Set the endpoints of a segment shape.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"}],"args_string":"(a : Vect, b : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/unsafe.cr#L66","def":{"name":"set_endpoints","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.segment_shape_set_endpoints(self, a, b)"}},{"id":"set_neighbors(prev:Vect,nextnext_:Vect)-instance-method","html_id":"set_neighbors(prev:Vect,nextnext_:Vect)-instance-method","name":"set_neighbors","doc":"Let Chipmunk know about the geometry of adjacent segments to avoid colliding with endcaps.\n\nWhen you have a number of segment shapes that are all joined\ntogether, things can still collide with the \"cracks\" between the\nsegments. By setting the neighbor segment endpoints you can tell\nChipmunk to avoid colliding with the inner parts of the crack.","summary":"<p>Let Chipmunk know about the geometry of adjacent segments to avoid colliding with endcaps.</p>","abstract":false,"args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":"Vect"},{"name":"next_","doc":null,"default_value":"","external_name":"next","restriction":"Vect"}],"args_string":"(prev : Vect, next next_ : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/shape.cr#L269","def":{"name":"set_neighbors","args":[{"name":"prev","doc":null,"default_value":"","external_name":"prev","restriction":"Vect"},{"name":"next_","doc":null,"default_value":"","external_name":"next","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.segment_shape_set_neighbors(self, prev, next_)"}}],"macros":[],"types":[]}]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/ShapeFilter","path":"CP/ShapeFilter.html","kind":"struct","full_name":"CP::ShapeFilter","name":"ShapeFilter","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/query.cr","line_number":118,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"ALL","name":"ALL","value":"new(NO_GROUP, ALL_CATEGORIES, ALL_CATEGORIES)","doc":"Collision filter value for a shape that will collide with anything except `NONE`.","summary":"<p>Collision filter value for a shape that will collide with anything except <code><a href=\"../CP/ShapeFilter.html#NONE\">NONE</a></code>.</p>"},{"id":"ALL_CATEGORIES","name":"ALL_CATEGORIES","value":"~(Bitmask.new(0))","doc":"Value for signifying that a shape is in every category.","summary":"<p>Value for signifying that a shape is in every category.</p>"},{"id":"NO_GROUP","name":"NO_GROUP","value":"Group.new(0)","doc":"Value signifying that a shape is in no group.","summary":"<p>Value signifying that a shape is in no group.</p>"},{"id":"NONE","name":"NONE","value":"new(NO_GROUP, ~ALL_CATEGORIES, ~ALL_CATEGORIES)","doc":"Collision filter value for a shape that does not collide with anything.","summary":"<p>Collision filter value for a shape that does not collide with anything.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Fast collision filtering type that is used to determine if two objects collide before calling\ncollision or query callbacks.\n\nChipmunk has two primary means of ignoring collisions: groups and\ncategory masks.\n\nGroups are used to ignore collisions between parts on a complex object. A\nragdoll is a good example. When jointing an arm onto the torso, you'll\nwant them to allow them to overlap. Groups allow you to do exactly that.\nShapes that have the same group don't generate collisions. So by placing\nall of the shapes in a ragdoll in the same group, you'll prevent it from\ncolliding against other parts of itself.\n\nCategory masks allow you to mark which categories an object belongs to\nand which categories it collidies with. By default, objects exist in\nevery category and collide with every category.\n\nThe type of categories and mask in `ShapeFilter` is `UInt32`.\n\nThere is one last way of filtering collisions using collision handlers.\nSee the section on callbacks for more information. Collision handlers can\nbe more flexible, but can be slower. Fast collision filtering rejects\ncollisions before running the expensive collision detection code, so\nusing groups or category masks is preferred.","summary":"<p>Fast collision filtering type that is used to determine if two objects collide before calling collision or query callbacks.</p>","class_methods":[],"constructors":[{"id":"new(group:Int=NO_GROUP,categories:Int=ALL_CATEGORIES,mask:Int=ALL_CATEGORIES)-class-method","html_id":"new(group:Int=NO_GROUP,categories:Int=ALL_CATEGORIES,mask:Int=ALL_CATEGORIES)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"group","doc":null,"default_value":"NO_GROUP","external_name":"group","restriction":"Int"},{"name":"categories","doc":null,"default_value":"ALL_CATEGORIES","external_name":"categories","restriction":"Int"},{"name":"mask","doc":null,"default_value":"ALL_CATEGORIES","external_name":"mask","restriction":"Int"}],"args_string":"(group : Int = <span class=\"t\">NO_GROUP</span>, categories : Int = <span class=\"t\">ALL_CATEGORIES</span>, mask : Int = <span class=\"t\">ALL_CATEGORIES</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L149","def":{"name":"new","args":[{"name":"group","doc":null,"default_value":"NO_GROUP","external_name":"group","restriction":"Int"},{"name":"categories","doc":null,"default_value":"ALL_CATEGORIES","external_name":"categories","restriction":"Int"},{"name":"mask","doc":null,"default_value":"ALL_CATEGORIES","external_name":"mask","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(group, categories, mask)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"categories:Bitmask-instance-method","html_id":"categories:Bitmask-instance-method","name":"categories","doc":"A bitmask of user definable categories that this object belongs to.\n\nThe category/mask combinations of both objects in a collision must agree for a collision to occur.","summary":"<p>A bitmask of user definable categories that this object belongs to.</p>","abstract":false,"args":[],"args_string":" : Bitmask","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L141","def":{"name":"categories","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bitmask","visibility":"Public","body":"@categories"}},{"id":"categories=(categories:Bitmask)-instance-method","html_id":"categories=(categories:Bitmask)-instance-method","name":"categories=","doc":null,"summary":null,"abstract":false,"args":[{"name":"categories","doc":null,"default_value":"","external_name":"categories","restriction":"Bitmask"}],"args_string":"(categories : Bitmask)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L142","def":{"name":"categories=","args":[{"name":"categories","doc":null,"default_value":"","external_name":"categories","restriction":"Bitmask"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@categories = categories"}},{"id":"group:Group-instance-method","html_id":"group:Group-instance-method","name":"group","doc":"Two objects with the same non-zero group value do not collide.\n\nThis is generally used to group objects in a composite object together to disable self collisions.","summary":"<p>Two objects with the same non-zero group value do not collide.</p>","abstract":false,"args":[],"args_string":" : Group","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L136","def":{"name":"group","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Group","visibility":"Public","body":"@group"}},{"id":"group=(group:Group)-instance-method","html_id":"group=(group:Group)-instance-method","name":"group=","doc":null,"summary":null,"abstract":false,"args":[{"name":"group","doc":null,"default_value":"","external_name":"group","restriction":"Group"}],"args_string":"(group : Group)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L137","def":{"name":"group=","args":[{"name":"group","doc":null,"default_value":"","external_name":"group","restriction":"Group"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@group = group"}},{"id":"mask:Bitmask-instance-method","html_id":"mask:Bitmask-instance-method","name":"mask","doc":"A bitmask of user definable category types that this object object collides with.\n\nThe category/mask combinations of both objects in a collision must agree for a collision to occur.","summary":"<p>A bitmask of user definable category types that this object object collides with.</p>","abstract":false,"args":[],"args_string":" : Bitmask","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L146","def":{"name":"mask","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bitmask","visibility":"Public","body":"@mask"}},{"id":"mask=(mask:Bitmask)-instance-method","html_id":"mask=(mask:Bitmask)-instance-method","name":"mask=","doc":null,"summary":null,"abstract":false,"args":[{"name":"mask","doc":null,"default_value":"","external_name":"mask","restriction":"Bitmask"}],"args_string":"(mask : Bitmask)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr#L147","def":{"name":"mask=","args":[{"name":"mask","doc":null,"default_value":"","external_name":"mask","restriction":"Bitmask"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mask = mask"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/ShapeFilter/Bitmask","path":"CP/ShapeFilter/Bitmask.html","kind":"alias","full_name":"CP::ShapeFilter::Bitmask","name":"Bitmask","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"chipmunk/query.cr","line_number":120,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":true,"aliased":"UInt32","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/ShapeFilter","kind":"struct","full_name":"CP::ShapeFilter","name":"ShapeFilter"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/ShapeFilter/Group","path":"CP/ShapeFilter/Group.html","kind":"alias","full_name":"CP::ShapeFilter::Group","name":"Group","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"chipmunk/query.cr","line_number":119,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/query.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":true,"aliased":"UInt64","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/ShapeFilter","kind":"struct","full_name":"CP::ShapeFilter","name":"ShapeFilter"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space","path":"CP/Space.html","kind":"class","full_name":"CP::Space","name":"Space","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/debug_draw.cr","line_number":24,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr"},{"filename":"chipmunk/space.cr","line_number":26,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Spaces are the basic unit of simulation. You add rigid bodies, shapes\nand joints to it and then step them all forward together through time.","summary":"<p>Spaces are the basic unit of simulation.</p>","class_methods":[],"constructors":[{"id":"new(*,threaded:Bool=true)-class-method","html_id":"new(*,threaded:Bool=true)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"threaded","doc":null,"default_value":"true","external_name":"threaded","restriction":"Bool"}],"args_string":"(*, threaded : Bool = <span class=\"n\">true</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L29","def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"threaded","doc":null,"default_value":"true","external_name":"threaded","restriction":"Bool"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(threaded: threaded)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add(body:Body):Body-instance-method","html_id":"add(body:Body):Body-instance-method","name":"add","doc":"Add a body to the simulation.\n\nIf this method is called during a simulation step, the addition will be delayed until the step is finished.\n\nReturns the same `Body`, for convenience.","summary":"<p>Add a body to the simulation.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body"}],"args_string":"(body : Body) : Body","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"add","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Body","visibility":"Public","body":"if @in_step\n  @todo[body] = true\nelse\n  LibCP.space_add_body(self, body)\n  @bodies << body\nend\nbody\n"}},{"id":"add(*items:Shape|Body|Constraint)-instance-method","html_id":"add(*items:Shape|Body|Constraint)-instance-method","name":"add","doc":"Add multiple items","summary":"<p>Add multiple items</p>","abstract":false,"args":[{"name":"items","doc":null,"default_value":"","external_name":"items","restriction":"Shape | Body | Constraint"}],"args_string":"(*items : Shape | Body | Constraint)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L258","def":{"name":"add","args":[{"name":"items","doc":null,"default_value":"","external_name":"items","restriction":"Shape | Body | Constraint"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"items.each do |item|\n  add(item)\nend"}},{"id":"add(constraint:Constraint):Constraint-instance-method","html_id":"add(constraint:Constraint):Constraint-instance-method","name":"add","doc":"Add a constraint to the simulation.\n\nIf this method is called during a simulation step, the addition will be delayed until the step is finished.\n\nReturns the same `Constraint`, for convenience.","summary":"<p>Add a constraint to the simulation.</p>","abstract":false,"args":[{"name":"constraint","doc":null,"default_value":"","external_name":"constraint","restriction":"Constraint"}],"args_string":"(constraint : Constraint) : Constraint","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"add","args":[{"name":"constraint","doc":null,"default_value":"","external_name":"constraint","restriction":"Constraint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Constraint","visibility":"Public","body":"if @in_step\n  @todo[constraint] = true\nelse\n  LibCP.space_add_constraint(self, constraint)\n  @constraints << constraint\nend\nconstraint\n"}},{"id":"add(shape:Shape):Shape-instance-method","html_id":"add(shape:Shape):Shape-instance-method","name":"add","doc":"Add a shape to the simulation.\n\nIf the collision shape is attached to a static body, it will be added as a static shape.\n\nIf this method is called during a simulation step, the addition will be delayed until the step is finished.\n\nReturns the same `Shape`, for convenience.","summary":"<p>Add a shape to the simulation.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape) : Shape","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"add","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Shape","visibility":"Public","body":"if @in_step\n  @todo[shape] = true\nelse\n  LibCP.space_add_shape(self, shape)\n  @shapes << shape\nend\nshape\n"}},{"id":"add_collision_handler(a:Int,b:Int,handler:CollisionHandler):CollisionHandler-instance-method","html_id":"add_collision_handler(a:Int,b:Int,handler:CollisionHandler):CollisionHandler-instance-method","name":"add_collision_handler","doc":"Whenever shapes with collision types *a* and *b* collide,\nthis handler will be used to process the collision events.\n\nIf wildcard handlers are used with either of the collision types,\nit's the responibility of the custom handler to invoke the wildcard handlers.","summary":"<p>Whenever shapes with collision types <em>a</em> and <em>b</em> collide, this handler will be used to process the collision events.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Int"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Int"},{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"CollisionHandler"}],"args_string":"(a : Int, b : Int, handler : CollisionHandler) : CollisionHandler","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L181","def":{"name":"add_collision_handler","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Int"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Int"},{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"CollisionHandler"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CollisionHandler","visibility":"Public","body":"@collision_handlers << handler\nhandler.prime!(LibCP.space_add_collision_handler(self, a, b))\n"}},{"id":"add_collision_handler(type:Int,handler:CollisionHandler):CollisionHandler-instance-method","html_id":"add_collision_handler(type:Int,handler:CollisionHandler):CollisionHandler-instance-method","name":"add_collision_handler","doc":"Set a wildcard collision handler for the specified type.\n\nThis handler will be used any time an object with this type collides\nwith another object, regardless of its type.","summary":"<p>Set a wildcard collision handler for the specified type.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Int"},{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"CollisionHandler"}],"args_string":"(type : Int, handler : CollisionHandler) : CollisionHandler","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L190","def":{"name":"add_collision_handler","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Int"},{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"CollisionHandler"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CollisionHandler","visibility":"Public","body":"@collision_handlers << handler\nhandler.prime!(LibCP.space_add_wildcard_handler(self, type))\n"}},{"id":"add_collision_handler(handler:CollisionHandler):CollisionHandler-instance-method","html_id":"add_collision_handler(handler:CollisionHandler):CollisionHandler-instance-method","name":"add_collision_handler","doc":"Set a collision handler that is called for all collisions that are not\nhandled by a more specific collision handler.","summary":"<p>Set a collision handler that is called for all collisions that are not handled by a more specific collision handler.</p>","abstract":false,"args":[{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"CollisionHandler"}],"args_string":"(handler : CollisionHandler) : CollisionHandler","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L197","def":{"name":"add_collision_handler","args":[{"name":"handler","doc":null,"default_value":"","external_name":"handler","restriction":"CollisionHandler"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"CollisionHandler","visibility":"Public","body":"@collision_handlers << handler\nhandler.prime!(LibCP.space_add_default_collision_handler(self))\n"}},{"id":"bb_query(bb:BB,filter:ShapeFilter=ShapeFilter::ALL):Array(Shape)-instance-method","html_id":"bb_query(bb:BB,filter:ShapeFilter=ShapeFilter::ALL):Array(Shape)-instance-method","name":"bb_query","doc":"Perform a fast rectangle query on the space, yielding each shape found.\n\nOnly the shapes' bounding boxes are checked for overlap, not their full shape.","summary":"<p>Perform a fast rectangle query on the space, yielding each shape found.</p>","abstract":false,"args":[{"name":"bb","doc":null,"default_value":"","external_name":"bb","restriction":"BB"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(bb : BB, filter : ShapeFilter = <span class=\"t\">ShapeFilter</span><span class=\"t\">::</span><span class=\"t\">ALL</span>) : Array(Shape)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L317","def":{"name":"bb_query","args":[{"name":"bb","doc":null,"default_value":"","external_name":"bb","restriction":"BB"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Shape)","visibility":"Public","body":"result = [] of Shape\nbb_query(bb, filter) do |item|\n  result << item\nend\nresult\n"}},{"id":"bb_query(bb:BB,filter:ShapeFilter=ShapeFilter::ALL,&block:Shape->)-instance-method","html_id":"bb_query(bb:BB,filter:ShapeFilter=ShapeFilter::ALL,&amp;block:Shape-&gt;)-instance-method","name":"bb_query","doc":"Perform a fast rectangle query on the space, yielding each shape found.\n\nOnly the shapes' bounding boxes are checked for overlap, not their full shape.","summary":"<p>Perform a fast rectangle query on the space, yielding each shape found.</p>","abstract":false,"args":[{"name":"bb","doc":null,"default_value":"","external_name":"bb","restriction":"BB"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(bb : BB, filter : ShapeFilter = <span class=\"t\">ShapeFilter</span><span class=\"t\">::</span><span class=\"t\">ALL</span>, &block : Shape -> )","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L318","def":{"name":"bb_query","args":[{"name":"bb","doc":null,"default_value":"","external_name":"bb","restriction":"BB"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Shape -> )"},"return_type":"","visibility":"Public","body":"LibCP.space_bb_query(self, bb, filter, ->(shape, data) do\n  (data.as(::Pointer(typeof(block)))).value.call(Shape[shape])\nend, pointerof(block))"}},{"id":"bodies:Set(Body)-instance-method","html_id":"bodies:Set(Body)-instance-method","name":"bodies","doc":"Get all the bodies that are added to the space.","summary":"<p>Get all the bodies that are added to the space.</p>","abstract":false,"args":[],"args_string":" : Set(Body)","source_link":null,"def":{"name":"bodies","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(Body)","visibility":"Public","body":"@bodies"}},{"id":"collision_bias:Float64-instance-method","html_id":"collision_bias:Float64-instance-method","name":"collision_bias","doc":"Determines how fast overlapping shapes are pushed apart.\n\nExpressed as a fraction of the error remaining after each second.\nDefaults to `(1.0 - 0.1)**60.0` meaning that Chipmunk fixes 10% of overlap each frame at 60Hz.","summary":"<p>Determines how fast overlapping shapes are pushed apart.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L139","def":{"name":"collision_bias","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.space_get_collision_bias(self)"}},{"id":"collision_bias=(collision_bias:Number)-instance-method","html_id":"collision_bias=(collision_bias:Number)-instance-method","name":"collision_bias=","doc":null,"summary":null,"abstract":false,"args":[{"name":"collision_bias","doc":null,"default_value":"","external_name":"collision_bias","restriction":"Number"}],"args_string":"(collision_bias : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L142","def":{"name":"collision_bias=","args":[{"name":"collision_bias","doc":null,"default_value":"","external_name":"collision_bias","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_set_collision_bias(self, collision_bias)"}},{"id":"collision_persistence:Timestamp-instance-method","html_id":"collision_persistence:Timestamp-instance-method","name":"collision_persistence","doc":"Number of frames that contact information should persist.\n\nDefaults to 3. There is probably never a reason to change this value.","summary":"<p>Number of frames that contact information should persist.</p>","abstract":false,"args":[],"args_string":" : Timestamp","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L149","def":{"name":"collision_persistence","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Timestamp","visibility":"Public","body":"LibCP.space_get_collision_persistence(self)"}},{"id":"collision_persistence=(collision_persistence:Timestamp)-instance-method","html_id":"collision_persistence=(collision_persistence:Timestamp)-instance-method","name":"collision_persistence=","doc":null,"summary":null,"abstract":false,"args":[{"name":"collision_persistence","doc":null,"default_value":"","external_name":"collision_persistence","restriction":"Timestamp"}],"args_string":"(collision_persistence : Timestamp)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L152","def":{"name":"collision_persistence=","args":[{"name":"collision_persistence","doc":null,"default_value":"","external_name":"collision_persistence","restriction":"Timestamp"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_set_collision_persistence(self, collision_persistence)"}},{"id":"collision_slop:Float64-instance-method","html_id":"collision_slop:Float64-instance-method","name":"collision_slop","doc":"Amount of encouraged penetration between colliding shapes.\n\nUsed to reduce oscillating contacts and keep the collision cache warm.\nDefaults to 0.1. If you have poor simulation quality,\nincrease this number as much as possible without allowing visible amounts of overlap.","summary":"<p>Amount of encouraged penetration between colliding shapes.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L128","def":{"name":"collision_slop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.space_get_collision_slop(self)"}},{"id":"collision_slop=(collision_slop:Number)-instance-method","html_id":"collision_slop=(collision_slop:Number)-instance-method","name":"collision_slop=","doc":null,"summary":null,"abstract":false,"args":[{"name":"collision_slop","doc":null,"default_value":"","external_name":"collision_slop","restriction":"Number"}],"args_string":"(collision_slop : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L131","def":{"name":"collision_slop=","args":[{"name":"collision_slop","doc":null,"default_value":"","external_name":"collision_slop","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_set_collision_slop(self, collision_slop)"}},{"id":"constraints:Set(Constraint)-instance-method","html_id":"constraints:Set(Constraint)-instance-method","name":"constraints","doc":"Get all the constraints that are added to the space.","summary":"<p>Get all the constraints that are added to the space.</p>","abstract":false,"args":[],"args_string":" : Set(Constraint)","source_link":null,"def":{"name":"constraints","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(Constraint)","visibility":"Public","body":"@constraints"}},{"id":"contains?(constraint:Constraint):Bool-instance-method","html_id":"contains?(constraint:Constraint):Bool-instance-method","name":"contains?","doc":"Test if a constraint has been added to the space.","summary":"<p>Test if a constraint has been added to the space.</p>","abstract":false,"args":[{"name":"constraint","doc":null,"default_value":"","external_name":"constraint","restriction":"Constraint"}],"args_string":"(constraint : Constraint) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"contains?","args":[{"name":"constraint","doc":null,"default_value":"","external_name":"constraint","restriction":"Constraint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@constraints.includes?(constraint)"}},{"id":"contains?(shape:Shape):Bool-instance-method","html_id":"contains?(shape:Shape):Bool-instance-method","name":"contains?","doc":"Test if a shape has been added to the space.","summary":"<p>Test if a shape has been added to the space.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"contains?","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@shapes.includes?(shape)"}},{"id":"contains?(body:Body):Bool-instance-method","html_id":"contains?(body:Body):Bool-instance-method","name":"contains?","doc":"Test if a body has been added to the space.","summary":"<p>Test if a body has been added to the space.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body"}],"args_string":"(body : Body) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"contains?","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@bodies.includes?(body)"}},{"id":"current_time_step:Float64-instance-method","html_id":"current_time_step:Float64-instance-method","name":"current_time_step","doc":"Returns the current (or most recent) time step used with the given space.\n\nUseful from callbacks if your time step is not a compile-time global.","summary":"<p>Returns the current (or most recent) time step used with the given space.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L167","def":{"name":"current_time_step","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.space_get_current_time_step(self)"}},{"id":"damping:Float64-instance-method","html_id":"damping:Float64-instance-method","name":"damping","doc":"Damping rate expressed as the fraction of velocity bodies retain each second.\n\nA value of 0.9 would mean that each body's velocity will drop 10% per second.\nThe default value is 1.0, meaning no damping is applied.\n\n*Note:* This damping value is different than those of `DampedSpring` and `DampedRotarySpring`.","summary":"<p>Damping rate expressed as the fraction of velocity bodies retain each second.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L95","def":{"name":"damping","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.space_get_damping(self)"}},{"id":"damping=(damping:Number)-instance-method","html_id":"damping=(damping:Number)-instance-method","name":"damping=","doc":null,"summary":null,"abstract":false,"args":[{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"args_string":"(damping : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L98","def":{"name":"damping=","args":[{"name":"damping","doc":null,"default_value":"","external_name":"damping","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_set_damping(self, damping)"}},{"id":"each_body(&block:Body->)-instance-method","html_id":"each_body(&amp;block:Body-&gt;)-instance-method","name":"each_body","doc":"Yield each body in the space.","summary":"<p>Yield each body in the space.</p>","abstract":false,"args":[],"args_string":"(&block : Body -> )","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"each_body","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Body -> )"},"return_type":"","visibility":"Public","body":"@bodies.each do |x|\n  yield x\nend"}},{"id":"each_constraint(&block:Constraint->)-instance-method","html_id":"each_constraint(&amp;block:Constraint-&gt;)-instance-method","name":"each_constraint","doc":"Yield each constraint in the space.","summary":"<p>Yield each constraint in the space.</p>","abstract":false,"args":[],"args_string":"(&block : Constraint -> )","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"each_constraint","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Constraint -> )"},"return_type":"","visibility":"Public","body":"@constraints.each do |x|\n  yield x\nend"}},{"id":"each_shape(&block:Shape->)-instance-method","html_id":"each_shape(&amp;block:Shape-&gt;)-instance-method","name":"each_shape","doc":"Yield each shape in the space.","summary":"<p>Yield each shape in the space.</p>","abstract":false,"args":[],"args_string":"(&block : Shape -> )","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"each_shape","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Shape -> )"},"return_type":"","visibility":"Public","body":"@shapes.each do |x|\n  yield x\nend"}},{"id":"gravity:Vect-instance-method","html_id":"gravity:Vect-instance-method","name":"gravity","doc":"Gravity to pass to rigid bodies when integrating velocity.\n\nDefaults to (0,0).","summary":"<p>Gravity to pass to rigid bodies when integrating velocity.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L82","def":{"name":"gravity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"LibCP.space_get_gravity(self)"}},{"id":"gravity=(gravity:Vect)-instance-method","html_id":"gravity=(gravity:Vect)-instance-method","name":"gravity=","doc":null,"summary":null,"abstract":false,"args":[{"name":"gravity","doc":null,"default_value":"","external_name":"gravity","restriction":"Vect"}],"args_string":"(gravity : Vect)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L85","def":{"name":"gravity=","args":[{"name":"gravity","doc":null,"default_value":"","external_name":"gravity","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_set_gravity(self, gravity)"}},{"id":"idle_speed_threshold:Float64-instance-method","html_id":"idle_speed_threshold:Float64-instance-method","name":"idle_speed_threshold","doc":"Speed threshold for a body to be considered idle.\n\nThe default value of 0 means to let the space guess a good threshold based on gravity.","summary":"<p>Speed threshold for a body to be considered idle.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L105","def":{"name":"idle_speed_threshold","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.space_get_idle_speed_threshold(self)"}},{"id":"idle_speed_threshold=(idle_speed_threshold:Number)-instance-method","html_id":"idle_speed_threshold=(idle_speed_threshold:Number)-instance-method","name":"idle_speed_threshold=","doc":null,"summary":null,"abstract":false,"args":[{"name":"idle_speed_threshold","doc":null,"default_value":"","external_name":"idle_speed_threshold","restriction":"Number"}],"args_string":"(idle_speed_threshold : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L108","def":{"name":"idle_speed_threshold=","args":[{"name":"idle_speed_threshold","doc":null,"default_value":"","external_name":"idle_speed_threshold","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_set_idle_speed_threshold(self, idle_speed_threshold)"}},{"id":"iterations:Int32-instance-method","html_id":"iterations:Int32-instance-method","name":"iterations","doc":"Number of iterations to use in the impulse solver to solve contacts and other constraints.\n\nChipmunk uses an iterative solver to figure out the forces between\nobjects in the space. What this means is that it builds a big list of\nall of the collisions, joints, and other constraints between the\nbodies and makes several passes over the list considering each one\nindividually. The number of passes it makes is the iteration count,\nand each iteration makes the solution more accurate. If you use too\nmany iterations, the physics should look nice and solid, but may use\nup too much CPU time. If you use too few iterations, the simulation\nmay seem mushy or bouncy when the objects should be solid. Setting\nthe number of iterations lets you balance between CPU usage and the\naccuracy of the physics. Chipmunk's default of 10 iterations is\nsufficient for most simple games.","summary":"<p>Number of iterations to use in the impulse solver to solve contacts and other constraints.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L72","def":{"name":"iterations","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"LibCP.space_get_iterations(self)"}},{"id":"iterations=(iterations:Int)-instance-method","html_id":"iterations=(iterations:Int)-instance-method","name":"iterations=","doc":null,"summary":null,"abstract":false,"args":[{"name":"iterations","doc":null,"default_value":"","external_name":"iterations","restriction":"Int"}],"args_string":"(iterations : Int)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L75","def":{"name":"iterations=","args":[{"name":"iterations","doc":null,"default_value":"","external_name":"iterations","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_set_iterations(self, iterations)"}},{"id":"locked?:Bool-instance-method","html_id":"locked?:Bool-instance-method","name":"locked?","doc":"Returns true from inside a callback when objects cannot be added/removed.","summary":"<p>Returns true from inside a callback when objects cannot be added/removed.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L172","def":{"name":"locked?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"LibCP.space_is_locked(self)"}},{"id":"point_query(point:Vect,max_distance:Number=0,filter:ShapeFilter=ShapeFilter::ALL):Array(PointQueryInfo)-instance-method","html_id":"point_query(point:Vect,max_distance:Number=0,filter:ShapeFilter=ShapeFilter::ALL):Array(PointQueryInfo)-instance-method","name":"point_query","doc":"Query the space at a point for shapes within the given distance range.\n\nThe filter is applied to the query and follows the same rules as the\ncollision detection. Sensor shapes are included. If a *max_distance* of\n0 is used, the point must lie inside a shape. Negative *max_distance*\nis also allowed meaning that the point must be a under a certain\ndepth within a shape to be considered a match.","summary":"<p>Query the space at a point for shapes within the given distance range.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"max_distance","doc":null,"default_value":"0","external_name":"max_distance","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(point : Vect, max_distance : Number = <span class=\"n\">0</span>, filter : ShapeFilter = <span class=\"t\">ShapeFilter</span><span class=\"t\">::</span><span class=\"t\">ALL</span>) : Array(PointQueryInfo)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L278","def":{"name":"point_query","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"max_distance","doc":null,"default_value":"0","external_name":"max_distance","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(PointQueryInfo)","visibility":"Public","body":"result = [] of PointQueryInfo\npoint_query(point, max_distance, filter) do |item|\n  result << item\nend\nresult\n"}},{"id":"point_query(point:Vect,max_distance:Number=0,filter:ShapeFilter=ShapeFilter::ALL,&block:PointQueryInfo->)-instance-method","html_id":"point_query(point:Vect,max_distance:Number=0,filter:ShapeFilter=ShapeFilter::ALL,&amp;block:PointQueryInfo-&gt;)-instance-method","name":"point_query","doc":"Query the space at a point for shapes within the given distance range.\n\nThe filter is applied to the query and follows the same rules as the\ncollision detection. Sensor shapes are included. If a *max_distance* of\n0 is used, the point must lie inside a shape. Negative *max_distance*\nis also allowed meaning that the point must be a under a certain\ndepth within a shape to be considered a match.","summary":"<p>Query the space at a point for shapes within the given distance range.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"max_distance","doc":null,"default_value":"0","external_name":"max_distance","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(point : Vect, max_distance : Number = <span class=\"n\">0</span>, filter : ShapeFilter = <span class=\"t\">ShapeFilter</span><span class=\"t\">::</span><span class=\"t\">ALL</span>, &block : PointQueryInfo -> )","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L279","def":{"name":"point_query","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"max_distance","doc":null,"default_value":"0","external_name":"max_distance","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(PointQueryInfo -> )"},"return_type":"","visibility":"Public","body":"LibCP.space_point_query(self, point, max_distance, filter, ->(shape, point, distance, gradient, data) do\n  (data.as(::Pointer(typeof(block)))).value.call(PointQueryInfo.new(Shape[shape], point, distance, gradient))\nend, pointerof(block))"}},{"id":"point_query_nearest(point:Vect,max_distance:Number=0,filter:ShapeFilter=ShapeFilter::ALL):PointQueryInfo?-instance-method","html_id":"point_query_nearest(point:Vect,max_distance:Number=0,filter:ShapeFilter=ShapeFilter::ALL):PointQueryInfo?-instance-method","name":"point_query_nearest","doc":"Query the space at a point and return the nearest shape found.\n\nReturns nil if no shapes were found.","summary":"<p>Query the space at a point and return the nearest shape found.</p>","abstract":false,"args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"max_distance","doc":null,"default_value":"0","external_name":"max_distance","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(point : Vect, max_distance : Number = <span class=\"n\">0</span>, filter : ShapeFilter = <span class=\"t\">ShapeFilter</span><span class=\"t\">::</span><span class=\"t\">ALL</span>) : PointQueryInfo?","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L288","def":{"name":"point_query_nearest","args":[{"name":"point","doc":null,"default_value":"","external_name":"point","restriction":"Vect"},{"name":"max_distance","doc":null,"default_value":"0","external_name":"max_distance","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"PointQueryInfo | ::Nil","visibility":"Public","body":"if LibCP.space_point_query_nearest(self, point, max_distance, filter, out info)\n  info\nend"}},{"id":"reindex(shape:Shape)-instance-method","html_id":"reindex(shape:Shape)-instance-method","name":"reindex","doc":"Update the collision detection data for a specific shape in the space.","summary":"<p>Update the collision detection data for a specific shape in the space.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L338","def":{"name":"reindex","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_reindex_shape(self, shape)"}},{"id":"reindex_shapes_for(body:Body)-instance-method","html_id":"reindex_shapes_for(body:Body)-instance-method","name":"reindex_shapes_for","doc":"Update the collision detection data for all shapes attached to a body.","summary":"<p>Update the collision detection data for all shapes attached to a body.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body"}],"args_string":"(body : Body)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L343","def":{"name":"reindex_shapes_for","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_reindex_shapes_for_body(self, body)"}},{"id":"reindex_static-instance-method","html_id":"reindex_static-instance-method","name":"reindex_static","doc":"Update the collision detection info for the static shapes in the space.","summary":"<p>Update the collision detection info for the static shapes in the space.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L333","def":{"name":"reindex_static","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_reindex_static(self)"}},{"id":"remove(*items:Shape|Body|Constraint)-instance-method","html_id":"remove(*items:Shape|Body|Constraint)-instance-method","name":"remove","doc":"Remove multiple items","summary":"<p>Remove multiple items</p>","abstract":false,"args":[{"name":"items","doc":null,"default_value":"","external_name":"items","restriction":"Shape | Body | Constraint"}],"args_string":"(*items : Shape | Body | Constraint)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L265","def":{"name":"remove","args":[{"name":"items","doc":null,"default_value":"","external_name":"items","restriction":"Shape | Body | Constraint"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"items.each do |item|\n  remove(item)\nend"}},{"id":"remove(constraint:Constraint)-instance-method","html_id":"remove(constraint:Constraint)-instance-method","name":"remove","doc":"Remove a constraint from the simulation.\n\nIf this method is called during a simulation step, the removal will be delayed until the step is finished.","summary":"<p>Remove a constraint from the simulation.</p>","abstract":false,"args":[{"name":"constraint","doc":null,"default_value":"","external_name":"constraint","restriction":"Constraint"}],"args_string":"(constraint : Constraint)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"remove","args":[{"name":"constraint","doc":null,"default_value":"","external_name":"constraint","restriction":"Constraint"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @in_step\n  @todo[constraint] = false\nelse\n  LibCP.space_remove_constraint(self, constraint)\n  @constraints.delete(constraint)\nend\nnil\n"}},{"id":"remove(shape:Shape)-instance-method","html_id":"remove(shape:Shape)-instance-method","name":"remove","doc":"Remove a shape from the simulation.\n\nIf this method is called during a simulation step, the removal will be delayed until the step is finished.","summary":"<p>Remove a shape from the simulation.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"remove","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @in_step\n  @todo[shape] = false\nelse\n  LibCP.space_remove_shape(self, shape)\n  @shapes.delete(shape)\nend\nnil\n"}},{"id":"remove(body:Body)-instance-method","html_id":"remove(body:Body)-instance-method","name":"remove","doc":"Remove a body from the simulation.\n\nIf this method is called during a simulation step, the removal will be delayed until the step is finished.","summary":"<p>Remove a body from the simulation.</p>","abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body"}],"args_string":"(body : Body)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L202","def":{"name":"remove","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"Body"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @in_step\n  @todo[body] = false\nelse\n  LibCP.space_remove_body(self, body)\n  @bodies.delete(body)\nend\nnil\n"}},{"id":"segment_query(start:Vect,endend_:Vect,radius:Number=0,filter:ShapeFilter=ShapeFilter::ALL,&block:SegmentQueryInfo->)-instance-method","html_id":"segment_query(start:Vect,endend_:Vect,radius:Number=0,filter:ShapeFilter=ShapeFilter::ALL,&amp;block:SegmentQueryInfo-&gt;)-instance-method","name":"segment_query","doc":"Perform a directed line segment query (like a raycast) against the space and yield each shape intersected.\n\nThe filter is applied to the query and follows the same rules as the\ncollision detection. Sensor shapes are included.","summary":"<p>Perform a directed line segment query (like a raycast) against the space and yield each shape intersected.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Vect"},{"name":"end_","doc":null,"default_value":"","external_name":"end","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(start : Vect, end end_ : Vect, radius : Number = <span class=\"n\">0</span>, filter : ShapeFilter = <span class=\"t\">ShapeFilter</span><span class=\"t\">::</span><span class=\"t\">ALL</span>, &block : SegmentQueryInfo -> )","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L299","def":{"name":"segment_query","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Vect"},{"name":"end_","doc":null,"default_value":"","external_name":"end","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(SegmentQueryInfo -> )"},"return_type":"","visibility":"Public","body":"LibCP.space_segment_query(self, start, end_, radius, filter, ->(shape, point, normal, alpha, data) do\n  (data.as(::Pointer(typeof(block)))).value.call(SegmentQueryInfo.new(Shape[shape], point, normal, alpha))\nend, pointerof(block))"}},{"id":"segment_query(start:Vect,endend_:Vect,radius:Number=0,filter:ShapeFilter=ShapeFilter::ALL):Array(SegmentQueryInfo)-instance-method","html_id":"segment_query(start:Vect,endend_:Vect,radius:Number=0,filter:ShapeFilter=ShapeFilter::ALL):Array(SegmentQueryInfo)-instance-method","name":"segment_query","doc":"Perform a directed line segment query (like a raycast) against the space and yield each shape intersected.\n\nThe filter is applied to the query and follows the same rules as the\ncollision detection. Sensor shapes are included.","summary":"<p>Perform a directed line segment query (like a raycast) against the space and yield each shape intersected.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Vect"},{"name":"end_","doc":null,"default_value":"","external_name":"end","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(start : Vect, end end_ : Vect, radius : Number = <span class=\"n\">0</span>, filter : ShapeFilter = <span class=\"t\">ShapeFilter</span><span class=\"t\">::</span><span class=\"t\">ALL</span>) : Array(SegmentQueryInfo)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L298","def":{"name":"segment_query","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Vect"},{"name":"end_","doc":null,"default_value":"","external_name":"end","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(SegmentQueryInfo)","visibility":"Public","body":"result = [] of SegmentQueryInfo\nsegment_query(start, end_, radius, filter) do |item|\n  result << item\nend\nresult\n"}},{"id":"segment_query_first(start:Vect,endend_:Vect,radius:Number=0,filter:ShapeFilter=ShapeFilter::ALL):SegmentQueryInfo?-instance-method","html_id":"segment_query_first(start:Vect,endend_:Vect,radius:Number=0,filter:ShapeFilter=ShapeFilter::ALL):SegmentQueryInfo?-instance-method","name":"segment_query_first","doc":"Perform a directed line segment query (like a raycast) against the space and return the first shape hit.\n\nReturns nil if no shapes were hit.","summary":"<p>Perform a directed line segment query (like a raycast) against the space and return the first shape hit.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Vect"},{"name":"end_","doc":null,"default_value":"","external_name":"end","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"args_string":"(start : Vect, end end_ : Vect, radius : Number = <span class=\"n\">0</span>, filter : ShapeFilter = <span class=\"t\">ShapeFilter</span><span class=\"t\">::</span><span class=\"t\">ALL</span>) : SegmentQueryInfo?","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L308","def":{"name":"segment_query_first","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Vect"},{"name":"end_","doc":null,"default_value":"","external_name":"end","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"0","external_name":"radius","restriction":"Number"},{"name":"filter","doc":null,"default_value":"ShapeFilter::ALL","external_name":"filter","restriction":"ShapeFilter"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"SegmentQueryInfo | ::Nil","visibility":"Public","body":"if LibCP.space_segment_query_first(self, start, end_, radius, filter, out info)\n  info\nend"}},{"id":"shape_query(shape:Shape,&block:Shape,ContactPointSet->)-instance-method","html_id":"shape_query(shape:Shape,&amp;block:Shape,ContactPointSet-&gt;)-instance-method","name":"shape_query","doc":"Query a space for any shapes overlapping the given shape and yield each shape found.","summary":"<p>Query a space for any shapes overlapping the given shape and yield each shape found.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape, &block : Shape, ContactPointSet -> )","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L326","def":{"name":"shape_query","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Shape, ContactPointSet -> )"},"return_type":"","visibility":"Public","body":"LibCP.space_shape_query(self, shape, ->(shape, contact_point_set, data) do\n  (data.as(::Pointer(typeof(block)))).value.call(Shape[shape], contact_point_set.value)\nend, pointerof(block))"}},{"id":"shape_query(shape:Shape):Array(Shape)-instance-method","html_id":"shape_query(shape:Shape):Array(Shape)-instance-method","name":"shape_query","doc":"Query a space for any shapes overlapping the given shape and yield each shape found.","summary":"<p>Query a space for any shapes overlapping the given shape and yield each shape found.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape) : Array(Shape)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L325","def":{"name":"shape_query","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Shape)","visibility":"Public","body":"result = [] of Shape\nshape_query(shape) do |item|\n  result << item\nend\nresult\n"}},{"id":"shapes:Set(Shape)-instance-method","html_id":"shapes:Set(Shape)-instance-method","name":"shapes","doc":"Get all the shapes that are added to the space.","summary":"<p>Get all the shapes that are added to the space.</p>","abstract":false,"args":[],"args_string":" : Set(Shape)","source_link":null,"def":{"name":"shapes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(Shape)","visibility":"Public","body":"@shapes"}},{"id":"sleep_time_threshold:Float64-instance-method","html_id":"sleep_time_threshold:Float64-instance-method","name":"sleep_time_threshold","doc":"Time a group of bodies must remain idle in order to fall asleep.\n\nEnabling sleeping also implicitly enables the the contact graph.\nThe default value of INFINITY disables the sleeping algorithm.","summary":"<p>Time a group of bodies must remain idle in order to fall asleep.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L116","def":{"name":"sleep_time_threshold","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"LibCP.space_get_sleep_time_threshold(self)"}},{"id":"sleep_time_threshold=(sleep_time_threshold:Number)-instance-method","html_id":"sleep_time_threshold=(sleep_time_threshold:Number)-instance-method","name":"sleep_time_threshold=","doc":null,"summary":null,"abstract":false,"args":[{"name":"sleep_time_threshold","doc":null,"default_value":"","external_name":"sleep_time_threshold","restriction":"Number"}],"args_string":"(sleep_time_threshold : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L119","def":{"name":"sleep_time_threshold=","args":[{"name":"sleep_time_threshold","doc":null,"default_value":"","external_name":"sleep_time_threshold","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_set_sleep_time_threshold(self, sleep_time_threshold)"}},{"id":"static_body:Body-instance-method","html_id":"static_body:Body-instance-method","name":"static_body","doc":"The `Space` provided static body for a given `Space`.\n\nThis is merely provided for convenience and you are not required to use it.","summary":"<p>The <code><a href=\"../CP/Space.html\">Space</a></code> provided static body for a given <code><a href=\"../CP/Space.html\">Space</a></code>.</p>","abstract":false,"args":[],"args_string":" : Body","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L160","def":{"name":"static_body","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Body","visibility":"Public","body":"@static_body"}},{"id":"step(dt:Number)-instance-method","html_id":"step(dt:Number)-instance-method","name":"step","doc":"Step the space forward in time by *dt* seconds.","summary":"<p>Step the space forward in time by <em>dt</em> seconds.</p>","abstract":false,"args":[{"name":"dt","doc":null,"default_value":"","external_name":"dt","restriction":"Number"}],"args_string":"(dt : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L353","def":{"name":"step","args":[{"name":"dt","doc":null,"default_value":"","external_name":"dt","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@in_step = true\n@threaded ? LibCP.hasty_space_step(self, dt) : LibCP.space_step(self, dt)\n@in_step = false\n@todo.each do |item, add|\n  if add\n    add(item)\n  else\n    remove(item)\n  end\nend\n@todo.clear\n"}},{"id":"threads:Int-instance-method","html_id":"threads:Int-instance-method","name":"threads","doc":"Returns number of threads for multithreaded physics solver or 0 if the space isn't hasty","summary":"<p>Returns number of threads for multithreaded physics solver or 0 if the space isn't hasty</p>","abstract":false,"args":[],"args_string":" : Int","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L375","def":{"name":"threads","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"if @threaded\nelse\n  return 0\nend\nLibCP.hasty_space_get_threads(self)\n"}},{"id":"threads=(nthreads:Int)-instance-method","html_id":"threads=(nthreads:Int)-instance-method","name":"threads=","doc":"Set number of threads for multithreaded physics solver","summary":"<p>Set number of threads for multithreaded physics solver</p>","abstract":false,"args":[{"name":"nthreads","doc":null,"default_value":"","external_name":"nthreads","restriction":"Int"}],"args_string":"(nthreads : Int)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L369","def":{"name":"threads=","args":[{"name":"nthreads","doc":null,"default_value":"","external_name":"nthreads","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @threaded\nelse\n  return\nend\nLibCP.hasty_space_set_threads(self, nthreads)\n"}},{"id":"use_spatial_hash(dim:Number,count:Int)-instance-method","html_id":"use_spatial_hash(dim:Number,count:Int)-instance-method","name":"use_spatial_hash","doc":"Switch the space to use a spatial has as its spatial index.","summary":"<p>Switch the space to use a spatial has as its spatial index.</p>","abstract":false,"args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Number"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(dim : Number, count : Int)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr#L348","def":{"name":"use_spatial_hash","args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Number"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibCP.space_use_spatial_hash(self, dim, count)"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space/DebugDraw","path":"CP/Space/DebugDraw.html","kind":"class","full_name":"CP::Space::DebugDraw","name":"DebugDraw","abstract":true,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/debug_draw.cr","line_number":25,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"COLLISION_POINT_COLOR","name":"COLLISION_POINT_COLOR","value":"Color.new(1.0, 0.0, 0.0)","doc":"Color passed to drawing functions for collision points.","summary":"<p>Color passed to drawing functions for collision points.</p>"},{"id":"CONSTRAINT_COLOR","name":"CONSTRAINT_COLOR","value":"Color.new(0.0, 0.75, 0.0)","doc":"/\nColor passed to drawing functions for constraints.\nColor passed to drawing functions for constraints.","summary":"<p>/ Color passed to drawing functions for constraints.</p>"},{"id":"SHAPE_OUTLINE_COLOR","name":"SHAPE_OUTLINE_COLOR","value":"Color.new(*{200, 210, 230}.map(&./(255.0)))","doc":"Outline color passed to the drawing function.","summary":"<p>Outline color passed to the drawing function.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space","kind":"class","full_name":"CP::Space","name":"Space"},"doc":null,"summary":null,"class_methods":[{"id":"color_for_hash(hash:Int,intensity:Number):Color-class-method","html_id":"color_for_hash(hash:Int,intensity:Number):Color-class-method","name":"color_for_hash","doc":null,"summary":null,"abstract":false,"args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Int"},{"name":"intensity","doc":null,"default_value":"","external_name":"intensity","restriction":"Number"}],"args_string":"(hash : Int, intensity : Number) : Color","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L222","def":{"name":"color_for_hash","args":[{"name":"hash","doc":null,"default_value":"","external_name":"hash","restriction":"Int"},{"name":"intensity","doc":null,"default_value":"","external_name":"intensity","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Color","visibility":"Public","body":"val = hash.to_u32!\nval = (val &+ 2127912214_u32) &+ (val << 12)\nval = (val ^ 3345072700_u32) ^ (val >> 19)\nval = (val &+ 374761393_u32) &+ (val << 5)\nval = (val &+ 3550635116_u32) ^ (val << 9)\nval = (val &+ 4251993797_u32) &+ (val << 3)\nval = (val ^ 3042594569_u32) ^ (val >> 16)\nr = (val >> 0) & 255\ng = (val >> 8) & 255\nb = (val >> 16) & 255\nmax = {r, g, b}.max\nmin = {r, g, b}.min\nif min == max\n  Color.new(intensity, 0.0, 0.0)\nelse\n  coef = intensity / (max - min)\n  Color.new((r - min) * coef, (g - min) * coef, (b - min) * coef)\nend\n"}}],"constructors":[{"id":"new(flags=Flags::All)-class-method","html_id":"new(flags=Flags::All)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"flags","doc":null,"default_value":"Flags::All","external_name":"flags","restriction":""}],"args_string":"(flags = <span class=\"t\">Flags</span><span class=\"t\">::</span><span class=\"t\">All</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L80","def":{"name":"new","args":[{"name":"flags","doc":null,"default_value":"Flags::All","external_name":"flags","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"color_for_shape(shape:Shape):Color-instance-method","html_id":"color_for_shape(shape:Shape):Color-instance-method","name":"color_for_shape","doc":"Returns a color for a given shape.\n\nThis gives you an opportunity to color shapes based on how they are used in your engine.","summary":"<p>Returns a color for a given shape.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"args_string":"(shape : Shape) : Color","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L206","def":{"name":"color_for_shape","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Shape"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Color","visibility":"Public","body":"if shape.sensor?\n  return Color.gray(1.0, 0.1)\nend\nbody = shape.body.not_nil!\nif body.sleeping?\n  Color.gray(0.2)\nelse\n  if (body.@body).sleeping.idle_time > shape.space.not_nil!.sleep_time_threshold\n    Color.gray(0.66)\n  else\n    hash = shape.to_unsafe.value.hashid\n    DebugDraw.color_for_hash(hash, intensity: body.type.static? ? 0.15 : 0.75)\n  end\nend\n"}},{"id":"draw(space:Space)-instance-method","html_id":"draw(space:Space)-instance-method","name":"draw","doc":"Debug draw the current state of the space.","summary":"<p>Debug draw the current state of the space.</p>","abstract":false,"args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"args_string":"(space : Space)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L86","def":{"name":"draw","args":[{"name":"space","doc":null,"default_value":"","external_name":"space","restriction":"Space"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @flags.draw_shapes?\n  space.each_shape do |shape|\n    body = shape.body\n    if body\n    else\n      next\n    end\n    fill_color = color_for_shape(shape)\n    case shape\n    when Shape::Circle\n      draw_circle((shape.@shape).tc, (body.@body).a, shape.radius, SHAPE_OUTLINE_COLOR, fill_color)\n    when Shape::Segment\n      draw_fat_segment((shape.@shape).ta, (shape.@shape).tb, shape.radius, SHAPE_OUTLINE_COLOR, fill_color)\n    when Shape::Poly\n      count = shape.size\n      planes = (shape.@shape).planes\n      verts = Slice(Vect).new(count) do |i|\n        planes[i].v0\n      end\n      draw_polygon(verts, shape.radius, SHAPE_OUTLINE_COLOR, fill_color)\n    end\n  end\nend\nif @flags.draw_constraints?\n  space.each_constraint do |constraint|\n    body_a = constraint.body_a\n    body_b = constraint.body_b\n    case constraint\n    when Constraint::PinJoint\n      a = (body_a.@body).transform.transform_point(constraint.anchor_a)\n      b = (body_b.@body).transform.transform_point(constraint.anchor_b)\n      draw_dot(5.0, a, CONSTRAINT_COLOR)\n      draw_dot(5.0, b, CONSTRAINT_COLOR)\n      draw_segment(a, b, CONSTRAINT_COLOR)\n    when Constraint::SlideJoint\n      a = (body_a.@body).transform.transform_point(constraint.anchor_a)\n      b = (body_b.@body).transform.transform_point(constraint.anchor_b)\n      draw_dot(5.0, a, CONSTRAINT_COLOR)\n      draw_dot(5.0, b, CONSTRAINT_COLOR)\n      draw_segment(a, b, CONSTRAINT_COLOR)\n    when Constraint::PivotJoint\n      a = (body_a.@body).transform.transform_point(constraint.anchor_a)\n      b = (body_b.@body).transform.transform_point(constraint.anchor_b)\n      draw_dot(5.0, a, CONSTRAINT_COLOR)\n      draw_dot(5.0, b, CONSTRAINT_COLOR)\n    when Constraint::GrooveJoint\n      a = (body_a.@body).transform.transform_point(constraint.groove_a)\n      b = (body_a.@body).transform.transform_point(constraint.groove_b)\n      c = (body_b.@body).transform.transform_point(constraint.anchor_b)\n      draw_dot(5.0, c, CONSTRAINT_COLOR)\n      draw_segment(a, b, CONSTRAINT_COLOR)\n    when Constraint::DampedSpring\n      a = (body_a.@body).transform.transform_point(constraint.anchor_a)\n      b = (body_b.@body).transform.transform_point(constraint.anchor_b)\n      draw_dot(5.0, a, CONSTRAINT_COLOR)\n      draw_dot(5.0, b, CONSTRAINT_COLOR)\n      delta = b - a\n      cos, sin = delta.x, delta.y\n      s = 1.0 / delta.length\n      r1 = CP.v(cos, (-sin) * s)\n      r2 = CP.v(sin, cos * s)\n      verts = Slice(Vect).new(@@spring_verts.size) do |i|\n        CP.v((@@spring_verts[i].dot(r1)) + a.x, (@@spring_verts[i].dot(r2)) + a.y)\n      end\n      (@@spring_verts.size - 1).times do |i|\n        draw_segment(verts[i], verts[i + 1], CONSTRAINT_COLOR)\n      end\n    end\n  end\nend\nif @flags.draw_collision_points?\n  arbiters = (space.@space).value.arbiters\n  arbiters.value.num.times do |i|\n    arb = arbiters.value.arr[i].as(::Pointer(LibCP::Arbiter))\n    n = arb.value.n\n    arb.value.count.times do |j|\n      p1 = arb.value.body_a.value.p + arb.value.contacts[j].r1\n      p2 = arb.value.body_b.value.p + arb.value.contacts[j].r2\n      d = 2.0\n      a = p1 + (n * (-d))\n      b = p2 + (n * d)\n      draw_segment(a, b, COLLISION_POINT_COLOR)\n    end\n  end\nend\n"}},{"id":"draw_circle(pos:Vect,angle:Float64,radius:Float64,outline_color:Color,fill_color:Color)-instance-method","html_id":"draw_circle(pos:Vect,angle:Float64,radius:Float64,outline_color:Color,fill_color:Color)-instance-method","name":"draw_circle","doc":"Draw a filled, stroked circle.","summary":"<p>Draw a filled, stroked circle.</p>","abstract":true,"args":[{"name":"pos","doc":null,"default_value":"","external_name":"pos","restriction":"Vect"},{"name":"angle","doc":null,"default_value":"","external_name":"angle","restriction":"Float64"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Float64"},{"name":"outline_color","doc":null,"default_value":"","external_name":"outline_color","restriction":"Color"},{"name":"fill_color","doc":null,"default_value":"","external_name":"fill_color","restriction":"Color"}],"args_string":"(pos : Vect, angle : Float64, radius : Float64, outline_color : Color, fill_color : Color)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L189","def":{"name":"draw_circle","args":[{"name":"pos","doc":null,"default_value":"","external_name":"pos","restriction":"Vect"},{"name":"angle","doc":null,"default_value":"","external_name":"angle","restriction":"Float64"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Float64"},{"name":"outline_color","doc":null,"default_value":"","external_name":"outline_color","restriction":"Color"},{"name":"fill_color","doc":null,"default_value":"","external_name":"fill_color","restriction":"Color"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"draw_dot(size:Float64,pos:Vect,color:Color)-instance-method","html_id":"draw_dot(size:Float64,pos:Vect,color:Color)-instance-method","name":"draw_dot","doc":"Draw a dot.","summary":"<p>Draw a dot.</p>","abstract":true,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Float64"},{"name":"pos","doc":null,"default_value":"","external_name":"pos","restriction":"Vect"},{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":"Color"}],"args_string":"(size : Float64, pos : Vect, color : Color)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L201","def":{"name":"draw_dot","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Float64"},{"name":"pos","doc":null,"default_value":"","external_name":"pos","restriction":"Vect"},{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":"Color"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"draw_fat_segment(a:Vect,b:Vect,radius:Float64,outline_color:Color,fill_color:Color)-instance-method","html_id":"draw_fat_segment(a:Vect,b:Vect,radius:Float64,outline_color:Color,fill_color:Color)-instance-method","name":"draw_fat_segment","doc":"Draw a thick line segment.","summary":"<p>Draw a thick line segment.</p>","abstract":true,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Float64"},{"name":"outline_color","doc":null,"default_value":"","external_name":"outline_color","restriction":"Color"},{"name":"fill_color","doc":null,"default_value":"","external_name":"fill_color","restriction":"Color"}],"args_string":"(a : Vect, b : Vect, radius : Float64, outline_color : Color, fill_color : Color)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L195","def":{"name":"draw_fat_segment","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Float64"},{"name":"outline_color","doc":null,"default_value":"","external_name":"outline_color","restriction":"Color"},{"name":"fill_color","doc":null,"default_value":"","external_name":"fill_color","restriction":"Color"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"draw_polygon(verts:Slice(Vect),radius:Float64,outline_color:Color,fill_color:Color)-instance-method","html_id":"draw_polygon(verts:Slice(Vect),radius:Float64,outline_color:Color,fill_color:Color)-instance-method","name":"draw_polygon","doc":"Draw a convex polygon.","summary":"<p>Draw a convex polygon.</p>","abstract":true,"args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Slice(Vect)"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Float64"},{"name":"outline_color","doc":null,"default_value":"","external_name":"outline_color","restriction":"Color"},{"name":"fill_color","doc":null,"default_value":"","external_name":"fill_color","restriction":"Color"}],"args_string":"(verts : Slice(Vect), radius : Float64, outline_color : Color, fill_color : Color)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L198","def":{"name":"draw_polygon","args":[{"name":"verts","doc":null,"default_value":"","external_name":"verts","restriction":"Slice(Vect)"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Float64"},{"name":"outline_color","doc":null,"default_value":"","external_name":"outline_color","restriction":"Color"},{"name":"fill_color","doc":null,"default_value":"","external_name":"fill_color","restriction":"Color"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"draw_segment(a:Vect,b:Vect,color:Color)-instance-method","html_id":"draw_segment(a:Vect,b:Vect,color:Color)-instance-method","name":"draw_segment","doc":"Draw a line segment.","summary":"<p>Draw a line segment.</p>","abstract":true,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":"Color"}],"args_string":"(a : Vect, b : Vect, color : Color)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L192","def":{"name":"draw_segment","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"},{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":"Color"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"flags:Flags-instance-method","html_id":"flags:Flags-instance-method","name":"flags","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Flags","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L83","def":{"name":"flags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Flags","visibility":"Public","body":"@flags"}},{"id":"flags=(flags:Flags)-instance-method","html_id":"flags=(flags:Flags)-instance-method","name":"flags=","doc":null,"summary":null,"abstract":false,"args":[{"name":"flags","doc":null,"default_value":"","external_name":"flags","restriction":"Flags"}],"args_string":"(flags : Flags)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L83","def":{"name":"flags=","args":[{"name":"flags","doc":null,"default_value":"","external_name":"flags","restriction":"Flags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@flags = flags"}}],"macros":[],"types":[{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space/DebugDraw/Color","path":"CP/Space/DebugDraw/Color.html","kind":"struct","full_name":"CP::Space::DebugDraw::Color","name":"Color","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/debug_draw.cr","line_number":62,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space/DebugDraw","kind":"class","full_name":"CP::Space::DebugDraw","name":"DebugDraw"},"doc":"Color type to use with the space debug drawing API.","summary":"<p>Color type to use with the space debug drawing API.</p>","class_methods":[],"constructors":[{"id":"gray(l:Float,a:Float=1.0_f32):self-class-method","html_id":"gray(l:Float,a:Float=1.0_f32):self-class-method","name":"gray","doc":null,"summary":null,"abstract":false,"args":[{"name":"l","doc":null,"default_value":"","external_name":"l","restriction":"Float"},{"name":"a","doc":null,"default_value":"1.0_f32","external_name":"a","restriction":"Float"}],"args_string":"(l : Float, a : Float = <span class=\"n\">1.0_f32</span>) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L75","def":{"name":"gray","args":[{"name":"l","doc":null,"default_value":"","external_name":"l","restriction":"Float"},{"name":"a","doc":null,"default_value":"1.0_f32","external_name":"a","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(l, l, l, a)"}},{"id":"new(r:Float,g:Float,b:Float,a:Float=1.0_f32)-class-method","html_id":"new(r:Float,g:Float,b:Float,a:Float=1.0_f32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"Float"},{"name":"g","doc":null,"default_value":"","external_name":"g","restriction":"Float"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float"},{"name":"a","doc":null,"default_value":"1.0_f32","external_name":"a","restriction":"Float"}],"args_string":"(r : Float, g : Float, b : Float, a : Float = <span class=\"n\">1.0_f32</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L68","def":{"name":"new","args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"Float"},{"name":"g","doc":null,"default_value":"","external_name":"g","restriction":"Float"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float"},{"name":"a","doc":null,"default_value":"1.0_f32","external_name":"a","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(r, g, b, a)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"a:Float32-instance-method","html_id":"a:Float32-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float32","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L66","def":{"name":"a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float32","visibility":"Public","body":"@a"}},{"id":"a=(a:Float32)-instance-method","html_id":"a=(a:Float32)-instance-method","name":"a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float32"}],"args_string":"(a : Float32)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L66","def":{"name":"a=","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@a = a"}},{"id":"b:Float32-instance-method","html_id":"b:Float32-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float32","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L65","def":{"name":"b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float32","visibility":"Public","body":"@b"}},{"id":"b=(b:Float32)-instance-method","html_id":"b=(b:Float32)-instance-method","name":"b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float32"}],"args_string":"(b : Float32)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L65","def":{"name":"b=","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@b = b"}},{"id":"g:Float32-instance-method","html_id":"g:Float32-instance-method","name":"g","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float32","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L64","def":{"name":"g","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float32","visibility":"Public","body":"@g"}},{"id":"g=(g:Float32)-instance-method","html_id":"g=(g:Float32)-instance-method","name":"g=","doc":null,"summary":null,"abstract":false,"args":[{"name":"g","doc":null,"default_value":"","external_name":"g","restriction":"Float32"}],"args_string":"(g : Float32)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L64","def":{"name":"g=","args":[{"name":"g","doc":null,"default_value":"","external_name":"g","restriction":"Float32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@g = g"}},{"id":"r:Float32-instance-method","html_id":"r:Float32-instance-method","name":"r","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float32","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L63","def":{"name":"r","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float32","visibility":"Public","body":"@r"}},{"id":"r=(r:Float32)-instance-method","html_id":"r=(r:Float32)-instance-method","name":"r=","doc":null,"summary":null,"abstract":false,"args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"Float32"}],"args_string":"(r : Float32)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L63","def":{"name":"r=","args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"Float32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@r = r"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space/DebugDraw/Flags","path":"CP/Space/DebugDraw/Flags.html","kind":"enum","full_name":"CP::Space::DebugDraw::Flags","name":"Flags","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/oprypin/crystal-chipmunk/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/debug_draw.cr","line_number":53,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"DRAW_SHAPES","name":"DRAW_SHAPES","value":"1","doc":null,"summary":null},{"id":"DRAW_CONSTRAINTS","name":"DRAW_CONSTRAINTS","value":"2","doc":null,"summary":null},{"id":"DRAW_COLLISION_POINTS","name":"DRAW_COLLISION_POINTS","value":"4","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space/DebugDraw","kind":"class","full_name":"CP::Space::DebugDraw","name":"DebugDraw"},"doc":"Flags that request which things to draw (collision shapes, constraints, contact points).","summary":"<p>Flags that request which things to draw (collision shapes, constraints, contact points).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"draw_collision_points?-instance-method","html_id":"draw_collision_points?-instance-method","name":"draw_collision_points?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L56","def":{"name":"draw_collision_points?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(DRAW_COLLISION_POINTS)"}},{"id":"draw_constraints?-instance-method","html_id":"draw_constraints?-instance-method","name":"draw_constraints?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L55","def":{"name":"draw_constraints?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(DRAW_CONSTRAINTS)"}},{"id":"draw_shapes?-instance-method","html_id":"draw_shapes?-instance-method","name":"draw_shapes?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L54","def":{"name":"draw_shapes?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(DRAW_SHAPES)"}},{"id":"none?-instance-method","html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/debug_draw.cr#L53","def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value == 0"}}],"macros":[],"types":[]}]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space/Timestamp","path":"CP/Space/Timestamp.html","kind":"alias","full_name":"CP::Space::Timestamp","name":"Timestamp","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"chipmunk/space.cr","line_number":27,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/space.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":true,"aliased":"UInt32","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Space","kind":"class","full_name":"CP::Space","name":"Space"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Transform","path":"CP/Transform.html","kind":"struct","full_name":"CP::Transform","name":"Transform","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/vector.cr","line_number":212,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"IDENTITY","name":"IDENTITY","value":"new","doc":"Identity transform matrix.","summary":"<p>Identity transform matrix.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Column major 2x3 affine transform.","summary":"<p>Column major 2x3 affine transform.</p>","class_methods":[],"constructors":[{"id":"axial_scale(axis:Vect,pivot:Vect,scale:Number):self-class-method","html_id":"axial_scale(axis:Vect,pivot:Vect,scale:Number):self-class-method","name":"axial_scale","doc":null,"summary":null,"abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Vect"},{"name":"pivot","doc":null,"default_value":"","external_name":"pivot","restriction":"Vect"},{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Number"}],"args_string":"(axis : Vect, pivot : Vect, scale : Number) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L329","def":{"name":"axial_scale","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Vect"},{"name":"pivot","doc":null,"default_value":"","external_name":"pivot","restriction":"Vect"},{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"a = (axis.x * axis.y) * (scale - 1.0)\nb = (axis.dot(pivot)) * (1.0 - scale)\nTransform.new_transpose(((scale * axis.x) * axis.x) + (axis.y * axis.y), a, axis.x * b, a, (axis.x * axis.x) + ((scale * axis.y) * axis.y), axis.y * b)\n"}},{"id":"bone_scale(v0:Vect,v1:Vect):self-class-method","html_id":"bone_scale(v0:Vect,v1:Vect):self-class-method","name":"bone_scale","doc":null,"summary":null,"abstract":false,"args":[{"name":"v0","doc":null,"default_value":"","external_name":"v0","restriction":"Vect"},{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"}],"args_string":"(v0 : Vect, v1 : Vect) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L324","def":{"name":"bone_scale","args":[{"name":"v0","doc":null,"default_value":"","external_name":"v0","restriction":"Vect"},{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"d = v1 - v0\ntransform_new_transpose(d.x, -d.y, v0.x, d.y, d.x, v0.y)\n"}},{"id":"new(a:Number=1,b:Number=0,c:Number=0,d:Number=1,tx:Number=0,ty:Number=0)-class-method","html_id":"new(a:Number=1,b:Number=0,c:Number=0,d:Number=1,tx:Number=0,ty:Number=0)-class-method","name":"new","doc":"Construct a new transform matrix.\n\n* (*a*, *b*) is the x basis vector.\n* (*c*, *d*) is the y basis vector.\n* (*tx*, *ty*) is the translation.","summary":"<p>Construct a new transform matrix.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"1","external_name":"a","restriction":"Number"},{"name":"b","doc":null,"default_value":"0","external_name":"b","restriction":"Number"},{"name":"c","doc":null,"default_value":"0","external_name":"c","restriction":"Number"},{"name":"d","doc":null,"default_value":"1","external_name":"d","restriction":"Number"},{"name":"tx","doc":null,"default_value":"0","external_name":"tx","restriction":"Number"},{"name":"ty","doc":null,"default_value":"0","external_name":"ty","restriction":"Number"}],"args_string":"(a : Number = <span class=\"n\">1</span>, b : Number = <span class=\"n\">0</span>, c : Number = <span class=\"n\">0</span>, d : Number = <span class=\"n\">1</span>, tx : Number = <span class=\"n\">0</span>, ty : Number = <span class=\"n\">0</span>)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L224","def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"1","external_name":"a","restriction":"Number"},{"name":"b","doc":null,"default_value":"0","external_name":"b","restriction":"Number"},{"name":"c","doc":null,"default_value":"0","external_name":"c","restriction":"Number"},{"name":"d","doc":null,"default_value":"1","external_name":"d","restriction":"Number"},{"name":"tx","doc":null,"default_value":"0","external_name":"tx","restriction":"Number"},{"name":"ty","doc":null,"default_value":"0","external_name":"ty","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, c, d, tx, ty)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new_transpose(a:Number,c:Number,tx:Number,b:Number,d:Number,ty:Number):self-class-method","html_id":"new_transpose(a:Number,c:Number,tx:Number,b:Number,d:Number,ty:Number):self-class-method","name":"new_transpose","doc":"Construct a new transform matrix in transposed order.","summary":"<p>Construct a new transform matrix in transposed order.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Number"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Number"},{"name":"tx","doc":null,"default_value":"","external_name":"tx","restriction":"Number"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Number"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Number"},{"name":"ty","doc":null,"default_value":"","external_name":"ty","restriction":"Number"}],"args_string":"(a : Number, c : Number, tx : Number, b : Number, d : Number, ty : Number) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L234","def":{"name":"new_transpose","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Number"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Number"},{"name":"tx","doc":null,"default_value":"","external_name":"tx","restriction":"Number"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Number"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Number"},{"name":"ty","doc":null,"default_value":"","external_name":"ty","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Transform.new(a, b, c, d, tx, ty)"}},{"id":"ortho(bb:BB):self-class-method","html_id":"ortho(bb:BB):self-class-method","name":"ortho","doc":null,"summary":null,"abstract":false,"args":[{"name":"bb","doc":null,"default_value":"","external_name":"bb","restriction":"BB"}],"args_string":"(bb : BB) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L317","def":{"name":"ortho","args":[{"name":"bb","doc":null,"default_value":"","external_name":"bb","restriction":"BB"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Transform.new_transpose(2.0 / (bb.right - bb.left), 0.0, (-(bb.right + bb.left)) / (bb.right - bb.left), 0.0, 2.0 / (bb.top - bb.bottom), (-(bb.top + bb.bottom)) / (bb.top - bb.bottom))"}},{"id":"rigid(translate:Vect,radians:Number):Transform-class-method","html_id":"rigid(translate:Vect,radians:Number):Transform-class-method","name":"rigid","doc":"Create a rigid transformation matrix. (translation + rotation)","summary":"<p>Create a rigid transformation matrix.</p>","abstract":false,"args":[{"name":"translate","doc":null,"default_value":"","external_name":"translate","restriction":"Vect"},{"name":"radians","doc":null,"default_value":"","external_name":"radians","restriction":"Number"}],"args_string":"(translate : Vect, radians : Number) : Transform","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L296","def":{"name":"rigid","args":[{"name":"translate","doc":null,"default_value":"","external_name":"translate","restriction":"Vect"},{"name":"radians","doc":null,"default_value":"","external_name":"radians","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Transform","visibility":"Public","body":"rot = Vect.angle(radians)\nTransform.new_transpose(rot.x, -rot.y, translate.x, rot.y, rot.x, translate.y)\n"}},{"id":"rigid_inverse:Transform-class-method","html_id":"rigid_inverse:Transform-class-method","name":"rigid_inverse","doc":"Fast inverse of a rigid transformation matrix.","summary":"<p>Fast inverse of a rigid transformation matrix.</p>","abstract":false,"args":[],"args_string":" : Transform","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L302","def":{"name":"rigid_inverse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Transform","visibility":"Public","body":"Transform.new_transpose(@d, -@c, ((@c * @ty) - (@tx * @d)), -@b, @a, ((@tx * @b) - (@a * @ty)))"}},{"id":"rotate(radians:Number):self-class-method","html_id":"rotate(radians:Number):self-class-method","name":"rotate","doc":"Create a rotation matrix.","summary":"<p>Create a rotation matrix.</p>","abstract":false,"args":[{"name":"radians","doc":null,"default_value":"","external_name":"radians","restriction":"Number"}],"args_string":"(radians : Number) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L290","def":{"name":"rotate","args":[{"name":"radians","doc":null,"default_value":"","external_name":"radians","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"rot = Vect.angle(radians)\nTransform.new_transpose(rot.x, -rot.y, 0.0, rot.y, rot.x, 0.0)\n"}},{"id":"scale(scale_x:Number,scale_y:Number):self-class-method","html_id":"scale(scale_x:Number,scale_y:Number):self-class-method","name":"scale","doc":"Create a scale matrix.","summary":"<p>Create a scale matrix.</p>","abstract":false,"args":[{"name":"scale_x","doc":null,"default_value":"","external_name":"scale_x","restriction":"Number"},{"name":"scale_y","doc":null,"default_value":"","external_name":"scale_y","restriction":"Number"}],"args_string":"(scale_x : Number, scale_y : Number) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L285","def":{"name":"scale","args":[{"name":"scale_x","doc":null,"default_value":"","external_name":"scale_x","restriction":"Number"},{"name":"scale_y","doc":null,"default_value":"","external_name":"scale_y","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Transform.new_transpose(scale_x, 0.0, 0.0, 0.0, scale_y, 0.0)"}},{"id":"translate(translate:Vect):self-class-method","html_id":"translate(translate:Vect):self-class-method","name":"translate","doc":"Create a translation matrix.","summary":"<p>Create a translation matrix.</p>","abstract":false,"args":[{"name":"translate","doc":null,"default_value":"","external_name":"translate","restriction":"Vect"}],"args_string":"(translate : Vect) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L280","def":{"name":"translate","args":[{"name":"translate","doc":null,"default_value":"","external_name":"translate","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Transform.new_transpose(1.0, 0.0, translate.x, 0.0, 1.0, translate.y)"}}],"instance_methods":[{"id":"*(t2:Transform):Transform-instance-method","html_id":"*(t2:Transform):Transform-instance-method","name":"*","doc":"Multiply two transformation matrices.","summary":"<p>Multiply two transformation matrices.</p>","abstract":false,"args":[{"name":"t2","doc":null,"default_value":"","external_name":"t2","restriction":"Transform"}],"args_string":"(t2 : Transform) : Transform","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L248","def":{"name":"*","args":[{"name":"t2","doc":null,"default_value":"","external_name":"t2","restriction":"Transform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Transform","visibility":"Public","body":"Transform.new_transpose((@a * t2.a) + (@c * t2.bottom), (@a * t2.c) + (@c * t2.d), ((@a * t2.tx) + (@c * t2.ty)) + @tx, (@b * t2.a) + (@d * t2.bottom), (@b * t2.c) + (@d * t2.d), ((@b * t2.tx) + (@d * t2.ty)) + @ty)"}},{"id":"a:Float64-instance-method","html_id":"a:Float64-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L216","def":{"name":"a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@a"}},{"id":"a=(a:Float64)-instance-method","html_id":"a=(a:Float64)-instance-method","name":"a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float64"}],"args_string":"(a : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L216","def":{"name":"a=","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@a = a"}},{"id":"b:Float64-instance-method","html_id":"b:Float64-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L216","def":{"name":"b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@b"}},{"id":"b=(b:Float64)-instance-method","html_id":"b=(b:Float64)-instance-method","name":"b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float64"}],"args_string":"(b : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L216","def":{"name":"b=","args":[{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@b = b"}},{"id":"c:Float64-instance-method","html_id":"c:Float64-instance-method","name":"c","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L216","def":{"name":"c","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@c"}},{"id":"c=(c:Float64)-instance-method","html_id":"c=(c:Float64)-instance-method","name":"c=","doc":null,"summary":null,"abstract":false,"args":[{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Float64"}],"args_string":"(c : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L216","def":{"name":"c=","args":[{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@c = c"}},{"id":"d:Float64-instance-method","html_id":"d:Float64-instance-method","name":"d","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L216","def":{"name":"d","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@d"}},{"id":"d=(d:Float64)-instance-method","html_id":"d=(d:Float64)-instance-method","name":"d=","doc":null,"summary":null,"abstract":false,"args":[{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Float64"}],"args_string":"(d : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L216","def":{"name":"d=","args":[{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@d = d"}},{"id":"inverse:Transform-instance-method","html_id":"inverse:Transform-instance-method","name":"inverse","doc":"Get the inverse of a transform matrix.","summary":"<p>Get the inverse of a transform matrix.</p>","abstract":false,"args":[],"args_string":" : Transform","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L239","def":{"name":"inverse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Transform","visibility":"Public","body":"inv_det = 1.0 / ((@a * @d) - (@c * @b))\nTransform.new_transpose(@d * inv_det, (-@c) * inv_det, ((@c * @ty) - (@tx * @d)) * inv_det, (-@b) * inv_det, @a * inv_det, ((@tx * @b) - (@a * @ty)) * inv_det)\n"}},{"id":"transform(bb:BB):BB-instance-method","html_id":"transform(bb:BB):BB-instance-method","name":"transform","doc":"Transform a `BB`.","summary":"<p>Transform a <code><a href=\"../CP/BB.html\">BB</a></code>.</p>","abstract":false,"args":[{"name":"bb","doc":null,"default_value":"","external_name":"bb","restriction":"BB"}],"args_string":"(bb : BB) : BB","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L266","def":{"name":"transform","args":[{"name":"bb","doc":null,"default_value":"","external_name":"bb","restriction":"BB"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BB","visibility":"Public","body":"center = bb.center\nhw = (bb.right - bb.left) * 0.5\nhh = (bb.top - bb.bottom) * 0.5\na = @a * hw\nb = @c * hh\nd = @b * hw\ne = @d * hh\nhw_max = {(a + b).abs, (a - b).abs}.max\nhh_max = {(d + e).abs, (d - e).abs}.max\nTransform.new_for_extents(transform_point(center), hw_max, hh_max)\n"}},{"id":"transform_point(p:Vect):Vect-instance-method","html_id":"transform_point(p:Vect):Vect-instance-method","name":"transform_point","doc":"Transform an absolute point. (i.e. a vertex)","summary":"<p>Transform an absolute point.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Vect"}],"args_string":"(p : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L256","def":{"name":"transform_point","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(((@a * p.x) + (@c * p.y)) + @tx, ((@b * p.x) + (@d * p.y)) + @ty)"}},{"id":"transform_vect(v:Vect):Vect-instance-method","html_id":"transform_vect(v:Vect):Vect-instance-method","name":"transform_vect","doc":"Transform a vector (i.e. a normal)","summary":"<p>Transform a vector (i.e.</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"args_string":"(v : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L261","def":{"name":"transform_vect","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new((@a * v.x) + (@c * v.y), (@b * v.x) + (@d * v.y))"}},{"id":"tx:Float64-instance-method","html_id":"tx:Float64-instance-method","name":"tx","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L217","def":{"name":"tx","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@tx"}},{"id":"tx=(tx:Float64)-instance-method","html_id":"tx=(tx:Float64)-instance-method","name":"tx=","doc":null,"summary":null,"abstract":false,"args":[{"name":"tx","doc":null,"default_value":"","external_name":"tx","restriction":"Float64"}],"args_string":"(tx : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L217","def":{"name":"tx=","args":[{"name":"tx","doc":null,"default_value":"","external_name":"tx","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@tx = tx"}},{"id":"ty:Float64-instance-method","html_id":"ty:Float64-instance-method","name":"ty","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L217","def":{"name":"ty","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@ty"}},{"id":"ty=(ty:Float64)-instance-method","html_id":"ty=(ty:Float64)-instance-method","name":"ty=","doc":null,"summary":null,"abstract":false,"args":[{"name":"ty","doc":null,"default_value":"","external_name":"ty","restriction":"Float64"}],"args_string":"(ty : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L217","def":{"name":"ty=","args":[{"name":"ty","doc":null,"default_value":"","external_name":"ty","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ty = ty"}},{"id":"wrap(inner:Transform):Transform-instance-method","html_id":"wrap(inner:Transform):Transform-instance-method","name":"wrap","doc":null,"summary":null,"abstract":false,"args":[{"name":"inner","doc":null,"default_value":"","external_name":"inner","restriction":"Transform"}],"args_string":"(inner : Transform) : Transform","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L309","def":{"name":"wrap","args":[{"name":"inner","doc":null,"default_value":"","external_name":"inner","restriction":"Transform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Transform","visibility":"Public","body":"inverse * (inner * self)"}},{"id":"wrap_inverse(inner:Transform):Transform-instance-method","html_id":"wrap_inverse(inner:Transform):Transform-instance-method","name":"wrap_inverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"inner","doc":null,"default_value":"","external_name":"inner","restriction":"Transform"}],"args_string":"(inner : Transform) : Transform","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L313","def":{"name":"wrap_inverse","args":[{"name":"inner","doc":null,"default_value":"","external_name":"inner","restriction":"Transform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Transform","visibility":"Public","body":"self * (inner * inverse)"}}],"macros":[],"types":[]},{"html_id":"github.com/oprypin/crystal-chipmunk/CP/Vect","path":"CP/Vect.html","kind":"struct","full_name":"CP::Vect","name":"Vect","abstract":false,"superclass":{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/oprypin/crystal-chipmunk/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/oprypin/crystal-chipmunk/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/oprypin/crystal-chipmunk/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"chipmunk/vector.cr","line_number":38,"url":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr"}],"repository_name":"github.com/oprypin/crystal-chipmunk","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/oprypin/crystal-chipmunk/CP","kind":"module","full_name":"CP","name":"CP"},"doc":"Chipmunk's 2D vector type.","summary":"<p>Chipmunk's 2D vector type.</p>","class_methods":[],"constructors":[{"id":"angle(a:Number):self-class-method","html_id":"angle(a:Number):self-class-method","name":"angle","doc":"Returns the unit length vector for the given angle (in radians).","summary":"<p>Returns the unit length vector for the given angle (in radians).</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Number"}],"args_string":"(a : Number) : <span class=\"k\">self</span>","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L47","def":{"name":"angle","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vect.new(Math.cos(a), Math.sin(a))"}},{"id":"lerp(v1:Vect,v2:Vect,t:Number):Vect-class-method","html_id":"lerp(v1:Vect,v2:Vect,t:Number):Vect-class-method","name":"lerp","doc":"Linearly interpolate between *v1* and *v2*.","summary":"<p>Linearly interpolate between <em>v1</em> and <em>v2</em>.</p>","abstract":false,"args":[{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"},{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Number"}],"args_string":"(v1 : Vect, v2 : Vect, t : Number) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L136","def":{"name":"lerp","args":[{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"},{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"(v1 * (1.0 - t)) + (v2 * t)"}},{"id":"lerpconst(v1:Vect,v2:Vect,d:Number):Vect-class-method","html_id":"lerpconst(v1:Vect,v2:Vect,d:Number):Vect-class-method","name":"lerpconst","doc":"Linearly interpolate between *v1* towards *v2* by distance *d*.","summary":"<p>Linearly interpolate between <em>v1</em> towards <em>v2</em> by distance <em>d</em>.</p>","abstract":false,"args":[{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"},{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Number"}],"args_string":"(v1 : Vect, v2 : Vect, d : Number) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L171","def":{"name":"lerpconst","args":[{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"},{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"v1 + ((v2 - v1).clamp(d))"}},{"id":"new(x:Number,y:Number)-class-method","html_id":"new(x:Number,y:Number)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Number"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Number"}],"args_string":"(x : Number, y : Number)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L41","def":{"name":"new","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Number"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(x, y)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"slerp(v1:Vect,v2:Vect,t:Number):Vect-class-method","html_id":"slerp(v1:Vect,v2:Vect,t:Number):Vect-class-method","name":"slerp","doc":"Spherical linearly interpolate between *v1* and *v2*.","summary":"<p>Spherical linearly interpolate between <em>v1</em> and <em>v2</em>.</p>","abstract":false,"args":[{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"},{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Number"}],"args_string":"(v1 : Vect, v2 : Vect, t : Number) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L147","def":{"name":"slerp","args":[{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"},{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"dot = v1.normalize.dot(v2.normalize)\nomega = Math.acos(dot.clamp(-1.0, 1.0))\nif omega < 1e-3\n  Vect.lerp(v1, v2, t)\nelse\n  denom = 1.0 / (Math.sin(omega))\n  (v1 * ((Math.sin((1.0 - t) * omega)) * denom)) + (v2 * ((Math.sin(t * omega)) * denom))\nend\n"}},{"id":"slerpconst(v1:Vect,v2:Vect,a:Number):Vect-class-method","html_id":"slerpconst(v1:Vect,v2:Vect,a:Number):Vect-class-method","name":"slerpconst","doc":"Spherical linearly interpolate between *v1* towards *v2* by no more than angle *a* radians","summary":"<p>Spherical linearly interpolate between <em>v1</em> towards <em>v2</em> by no more than angle <em>a</em> radians</p>","abstract":false,"args":[{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"},{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Number"}],"args_string":"(v1 : Vect, v2 : Vect, a : Number) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L159","def":{"name":"slerpconst","args":[{"name":"v1","doc":null,"default_value":"","external_name":"v1","restriction":"Vect"},{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"dot = v1.normalize.dot(v2.normalize)\nomega = Math.acos(dot.clamp(-1.0, 1.0))\nself.slerp(v1, v2, {a, omega}.min / omega)\n"}}],"instance_methods":[{"id":"*(s:Number):Vect-instance-method","html_id":"*(s:Number):Vect-instance-method","name":"*","doc":"Scalar multiplication.","summary":"<p>Scalar multiplication.</p>","abstract":false,"args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"Number"}],"args_string":"(s : Number) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L74","def":{"name":"*","args":[{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(@x * s, @y * s)"}},{"id":"+(v2:Vect):Vect-instance-method","html_id":"+(v2:Vect):Vect-instance-method","name":"+","doc":"Add two vectors","summary":"<p>Add two vectors</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L59","def":{"name":"+","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(@x + v2.x, @y + v2.y)"}},{"id":"-(v2:Vect):Vect-instance-method","html_id":"-(v2:Vect):Vect-instance-method","name":"-","doc":"Subtract two vectors.","summary":"<p>Subtract two vectors.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L64","def":{"name":"-","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(@x - v2.x, @y - v2.y)"}},{"id":"-:Vect-instance-method","html_id":"-:Vect-instance-method","name":"-","doc":"Negate a vector.","summary":"<p>Negate a vector.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L69","def":{"name":"-","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(-@x, -@y)"}},{"id":"==(v2:Vect):Bool-instance-method","html_id":"==(v2:Vect):Bool-instance-method","name":"==","doc":"Check if two vectors are equal.\n\n(Be careful when comparing floating point numbers!)","summary":"<p>Check if two vectors are equal.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L54","def":{"name":"==","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(@x == v2.x) && (@y == v2.y)"}},{"id":"clamp(len:Number):Vect-instance-method","html_id":"clamp(len:Number):Vect-instance-method","name":"clamp","doc":"Clamp the vector to length len.","summary":"<p>Clamp the vector to length len.</p>","abstract":false,"args":[{"name":"len","doc":null,"default_value":"","external_name":"len","restriction":"Number"}],"args_string":"(len : Number) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L166","def":{"name":"clamp","args":[{"name":"len","doc":null,"default_value":"","external_name":"len","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"(dot(self)) > (len * len) ? normalize * len : self"}},{"id":"closest_point_on_segment(a:Vect,b:Vect):Vect-instance-method","html_id":"closest_point_on_segment(a:Vect,b:Vect):Vect-instance-method","name":"closest_point_on_segment","doc":"Returns the closest point on the line segment `a` `b`, to the point stored in this `Vect`.","summary":"<p>Returns the closest point on the line segment <code>a</code> <code>b</code>, to the point stored in this <code><a href=\"../CP/Vect.html\">Vect</a></code>.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"}],"args_string":"(a : Vect, b : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L193","def":{"name":"closest_point_on_segment","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vect"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"delta = a - b\nt = ((delta.dot(self - b)) / delta.lengthsq).clamp(0.0, 1.0)\nb + (delta * t)\n"}},{"id":"cross(v2:Vect):Float64-instance-method","html_id":"cross(v2:Vect):Float64-instance-method","name":"cross","doc":"2D vector cross product analog.\n\nThe cross product of 2D vectors results in a 3D vector with only a z component.\nThis function returns the magnitude of the z value.","summary":"<p>2D vector cross product analog.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L87","def":{"name":"cross","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(@x * v2.y) - (@y * v2.x)"}},{"id":"dist(v2:Vect):Float64-instance-method","html_id":"dist(v2:Vect):Float64-instance-method","name":"dist","doc":"Returns the distance between this vector and *v2*.","summary":"<p>Returns the distance between this vector and <em>v2</em>.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L176","def":{"name":"dist","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(self - v2).length"}},{"id":"distsq(v2:Vect):Float64-instance-method","html_id":"distsq(v2:Vect):Float64-instance-method","name":"distsq","doc":"Returns the squared distance between this vector and *v2*.\n\nFaster than `dist` when you only need to compare distances.","summary":"<p>Returns the squared distance between this vector and <em>v2</em>.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L183","def":{"name":"distsq","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(self - v2).lengthsq"}},{"id":"dot(v2:Vect):Float64-instance-method","html_id":"dot(v2:Vect):Float64-instance-method","name":"dot","doc":"Vector dot product.","summary":"<p>Vector dot product.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L79","def":{"name":"dot","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(@x * v2.x) + (@y * v2.y)"}},{"id":"length:Float64-instance-method","html_id":"length:Float64-instance-method","name":"length","doc":"Returns the length of the vector.","summary":"<p>Returns the length of the vector.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L131","def":{"name":"length","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Math.sqrt(dot(self))"}},{"id":"lengthsq:Float64-instance-method","html_id":"lengthsq:Float64-instance-method","name":"lengthsq","doc":"Returns the squared length of the vector.\n\nFaster than `length` when you only need to compare lengths.","summary":"<p>Returns the squared length of the vector.</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L126","def":{"name":"lengthsq","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"dot(self)"}},{"id":"near?(v2:Vect,dist:Number):Bool-instance-method","html_id":"near?(v2:Vect,dist:Number):Bool-instance-method","name":"near?","doc":"Returns true if the distance between this vector and *v2* is less than *dist*.","summary":"<p>Returns true if the distance between this vector and <em>v2</em> is less than <em>dist</em>.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"dist","doc":null,"default_value":"","external_name":"dist","restriction":"Number"}],"args_string":"(v2 : Vect, dist : Number) : Bool","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L188","def":{"name":"near?","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"},{"name":"dist","doc":null,"default_value":"","external_name":"dist","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(distsq(v2)) < (dist * dist)"}},{"id":"normalize:Vect-instance-method","html_id":"normalize:Vect-instance-method","name":"normalize","doc":"Returns a normalized copy of the vector (unit vector).","summary":"<p>Returns a normalized copy of the vector (unit vector).</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L141","def":{"name":"normalize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"self * (1.0 / (length + 2.2250738585072014e-308))"}},{"id":"perp:Vect-instance-method","html_id":"perp:Vect-instance-method","name":"perp","doc":"Returns a perpendicular vector. (90 degree rotation)","summary":"<p>Returns a perpendicular vector.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L92","def":{"name":"perp","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(-@y, @x)"}},{"id":"project(v2:Vect):Vect-instance-method","html_id":"project(v2:Vect):Vect-instance-method","name":"project","doc":"Returns the vector projection of the vector onto *v2*.","summary":"<p>Returns the vector projection of the vector onto <em>v2</em>.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L102","def":{"name":"project","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"(v2 * (dot(v2))) / (v2.dot(v2))"}},{"id":"rotate(v2:Vect):Vect-instance-method","html_id":"rotate(v2:Vect):Vect-instance-method","name":"rotate","doc":"Uses complex number multiplication to rotate the vector by *v2*.\n\nScaling will occur if the vector is not a unit vector.","summary":"<p>Uses complex number multiplication to rotate the vector by <em>v2</em>.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L114","def":{"name":"rotate","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new((@x * v2.x) - (@y * v2.y), (@x * v2.y) + (@y * v2.x))"}},{"id":"rperp:Vect-instance-method","html_id":"rperp:Vect-instance-method","name":"rperp","doc":"Returns a perpendicular vector. (-90 degree rotation)","summary":"<p>Returns a perpendicular vector.</p>","abstract":false,"args":[],"args_string":" : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L97","def":{"name":"rperp","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new(@y, -@x)"}},{"id":"to_angle:Float64-instance-method","html_id":"to_angle:Float64-instance-method","name":"to_angle","doc":"Returns the angular direction the vector is pointing in (in radians).","summary":"<p>Returns the angular direction the vector is pointing in (in radians).</p>","abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L107","def":{"name":"to_angle","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Math.atan2(@y, @x)"}},{"id":"unrotate(v2:Vect):Vect-instance-method","html_id":"unrotate(v2:Vect):Vect-instance-method","name":"unrotate","doc":"Inverse of `rotate`.","summary":"<p>Inverse of <code><a href=\"../CP/Vect.html#rotate(v2:Vect):Vect-instance-method\">#rotate</a></code>.</p>","abstract":false,"args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"args_string":"(v2 : Vect) : Vect","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L119","def":{"name":"unrotate","args":[{"name":"v2","doc":null,"default_value":"","external_name":"v2","restriction":"Vect"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vect","visibility":"Public","body":"Vect.new((@x * v2.x) + (@y * v2.y), (@y * v2.x) - (@x * v2.y))"}},{"id":"x:Float64-instance-method","html_id":"x:Float64-instance-method","name":"x","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L39","def":{"name":"x","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@x"}},{"id":"x=(x:Float64)-instance-method","html_id":"x=(x:Float64)-instance-method","name":"x=","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"}],"args_string":"(x : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L39","def":{"name":"x=","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@x = x"}},{"id":"y:Float64-instance-method","html_id":"y:Float64-instance-method","name":"y","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L39","def":{"name":"y","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@y"}},{"id":"y=(y:Float64)-instance-method","html_id":"y=(y:Float64)-instance-method","name":"y=","doc":null,"summary":null,"abstract":false,"args":[{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"}],"args_string":"(y : Float64)","source_link":"https://github.com/oprypin/crystal-chipmunk/blob/20a1970ee594fed3d2763f5c0f5dc900d5691b3c/src/chipmunk/vector.cr#L39","def":{"name":"y=","args":[{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@y = y"}}],"macros":[],"types":[]}]}]}})